{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport axios from 'axios';\nimport { ref, unref, onMounted, onBeforeUnmount, watchEffect, watch } from 'vue';\n// vtk\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry'; // geometry rendering for WebGL, WebGPU\nimport '@kitware/vtk.js/Rendering/Profiles/Glyph'; // vtkGlyph3DMapper\nimport '@kitware/vtk.js/Rendering/Profiles/Molecule'; // vtkSphereMapper\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkLookupTable from '@kitware/vtk.js/Common/Core/LookupTable';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkGlyph3DMapper from '@kitware/vtk.js/Rendering/Core/Glyph3DMapper';\nimport vtkCubeSource from '@kitware/vtk.js/Filters/Sources/CubeSource';\nimport vtkSphereSource from '@kitware/vtk.js/Filters/Sources/SphereSource';\nimport vtkSphereMapper from '@kitware/vtk.js/Rendering/Core/SphereMapper';\nexport default {\n  setup() {\n    const bounds = new Array(6).fill(0.0);\n    const vtkContainer = ref(null);\n    const context = ref(null);\n    const node_representation = ref(0);\n    const events_opacity = ref(50);\n    const events_timestamp = ref(1640995200);\n    const plan_opacity = ref(100);\n    const plan_representation = ref(1);\n    const textEncoder = new TextEncoder();\n    //const path = 'http://localhost:5000';\n    const path = 'http://192.168.0.2:5000';\n\n    // nodes\n    const node_reader = vtkXMLPolyDataReader.newInstance();\n    const node_lut = vtkLookupTable.newInstance(); // make custom LUT\n    const data = new Uint8Array([0, 255, 0, 255, 255, 165, 80, 255, 255, 0, 0, 255]); // green, orange, red\n    const table = vtkDataArray.newInstance({\n      values: data,\n      numberOfComponents: 4\n    }); // to VTK\n    node_lut.setTable(table); // LUT = green, orange, red\n\n    const node_glyph = vtkCubeSource.newInstance();\n    const node_mapper = vtkGlyph3DMapper.newInstance();\n    const node_actor = vtkActor.newInstance();\n    //\n    node_mapper.setInputConnection(node_reader.getOutputPort());\n    //node_mapper.setSourceConnection(node_glyph.getOutputPort())\n    node_mapper.setInputConnection(node_glyph.getOutputPort(), 1);\n    node_mapper.setScalarModeToUsePointData();\n    node_mapper.setColorByArrayName('alert');\n    node_mapper.setScalarVisibility(true);\n    node_mapper.setScalarRange(1, 3);\n    node_mapper.setLookupTable(node_lut);\n    //node_mapper.setColorByArrayName(\"Scalars\");\n    node_mapper.setScalarModeToUsePointData();\n    node_mapper.setColorModeToMapScalars();\n    node_mapper.setScaleFactor(10.0);\n    //node_mapper.setScaleModeToScaleByConstant()\n    node_mapper.setScaleMode(1);\n    node_actor.setMapper(node_mapper);\n    //node_actor.getProperty().setAmbient(0.5)\n\n    // plan\n    const plan_reader = vtkXMLPolyDataReader.newInstance();\n    const plan_mapper = vtkMapper.newInstance();\n    const plan_actor = vtkActor.newInstance();\n    //\n    plan_mapper.setInputConnection(plan_reader.getOutputPort());\n    plan_actor.setMapper(plan_mapper);\n    plan_actor.getProperty().setOpacity(0.25);\n    plan_actor.getProperty().setColor(0.5, 0.5, 0.5);\n\n    // events\n    const events_reader = vtkXMLPolyDataReader.newInstance();\n    const events_glyph = vtkSphereSource.newInstance();\n    //const events_mapper = vtkGlyph3DMapper.newInstance();\n    const events_mapper = vtkSphereMapper.newInstance();\n    const events_actor = vtkActor.newInstance();\n    //\n    events_glyph.setThetaResolution(20);\n    events_glyph.setPhiResolution(10);\n    events_mapper.setInputConnection(events_reader.getOutputPort());\n    //events_mapper.setSourceConnection(events_glyph.getOutputPort())\n    events_mapper.setScaleFactor(100.0);\n    events_mapper.setScaleArray('scale');\n    events_mapper.setScalarVisibility(true);\n    events_mapper.setScalarModeToUsePointData();\n    //events_mapper.setColorByArrayName('dtEvent');\n    events_mapper.setScalarRange(1640995200.0, 1656653056.0);\n    events_actor.setMapper(events_mapper);\n    events_actor.getProperty().setOpacity(0.5);\n    function setNodeRepresentation(rep) {\n      node_representation.value = Number(rep);\n    }\n    function setEventOpacity(opacity) {\n      events_opacity.value = Number(opacity);\n    }\n    function setEventTimeStamp(res) {\n      events_timestamp.value = Number(res);\n    }\n    function setPlanOpacity(opacity) {\n      plan_opacity.value = Number(opacity);\n    }\n    function setPlanRepresentation(rep) {\n      plan_representation.value = Number(rep);\n    }\n\n    /*\n    function onEventFilter(timestamp, reset=false) {\n         const {renderWindow, renderer} = context.value;\n         if (context.value) {\n    \taxios.post(path + '/event_filter',{timestamp: timestamp})\n             .then(function (response_post) {\n               axios.get(path+'/events')\n                 .then((response_get) => {\n                   events_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data))\n    \t\t\t//events_reader.update()\n    \t\t\tif (reset) {\n                     renderer.resetCamera()\n                     console.log('reset')\n                     }\n    \t\t\trenderWindow.render();\n                   //console.log(response_get.data)\n                 })\n                 .catch((error) => {\n                   console.error(error);\n                 });\n               console.log(response_post);\n             })\n             .catch(function (error) {\n               console.log(error);\n             })\n    \trenderWindow.render();\n         }\n    }\n    */\n\n    async function onEventFilter(timestamp) {\n      const {\n        renderWindow\n      } = context.value;\n      await getEvents({\n        bounds: bounds,\n        mine: 'Bambanani',\n        timestamp: timestamp\n      });\n      renderWindow.render();\n    }\n    function getNodes(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/nodes', args).then(response_get => {\n          node_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n          node_mapper.update();\n          resolve('nodes');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    function getPlan(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/plan', args).then(response_get => {\n          plan_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n          resolve('plan');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    function getEvents(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/events', args).then(response_get => {\n          events_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n          resolve('events');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    async function getAllAndRender() {\n      const {\n        renderWindow,\n        renderer\n      } = context.value;\n      await getNodes();\n      bounds = node_reader.getOutputData().getBounds();\n      const buffer = 1000.0;\n      bounds[0] -= buffer;\n      bounds[1] += buffer;\n      bounds[2] -= buffer;\n      bounds[3] += buffer;\n      bounds[4] -= buffer;\n      bounds[5] += buffer;\n      console.log(bounds);\n      Promise.allSettled([getPlan({\n        bounds: bounds,\n        mine: 'Bambanani'\n      }), getEvents({\n        bounds: bounds,\n        mine: 'Bambanani'\n      })]).then(() => {\n        renderer.resetCamera();\n        renderWindow.render();\n      });\n    }\n    watch(events_timestamp, newValue => {\n      onEventFilter(newValue);\n    });\n    watchEffect(() => {\n      if (context.value) {\n        const {\n          renderWindow\n        } = context.value;\n        node_mapper.setScaleMode(unref(node_representation));\n        plan_actor.getProperty().setOpacity(unref(plan_opacity) * 0.01);\n        plan_actor.getProperty().setRepresentation(unref(plan_representation));\n        events_actor.getProperty().setOpacity(unref(events_opacity) * 0.01);\n        renderWindow.render();\n      }\n    });\n    onMounted(() => {\n      console.log('onMounted');\n      if (!context.value) {\n        const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value\n        });\n        //fullScreenRenderer.setAlphaBitPlanes(1) // depth-peeling\n        //fullScreenRenderer.setMultiSamples(0) // depth-peeling\n\n        const renderer = fullScreenRenderer.getRenderer();\n        const renderWindow = fullScreenRenderer.getRenderWindow();\n        //\n        renderer.setBackground(1.0, 1.0, 1.0);\n        renderer.setUseDepthPeeling(true); // depth peeling\n        renderer.setMaximumNumberOfPeels(100); // depth peeling\n        renderer.setOcclusionRatio(0.01); // depth peeling\n        //\n        //renderer.addActor(node_actor)\n        renderer.addActor(plan_actor);\n        renderer.addActor(events_actor);\n        context.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          //\n          node_actor,\n          node_mapper,\n          node_reader,\n          node_glyph,\n          //\n          events_actor,\n          events_mapper,\n          events_reader,\n          events_glyph,\n          //\n          plan_reader,\n          plan_mapper,\n          plan_actor\n        };\n\n        // renders as well\n        getAllAndRender();\n\n        //onEventFilter(unref(events_timestamp), true)\n        //renderWindow.render()\n      }\n    });\n    onBeforeUnmount(() => {\n      if (context.value) {\n        //const {fullScreenRenderer, actor, mapper } = context.value;\n        const {\n          renderer,\n          renderWindow,\n          fullScreenRenderer,\n          node_reader,\n          node_actor,\n          node_mapper,\n          node_glyph,\n          plan_reader,\n          plan_actor,\n          plan_mapper,\n          events_reader,\n          events_actor,\n          events_mapper,\n          events_glyph\n        } = context.value;\n        plan_actor.delete();\n        plan_mapper.delete();\n        plan_reader.delete();\n        node_actor.delete();\n        node_mapper.delete();\n        node_reader.delete();\n        node_glyph.delete();\n        events_reader.delete();\n        events_actor.delete();\n        events_mapper.delete();\n        events_glyph.delete();\n        //\n        renderer.delete();\n        renderWindow.delete();\n        //\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n    return {\n      vtkContainer,\n      setNodeRepresentation,\n      setEventOpacity,\n      setEventTimeStamp,\n      setPlanOpacity,\n      setPlanRepresentation,\n      plan_opacity,\n      plan_representation,\n      events_timestamp,\n      events_opacity,\n      node_representation,\n      //\n      getNodes,\n      getPlan,\n      getEvents\n    };\n  }\n};","map":{"version":3,"names":["axios","ref","unref","onMounted","onBeforeUnmount","watchEffect","watch","vtkFullScreenRenderWindow","vtkActor","vtkLookupTable","vtkDataArray","vtkMapper","vtkXMLPolyDataReader","vtkGlyph3DMapper","vtkCubeSource","vtkSphereSource","vtkSphereMapper","setup","bounds","Array","fill","vtkContainer","context","node_representation","events_opacity","events_timestamp","plan_opacity","plan_representation","textEncoder","TextEncoder","path","node_reader","newInstance","node_lut","data","Uint8Array","table","values","numberOfComponents","setTable","node_glyph","node_mapper","node_actor","setInputConnection","getOutputPort","setScalarModeToUsePointData","setColorByArrayName","setScalarVisibility","setScalarRange","setLookupTable","setColorModeToMapScalars","setScaleFactor","setScaleMode","setMapper","plan_reader","plan_mapper","plan_actor","getProperty","setOpacity","setColor","events_reader","events_glyph","events_mapper","events_actor","setThetaResolution","setPhiResolution","setScaleArray","setNodeRepresentation","rep","value","Number","setEventOpacity","opacity","setEventTimeStamp","res","setPlanOpacity","setPlanRepresentation","onEventFilter","timestamp","renderWindow","getEvents","mine","render","getNodes","args","Promise","resolve","reject","put","then","response_get","parseAsArrayBuffer","encode","update","catch","error","getPlan","getAllAndRender","renderer","getOutputData","getBounds","buffer","console","log","allSettled","resetCamera","newValue","setRepresentation","fullScreenRenderer","rootContainer","getRenderer","getRenderWindow","setBackground","setUseDepthPeeling","setMaximumNumberOfPeels","setOcclusionRatio","addActor","delete"],"sources":["C:\\Users\\Malcolm\\Projects\\Web\\TickerWeb\\TickerWeb_Vue\\src\\components\\TickerVTK.vue"],"sourcesContent":["<template>\n  <div>\n    <div ref=\"vtkContainer\" />\n    <table class=\"controls\">\n      <tbody>\n        <tr>\n          <td style=\"text-align:left\"><b>Nodes</b></td>\n          <td style=\"text-align:left\"> </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Representation</td>\n          <td>\n            <select\n              style=\"width: 100%\"\n              :value=\"node_representation\"\n              @change=\"setNodeRepresentation($event.target.value)\"\n            >\n              <option value=\"0\">Unscaled</option>\n              <option value=\"1\">Scaled</option>\n            </select>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"text-align:left\"><b>Events</b></td>\n          <td style=\"text-align:left\"> </td>\n        </tr>\n        <tr>\n          <td style=\"text-align:left\">TimeStamp</td>\n          <td>\n            <input\n              type=\"range\"\n              min=\"1640995200\"\n              max=\"1656653056\"\n              :value=\"events_timestamp\"\n              @input=\"setEventTimeStamp($event.target.value)\"\n            />\n          </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Opacity</td>\n          <td>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              :value=\"events_opacity\"\n              @input=\"setEventOpacity($event.target.value)\"\n            />\n          </td>\n        </tr>\t\t\n        <tr>\n          <td style=\"text-align:left\"><b>Plan</b></td>\n          <td style=\"text-align:left\"> </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Opacity</td>\n          <td>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              :value=\"plan_opacity\"\n              @input=\"setPlanOpacity($event.target.value)\"\n            />\n          </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Representation</td>\n          <td>\n            <select\n              style=\"width: 100%\"\n              :value=\"plan_representation\"\n              @change=\"setPlanRepresentation($event.target.value)\"\n            >\n              <option value=\"0\">Points</option>\n              <option value=\"1\">Wireframe</option>\n            </select>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ref, unref, onMounted, onBeforeUnmount, watchEffect, watch } from 'vue';\n// vtk\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry'; // geometry rendering for WebGL, WebGPU\nimport '@kitware/vtk.js/Rendering/Profiles/Glyph'; // vtkGlyph3DMapper\nimport '@kitware/vtk.js/Rendering/Profiles/Molecule'; // vtkSphereMapper\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkActor                  from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkLookupTable            from '@kitware/vtk.js/Common/Core/LookupTable';\nimport vtkDataArray              from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkMapper                 from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader      from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkGlyph3DMapper          from '@kitware/vtk.js/Rendering/Core/Glyph3DMapper'; \nimport vtkCubeSource             from '@kitware/vtk.js/Filters/Sources/CubeSource';\nimport vtkSphereSource           from '@kitware/vtk.js/Filters/Sources/SphereSource';\nimport vtkSphereMapper           from '@kitware/vtk.js/Rendering/Core/SphereMapper';\n\nexport default {\n\n  setup() {\n  \n    const bounds = new Array(6).fill(0.0)\n\t\n\tconst vtkContainer = ref(null);\n    const context = ref(null);\n\n    const node_representation = ref(0);    \n\tconst events_opacity      = ref(50);\n    const events_timestamp    = ref(1640995200);\n\tconst plan_opacity        = ref(100);\n    const plan_representation = ref(1);\n\t\n    const textEncoder = new TextEncoder();\n    //const path = 'http://localhost:5000';\n\tconst path = 'http://192.168.0.2:5000';\n    \n\t// nodes\n\tconst node_reader = vtkXMLPolyDataReader.newInstance()\n\tconst node_lut = vtkLookupTable.newInstance(); // make custom LUT\n    const data = new Uint8Array([0, 255, 0, 255, 255, 165, 80, 255, 255, 0, 0, 255]); // green, orange, red\n    const table = vtkDataArray.newInstance({values: data, numberOfComponents: 4}); // to VTK\n    node_lut.setTable(table); // LUT = green, orange, red\n\n\tconst node_glyph = vtkCubeSource.newInstance();\n\tconst node_mapper = vtkGlyph3DMapper.newInstance();\n\tconst node_actor = vtkActor.newInstance();\n\t//\n\tnode_mapper.setInputConnection(node_reader.getOutputPort());\n\t//node_mapper.setSourceConnection(node_glyph.getOutputPort())\n    node_mapper.setInputConnection(node_glyph.getOutputPort(), 1)\n\tnode_mapper.setScalarModeToUsePointData();\n\tnode_mapper.setColorByArrayName('alert');\n\tnode_mapper.setScalarVisibility(true);\n\tnode_mapper.setScalarRange(1, 3);\n    node_mapper.setLookupTable(node_lut);\n    //node_mapper.setColorByArrayName(\"Scalars\");\n\tnode_mapper.setScalarModeToUsePointData()\n    node_mapper.setColorModeToMapScalars();\n\tnode_mapper.setScaleFactor(10.0);\n\t//node_mapper.setScaleModeToScaleByConstant()\n\tnode_mapper.setScaleMode(1)\n    node_actor.setMapper(node_mapper);\n\t//node_actor.getProperty().setAmbient(0.5)\n\t\n\t// plan\n\tconst plan_reader = vtkXMLPolyDataReader.newInstance();\n\tconst plan_mapper = vtkMapper.newInstance();\n\tconst plan_actor  = vtkActor.newInstance();\n\t//\n\tplan_mapper.setInputConnection(plan_reader.getOutputPort());\n\tplan_actor.setMapper(plan_mapper)\n\tplan_actor.getProperty().setOpacity(0.25)\n\tplan_actor.getProperty().setColor(0.5, 0.5, 0.5)\n\t\n\t// events\n\tconst events_reader = vtkXMLPolyDataReader.newInstance();\n\tconst events_glyph  = vtkSphereSource.newInstance();\n\t//const events_mapper = vtkGlyph3DMapper.newInstance();\n    const events_mapper = vtkSphereMapper.newInstance();\n\tconst events_actor  = vtkActor.newInstance();\n\t//\n    events_glyph.setThetaResolution(20)\n    events_glyph.setPhiResolution(10)\n\tevents_mapper.setInputConnection(events_reader.getOutputPort());\n\t//events_mapper.setSourceConnection(events_glyph.getOutputPort())\n\tevents_mapper.setScaleFactor(100.0);\n    events_mapper.setScaleArray('scale');\n\tevents_mapper.setScalarVisibility(true);\n\tevents_mapper.setScalarModeToUsePointData()\n\t//events_mapper.setColorByArrayName('dtEvent');\n\tevents_mapper.setScalarRange(1640995200.0, 1656653056.0)\n\tevents_actor.setMapper(events_mapper)\n\tevents_actor.getProperty().setOpacity(0.5)\n\t\n    function setNodeRepresentation(rep) {\n      node_representation.value = Number(rep);\n    }\n\n\tfunction setEventOpacity(opacity) {\n      events_opacity.value = Number(opacity);\n    }\n\t\n    function setEventTimeStamp(res) {\n      events_timestamp.value = Number(res);\n    }\n\t\n\tfunction setPlanOpacity(opacity) {\n      plan_opacity.value = Number(opacity);\n    }\n\n    function setPlanRepresentation(rep) {\n      plan_representation.value = Number(rep);\n    }\n\t\n\t/*\n\tfunction onEventFilter(timestamp, reset=false) {\n      const {renderWindow, renderer} = context.value;\n      if (context.value) {\n\t\taxios.post(path + '/event_filter',{timestamp: timestamp})\n          .then(function (response_post) {\n            axios.get(path+'/events')\n              .then((response_get) => {\n                events_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data))\n\t\t\t\t//events_reader.update()\n\t\t\t\tif (reset) {\n                  renderer.resetCamera()\n                  console.log('reset')\n                  }\n\t\t\t\trenderWindow.render();\n                //console.log(response_get.data)\n              })\n              .catch((error) => {\n                console.error(error);\n              });\n            console.log(response_post);\n          })\n          .catch(function (error) {\n            console.log(error);\n          })\n\t\trenderWindow.render();\n      }\n\t}\n\t*/\n\t\n    async function onEventFilter(timestamp) {\n      const {renderWindow} = context.value\n      await getEvents({bounds: bounds, mine: 'Bambanani', timestamp: timestamp})\n      renderWindow.render()\n\t}\n\t\n\t\n\tfunction getNodes(args={}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/nodes', args)\n          .then((response_get) => {\n            node_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data))\n            node_mapper.update()\t\t\t\n            resolve('nodes')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n\tfunction getPlan(args={}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/plan', args)\n          .then((response_get) => {\n            plan_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data))\t\t  \n            resolve('plan')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n\tfunction getEvents(args={}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/events', args)\n          .then((response_get) => {\n            events_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data))\t\t  \n            resolve('events')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n    async function getAllAndRender() {\n      const {renderWindow, renderer} = context.value\n      await getNodes()\n      bounds = node_reader.getOutputData().getBounds()\n      const buffer = 1000.0\n      bounds[0] -= buffer\n      bounds[1] += buffer\n      bounds[2] -= buffer\n      bounds[3] += buffer\n      bounds[4] -= buffer\n      bounds[5] += buffer\n      console.log(bounds)\n      Promise.allSettled([getPlan({bounds: bounds, mine: 'Bambanani'}), getEvents({bounds: bounds, mine: 'Bambanani'})]).then(() => {\n\t\trenderer.resetCamera()\n        renderWindow.render()\n      })\n\t}\n\t\n\twatch(events_timestamp, (newValue) => {\n      onEventFilter(newValue)\n\t})\n\n    watchEffect(() => {\n      if (context.value) {\n        const {renderWindow } = context.value;\n\t\tnode_mapper.setScaleMode(unref(node_representation));\n\t\tplan_actor.getProperty().setOpacity(unref(plan_opacity)*0.01);\n        plan_actor.getProperty().setRepresentation(unref(plan_representation))\n\t\tevents_actor.getProperty().setOpacity(unref(events_opacity)*0.01)\n\t\trenderWindow.render();\n      }\n    });\n\t\n    onMounted(() => {\n      console.log('onMounted')\n\t\n      if (!context.value) {\n        \n\t\tconst fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value,\n          });\n        //fullScreenRenderer.setAlphaBitPlanes(1) // depth-peeling\n        //fullScreenRenderer.setMultiSamples(0) // depth-peeling\n         \n        const renderer = fullScreenRenderer.getRenderer()\n        const renderWindow = fullScreenRenderer.getRenderWindow()\n\t\t//\n        renderer.setBackground(1.0, 1.0, 1.0)\n\t\trenderer.setUseDepthPeeling(true) // depth peeling\n        renderer.setMaximumNumberOfPeels(100) // depth peeling\n        renderer.setOcclusionRatio(0.01) // depth peeling\n\t\t//\n\t\t//renderer.addActor(node_actor)\n\t\trenderer.addActor(plan_actor)\n\t\trenderer.addActor(events_actor)\n\t\t\n\t\tcontext.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          //\n          node_actor,\n          node_mapper,\n          node_reader,\n          node_glyph,\n          //\n          events_actor,\n          events_mapper,\n          events_reader,\n          events_glyph,\n          //\n          plan_reader,\n          plan_mapper,\n          plan_actor,\n        };\n\t\t\n\t\t// renders as well\n\t\tgetAllAndRender()\n        \n\t\t//onEventFilter(unref(events_timestamp), true)\n\t\t//renderWindow.render()\n      }\n    });\n\t\n\n\tonBeforeUnmount(() => {\n      if (context.value) {\n\t\t//const {fullScreenRenderer, actor, mapper } = context.value;\n        const { renderer, renderWindow, fullScreenRenderer, node_reader, node_actor, node_mapper, node_glyph, plan_reader, plan_actor, plan_mapper, events_reader, events_actor, events_mapper, events_glyph, } = context.value;\n        plan_actor.delete();\n        plan_mapper.delete();\n        plan_reader.delete();\n\t\tnode_actor.delete();\n        node_mapper.delete();\n        node_reader.delete();\n\t\tnode_glyph.delete();\n        events_reader.delete();\n        events_actor.delete();\n        events_mapper.delete();\n        events_glyph.delete();\n        //\n\t\trenderer.delete()\n\t\trenderWindow.delete()\n        //\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n\n    return {\n      vtkContainer,\n      setNodeRepresentation,\n      setEventOpacity,\n      setEventTimeStamp,\n      setPlanOpacity,\n      setPlanRepresentation,\n      plan_opacity,\n      plan_representation,\n      events_timestamp,\n      events_opacity,\n      node_representation,\n      //\n      getNodes,\n      getPlan,\n      getEvents,\n    };\n  }\n}\n</script>\n\n<style scoped>\n.controls {\n  position: absolute;\n  top: 25px;\n  left: 25px;\n  background: white;\n  padding: 12px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}