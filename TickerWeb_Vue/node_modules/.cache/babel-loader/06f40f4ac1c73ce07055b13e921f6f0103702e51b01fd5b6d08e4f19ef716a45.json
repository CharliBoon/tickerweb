{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport axios from 'axios';\nimport { ref, unref, onMounted, onBeforeUnmount, watchEffect, watch } from 'vue';\n// vtk\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry'; // geometry rendering for WebGL, WebGPU\nimport '@kitware/vtk.js/Rendering/Profiles/Glyph'; // vtkGlyph3DMapper\nimport '@kitware/vtk.js/Rendering/Profiles/Molecule'; // vtkSphereMapper\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkXMLImageDataReader from '@kitware/vtk.js/IO/XML/XMLImageDataReader';\nimport vtkGlyph3DMapper from '@kitware/vtk.js/Rendering/Core/Glyph3DMapper';\nimport vtkCubeSource from '@kitware/vtk.js/Filters/Sources/CubeSource';\nimport vtkSphereMapper from '@kitware/vtk.js/Rendering/Core/SphereMapper';\n//\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkPoints from '@kitware/vtk.js/Common/Core/Points';\nimport vtkCellArray from '@kitware/vtk.js/Common/Core/CellArray';\nimport vtkLookupTable from '@kitware/vtk.js/Common/Core/LookupTable';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nexport default {\n  setup() {\n    const session = {\n      user: 'malcolm',\n      mine: 'Bambanani'\n    };\n    let nodes = {\n      'data': [],\n      'meta': {}\n    }; // node data - response getNodes - for table, polydata\n    let events = {\n      'data': [],\n      'meta': {}\n    }; // event data - response getEvents - for table, polydata\n\n    let bounds = new Array(6).fill(0.0);\n    const vtkContainer = ref(null);\n    const context = ref(null);\n    const node_representation = ref(0);\n    const events_opacity = ref(50);\n    const events_timestamp = ref(0);\n    const events_timestamp_min = ref(0);\n    const events_timestamp_max = ref(0);\n    const plan_opacity = ref(100);\n    const plan_representation = ref(1);\n    const textEncoder = new TextEncoder();\n    //const path = 'http://localhost:5000';\n    const path = 'http://192.168.0.2:5000';\n\n    // nodes\n    const node_lut = vtkLookupTable.newInstance(); // make custom LUT\n    const data = new Uint8Array([0, 255, 0, 255, 255, 165, 80, 255, 255, 0, 0, 255]); // RGBA: green, orange, red\n    const table = vtkDataArray.newInstance({\n      values: data,\n      numberOfComponents: 4\n    }); // to VTK\n    node_lut.setTable(table); // LUT = green, orange, red\n\n    const node_glyph = vtkCubeSource.newInstance();\n    const node_mapper = vtkGlyph3DMapper.newInstance();\n    const node_actor = vtkActor.newInstance();\n    //\n    node_mapper.setScalarModeToUsePointData();\n    node_mapper.setScalarVisibility(true);\n    node_mapper.setScalarRange(1, 3);\n    node_mapper.setLookupTable(node_lut);\n    node_mapper.setScaleFactor(10.0);\n    node_actor.setMapper(node_mapper);\n    //node_actor.getProperty().setAmbient(0.5)\n\n    // plan\n    const plan_reader = vtkXMLPolyDataReader.newInstance();\n    const plan_mapper = vtkMapper.newInstance();\n    const plan_actor = vtkActor.newInstance();\n    //\n    plan_mapper.setInputConnection(plan_reader.getOutputPort());\n    plan_actor.setMapper(plan_mapper);\n    plan_actor.getProperty().setOpacity(0.25);\n    plan_actor.getProperty().setColor(0.5, 0.5, 0.5);\n\n    // volume\n    const volume_reader = vtkXMLImageDataReader.newInstance();\n    const volume_mapper = vtkMapper.newInstance();\n    const volume_actor = vtkActor.newInstance();\n    //\n    volume_mapper.setInputConnection(volume_reader.getOutputPort());\n    volume_actor.setMapper(volume_mapper);\n    volume_actor.getProperty().setOpacity(0.25);\n    //volume_actor.getProperty().setRepresentationToWireframe()\n    volume_actor.getProperty().setColor(0.5, 0.5, 0.5);\n\n    // events\n    const events_reader = vtkXMLPolyDataReader.newInstance();\n    const events_mapper = vtkSphereMapper.newInstance();\n    const events_actor = vtkActor.newInstance();\n    //\n    events_mapper.setInputConnection(events_reader.getOutputPort());\n    events_mapper.setScaleFactor(100.0);\n    events_mapper.setScaleArray('scale');\n    events_mapper.setScalarVisibility(true);\n    events_mapper.setScalarModeToUsePointData();\n    events_actor.setMapper(events_mapper);\n    events_actor.getProperty().setOpacity(0.5);\n    function setNodeRepresentation(rep) {\n      node_representation.value = Number(rep);\n    }\n    function setEventOpacity(opacity) {\n      events_opacity.value = Number(opacity);\n    }\n    function setEventTimeStamp(res) {\n      events_timestamp.value = Number(res);\n    }\n    function setPlanOpacity(opacity) {\n      plan_opacity.value = Number(opacity);\n    }\n    function setPlanRepresentation(rep) {\n      plan_representation.value = Number(rep);\n    }\n    async function onEventFilter(timestamp) {\n      const {\n        renderWindow\n      } = context.value;\n      filterEventData(timestamp);\n      renderWindow.render();\n    }\n\n    // provide data to vtk pipelines ------------------------------------------\n\n    // nodes\n\n    function getNodes(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/nodes', args).then(response_get => {\n          nodes = response_get.data;\n          const pd = newPolyDataFromNodes(nodes);\n          node_mapper.setInputData(pd, 0);\n          node_mapper.setInputData(node_glyph.getOutputData(), 1);\n          resolve('nodes_data');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    function newPolyDataFromNodes(nodes) {\n      const nodes_data = nodes['data'];\n      const points = vtkPoints.newInstance();\n      points.setNumberOfPoints(nodes_data.length);\n      const arr_alerts = new Float32Array(nodes_data.length);\n      const arr_verts = [];\n      nodes_data.forEach((node, index) => {\n        arr_alerts[index] = node.alert;\n        arr_verts.push(1, index);\n        points.setPoint(index, node.x, node.y, node.z);\n      });\n      const alerts = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_alerts,\n        name: 'alerts'\n      });\n      const verts = vtkCellArray.newInstance({\n        values: Uint16Array.from(arr_verts)\n      });\n      const pd = vtkPolyData.newInstance();\n      pd.setPoints(points);\n      pd.setVerts(verts);\n      pd.getPointData().setScalars(alerts);\n      return pd;\n    }\n\n    // plan\n\n    function getPlan(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/plan_vtk', args).then(response_get => {\n          plan_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n          resolve('plan');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n\n    // volume\n\n    function getVolume(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/volume_vtk', args).then(response_get => {\n          volume_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n          console.log('volume');\n          console.log(typeof volume_reader.getOutputDataObject(0));\n          resolve('volume');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n\n    // events\n\n    function getEvents(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/events', args).then(response_get => {\n          events = response_get.data;\n          const pd = newPolyDataFromEvents(events);\n          events_mapper.setInputData(pd);\n          resolve('events_data');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    function filterEventData(timestamp) {\n      const events_data = events.data.filter(event => {\n        return event.timestamp > timestamp;\n      });\n      const pd = newPolyDataFromEvents({\n        'meta': events.meta,\n        'data': events_data\n      });\n      events_mapper.setInputData(pd);\n    }\n    function newPolyDataFromEvents(events) {\n      const events_data = events.data;\n      const points = vtkPoints.newInstance();\n      points.setNumberOfPoints(events_data.length);\n      const arr_mags = new Float32Array(events_data.length);\n      const arr_timestamp = new Float32Array(events_data.length);\n      const arr_scale = new Float32Array(events_data.length);\n      const arr_verts = [];\n      const offset = 1.0;\n      const min_mag = events['meta'].min_mag;\n      const max_mag = events['meta'].max_mag;\n      events_data.forEach((event_data, index) => {\n        arr_mags[index] = event_data.mag;\n        arr_scale[index] = (offset - min_mag + event_data.mag) / (offset - min_mag + max_mag);\n        arr_timestamp[index] = event_data.timestamp;\n        arr_verts.push(1, index);\n        points.setPoint(index, event_data.x, event_data.y, event_data.z);\n      });\n      const mags = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_mags,\n        name: 'mags'\n      });\n      const scale = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_scale,\n        name: 'scale'\n      });\n      const timestamp = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_timestamp,\n        name: 'timestamp'\n      });\n      const verts = vtkCellArray.newInstance({\n        values: Uint16Array.from(arr_verts)\n      });\n      const pd = vtkPolyData.newInstance();\n      pd.setPoints(points);\n      pd.setVerts(verts);\n      pd.getPointData().addArray(mags);\n      pd.getPointData().addArray(scale);\n      pd.getPointData().addArray(timestamp);\n      pd.getPointData().setActiveAttributeByName('timestamp', 0); // scalars\n      return pd;\n    }\n\n    // all --------------------------------------------------------------------\n\n    async function getAllAndRender() {\n      const {\n        renderWindow,\n        renderer\n      } = context.value;\n      await getNodes({\n        mine: session.mine\n      });\n      bounds = node_mapper.getInputData().getBounds();\n      //await getNodes({mine: session.mine})\n      //bounds = node_reader.getOutputData().getBounds()\n      const buffer = 1000.0;\n      bounds[0] -= buffer;\n      bounds[1] += buffer;\n      bounds[2] -= buffer;\n      bounds[3] += buffer;\n      bounds[4] -= buffer;\n      bounds[5] += buffer;\n      //\n      Promise.allSettled([getPlan({\n        bounds: bounds,\n        mine: session.mine\n      }), getEvents({\n        bounds: bounds,\n        mine: session.mine,\n        timestamp: 0.0\n      }), getVolume({\n        mine: session.mine\n      })]).then(() => {\n        const range = events_mapper.getInputData().getPointData().getScalars().getRange();\n        events_timestamp_min.value = range[0];\n        events_timestamp_max.value = range[1];\n        events_timestamp.value = range[0];\n        events_mapper.setScalarRange(range);\n        renderer.resetCamera();\n        renderWindow.render();\n      });\n    }\n    function checkModified() {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/modified', {\n          mine: session.mine\n        }).then(response_get => {\n          console.log(response_get.data);\n          resolve('plan');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    watch(events_timestamp, newValue => {\n      onEventFilter(newValue);\n    });\n    watchEffect(() => {\n      if (context.value) {\n        const {\n          renderWindow\n        } = context.value;\n        console.log(unref(node_representation));\n        node_mapper.setScaleMode(unref(node_representation));\n        node_mapper.update();\n        plan_actor.getProperty().setOpacity(unref(plan_opacity) * 0.01);\n        plan_actor.getProperty().setRepresentation(unref(plan_representation));\n        events_actor.getProperty().setOpacity(unref(events_opacity) * 0.01);\n        renderWindow.render();\n      }\n    });\n    onMounted(() => {\n      console.log('onMounted');\n      if (!context.value) {\n        const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value\n        });\n        const renderer = fullScreenRenderer.getRenderer();\n        const renderWindow = fullScreenRenderer.getRenderWindow();\n        //\n        renderer.setBackground(1.0, 1.0, 1.0);\n        renderer.setUseDepthPeeling(true); // depth peeling\n        renderer.setMaximumNumberOfPeels(100); // depth peeling\n        renderer.setOcclusionRatio(0.01); // depth peeling\n        //\n        renderer.addActor(node_actor);\n        renderer.addActor(plan_actor);\n        renderer.addActor(events_actor);\n        renderer.addActor(volume_actor);\n        context.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          //\n          node_actor,\n          node_mapper,\n          node_glyph,\n          //\n          events_actor,\n          events_mapper,\n          //\n          plan_reader,\n          plan_mapper,\n          plan_actor,\n          //\n          volume_reader,\n          volume_mapper,\n          volume_actor\n        };\n\n        // render all and start monitoring for changes to incoming datasets\n        getAllAndRender();\n        setInterval(checkModified, 30000);\n      }\n    });\n    onBeforeUnmount(() => {\n      if (context.value) {\n        const {\n          renderer,\n          renderWindow,\n          fullScreenRenderer,\n          node_actor,\n          node_mapper,\n          node_glyph,\n          plan_reader,\n          plan_actor,\n          plan_mapper,\n          events_actor,\n          events_mapper\n        } = context.value;\n        plan_actor.delete();\n        plan_mapper.delete();\n        plan_reader.delete();\n        node_actor.delete();\n        node_mapper.delete();\n        node_glyph.delete();\n        events_actor.delete();\n        events_mapper.delete();\n        //\n        renderer.delete();\n        renderWindow.delete();\n        //\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n    return {\n      vtkContainer,\n      setNodeRepresentation,\n      setEventOpacity,\n      setEventTimeStamp,\n      setPlanOpacity,\n      setPlanRepresentation,\n      plan_opacity,\n      plan_representation,\n      events_timestamp,\n      events_timestamp_min,\n      events_timestamp_max,\n      events_opacity,\n      node_representation\n    };\n  }\n};","map":{"version":3,"names":["axios","ref","unref","onMounted","onBeforeUnmount","watchEffect","watch","vtkFullScreenRenderWindow","vtkActor","vtkMapper","vtkXMLPolyDataReader","vtkXMLImageDataReader","vtkGlyph3DMapper","vtkCubeSource","vtkSphereMapper","vtkPolyData","vtkPoints","vtkCellArray","vtkLookupTable","vtkDataArray","setup","session","user","mine","nodes","events","bounds","Array","fill","vtkContainer","context","node_representation","events_opacity","events_timestamp","events_timestamp_min","events_timestamp_max","plan_opacity","plan_representation","textEncoder","TextEncoder","path","node_lut","newInstance","data","Uint8Array","table","values","numberOfComponents","setTable","node_glyph","node_mapper","node_actor","setScalarModeToUsePointData","setScalarVisibility","setScalarRange","setLookupTable","setScaleFactor","setMapper","plan_reader","plan_mapper","plan_actor","setInputConnection","getOutputPort","getProperty","setOpacity","setColor","volume_reader","volume_mapper","volume_actor","events_reader","events_mapper","events_actor","setScaleArray","setNodeRepresentation","rep","value","Number","setEventOpacity","opacity","setEventTimeStamp","res","setPlanOpacity","setPlanRepresentation","onEventFilter","timestamp","renderWindow","filterEventData","render","getNodes","args","Promise","resolve","reject","put","then","response_get","pd","newPolyDataFromNodes","setInputData","getOutputData","catch","error","nodes_data","points","setNumberOfPoints","length","arr_alerts","Float32Array","arr_verts","forEach","node","index","alert","push","setPoint","x","y","z","alerts","name","verts","Uint16Array","from","setPoints","setVerts","getPointData","setScalars","getPlan","parseAsArrayBuffer","encode","getVolume","console","log","getOutputDataObject","getEvents","newPolyDataFromEvents","events_data","filter","event","meta","arr_mags","arr_timestamp","arr_scale","offset","min_mag","max_mag","event_data","mag","mags","scale","addArray","setActiveAttributeByName","getAllAndRender","renderer","getInputData","getBounds","buffer","allSettled","range","getScalars","getRange","resetCamera","checkModified","newValue","setScaleMode","update","setRepresentation","fullScreenRenderer","rootContainer","getRenderer","getRenderWindow","setBackground","setUseDepthPeeling","setMaximumNumberOfPeels","setOcclusionRatio","addActor","setInterval","delete"],"sources":["C:\\Users\\Malcolm\\Projects\\Web\\TickerWeb\\TickerWeb_Vue\\src\\components\\TickerVTK.vue"],"sourcesContent":["<template>\n  <div>\n    <div ref=\"vtkContainer\" />\n    <table class=\"controls\">\n      <tbody>\n        <tr>\n          <td style=\"text-align:left\"><b>Nodes</b></td>\n          <td style=\"text-align:left\"> </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Representation</td>\n          <td>\n            <select\n              style=\"width: 100%\"\n              :value=\"node_representation\"\n              @change=\"setNodeRepresentation($event.target.value)\"\n            >\n              <option value=\"0\">Unscaled</option>\n              <option value=\"1\">Scaled</option>\n            </select>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"text-align:left\"><b>Events</b></td>\n          <td style=\"text-align:left\"> </td>\n        </tr>\n        <tr>\n          <td style=\"text-align:left\">TimeStamp</td>\n          <td>\n            <input\n              type=\"range\"\n              :min=\"events_timestamp_min\"\n              :max=\"events_timestamp_max\"\n              :value=\"events_timestamp\"\n              @input=\"setEventTimeStamp($event.target.value)\"\n            />\n          </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Opacity</td>\n          <td>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              :value=\"events_opacity\"\n              @input=\"setEventOpacity($event.target.value)\"\n            />\n          </td>\n        </tr>\t\t\n        <tr>\n          <td style=\"text-align:left\"><b>Plan</b></td>\n          <td style=\"text-align:left\"> </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Opacity</td>\n          <td>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              :value=\"plan_opacity\"\n              @input=\"setPlanOpacity($event.target.value)\"\n            />\n          </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Representation</td>\n          <td>\n            <select\n              style=\"width: 100%\"\n              :value=\"plan_representation\"\n              @change=\"setPlanRepresentation($event.target.value)\"\n            >\n              <option value=\"0\">Points</option>\n              <option value=\"1\">Wireframe</option>\n            </select>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ref, unref, onMounted, onBeforeUnmount, watchEffect, watch } from 'vue';\n// vtk\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry'; // geometry rendering for WebGL, WebGPU\nimport '@kitware/vtk.js/Rendering/Profiles/Glyph';    // vtkGlyph3DMapper\nimport '@kitware/vtk.js/Rendering/Profiles/Molecule'; // vtkSphereMapper\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkActor                  from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper                 from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader      from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkXMLImageDataReader     from '@kitware/vtk.js/IO/XML/XMLImageDataReader';\nimport vtkGlyph3DMapper          from '@kitware/vtk.js/Rendering/Core/Glyph3DMapper'; \nimport vtkCubeSource             from '@kitware/vtk.js/Filters/Sources/CubeSource';\nimport vtkSphereMapper           from '@kitware/vtk.js/Rendering/Core/SphereMapper';\n//\nimport vtkPolyData               from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkPoints                 from '@kitware/vtk.js/Common/Core/Points';\nimport vtkCellArray              from '@kitware/vtk.js/Common/Core/CellArray'\nimport vtkLookupTable            from '@kitware/vtk.js/Common/Core/LookupTable';\nimport vtkDataArray              from '@kitware/vtk.js/Common/Core/DataArray';\n\nexport default {\n\n  setup() {\n  \n    const session = {user: 'malcolm', mine:'Bambanani'}\n    let nodes = {'data':[], 'meta':{}} // node data - response getNodes - for table, polydata\n    let events = {'data':[], 'meta':{}} // event data - response getEvents - for table, polydata\n\t\n\tlet bounds = new Array(6).fill(0.0)\n\t\n\tconst vtkContainer = ref(null);\n    const context = ref(null);\n\n    const node_representation  = ref(0);    \n\tconst events_opacity       = ref(50);\n    const events_timestamp     = ref(0);\n    const events_timestamp_min = ref(0);\n    const events_timestamp_max = ref(0);\n\tconst plan_opacity         = ref(100);\n    const plan_representation  = ref(1);\n\t\n    const textEncoder = new TextEncoder();\n    //const path = 'http://localhost:5000';\n\tconst path = 'http://192.168.0.2:5000';\n    \n\t// nodes\n\tconst node_lut = vtkLookupTable.newInstance(); // make custom LUT\n    const data = new Uint8Array([0, 255, 0, 255, 255, 165, 80, 255, 255, 0, 0, 255]); // RGBA: green, orange, red\n    const table = vtkDataArray.newInstance({values: data, numberOfComponents: 4}); // to VTK\n    node_lut.setTable(table); // LUT = green, orange, red\n\n\tconst node_glyph = vtkCubeSource.newInstance();\n\tconst node_mapper = vtkGlyph3DMapper.newInstance();\n\tconst node_actor = vtkActor.newInstance();\n\t//\n\tnode_mapper.setScalarModeToUsePointData()\n\tnode_mapper.setScalarVisibility(true)\n\tnode_mapper.setScalarRange(1, 3)\n    node_mapper.setLookupTable(node_lut)\n\tnode_mapper.setScaleFactor(10.0)\n    node_actor.setMapper(node_mapper)\n\t//node_actor.getProperty().setAmbient(0.5)\n\t\n\t// plan\n\tconst plan_reader = vtkXMLPolyDataReader.newInstance();\n\tconst plan_mapper = vtkMapper.newInstance();\n\tconst plan_actor  = vtkActor.newInstance();\n\t//\n\tplan_mapper.setInputConnection(plan_reader.getOutputPort());\n\tplan_actor.setMapper(plan_mapper)\n\tplan_actor.getProperty().setOpacity(0.25)\n\tplan_actor.getProperty().setColor(0.5, 0.5, 0.5)\n\t\n\t// volume\n\tconst volume_reader = vtkXMLImageDataReader.newInstance();\n\tconst volume_mapper = vtkMapper.newInstance();\n\tconst volume_actor  = vtkActor.newInstance();\n\t//\n\tvolume_mapper.setInputConnection(volume_reader.getOutputPort());\n\tvolume_actor.setMapper(volume_mapper)\n\tvolume_actor.getProperty().setOpacity(0.25)\n\t//volume_actor.getProperty().setRepresentationToWireframe()\n\tvolume_actor.getProperty().setColor(0.5, 0.5, 0.5)\n\t\n\t// events\n\tconst events_reader = vtkXMLPolyDataReader.newInstance();\n    const events_mapper = vtkSphereMapper.newInstance();\n\tconst events_actor  = vtkActor.newInstance();\n\t//\n\tevents_mapper.setInputConnection(events_reader.getOutputPort())\n\tevents_mapper.setScaleFactor(100.0);\n    events_mapper.setScaleArray('scale');\n\tevents_mapper.setScalarVisibility(true);\n\tevents_mapper.setScalarModeToUsePointData()\n\tevents_actor.setMapper(events_mapper)\n\tevents_actor.getProperty().setOpacity(0.5)\n\t\n    function setNodeRepresentation(rep) {\n      node_representation.value = Number(rep);\n    }\n\n\tfunction setEventOpacity(opacity) {\n      events_opacity.value = Number(opacity);\n    }\n\t\n    function setEventTimeStamp(res) {\n      events_timestamp.value = Number(res);\n    }\n\t\n\tfunction setPlanOpacity(opacity) {\n      plan_opacity.value = Number(opacity);\n    }\n\n    function setPlanRepresentation(rep) {\n      plan_representation.value = Number(rep);\n    }\n\t\n\t\n    async function onEventFilter(timestamp) {\n      const {renderWindow} = context.value\n      filterEventData(timestamp)\n      renderWindow.render()\n\t}\n\t\n\t// provide data to vtk pipelines ------------------------------------------\n\t\n\t// nodes\n\t\n\tfunction getNodes(args={}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/nodes', args)\n          .then((response_get) => {\n\t\t\tnodes = response_get.data\n            const pd = newPolyDataFromNodes(nodes)\n\t\t\tnode_mapper.setInputData(pd,0)\n\t\t\tnode_mapper.setInputData(node_glyph.getOutputData(),1)\n            resolve('nodes_data')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n\tfunction newPolyDataFromNodes(nodes) {\n      const nodes_data = nodes['data']\n      const points = vtkPoints.newInstance()\n      points.setNumberOfPoints(nodes_data.length)\n      const arr_alerts = new Float32Array(nodes_data.length)\n      const arr_verts = []\n      \n      nodes_data.forEach((node, index) => {\n        arr_alerts[index] = node.alert\n        arr_verts.push(1,index)\n        points.setPoint(index, node.x, node.y, node.z);\n      })\n      const alerts = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_alerts,\n        name: 'alerts',\n      })\n      const verts = vtkCellArray.newInstance({values: Uint16Array.from(arr_verts)})\n      const pd = vtkPolyData.newInstance()\n      pd.setPoints(points)\n      pd.setVerts(verts)\n      pd.getPointData().setScalars(alerts)\n      return pd\n    }\n\t\n\t// plan\n\t\n\tfunction getPlan(args={}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/plan_vtk', args)\n          .then((response_get) => {\n            plan_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data))\t\t  \n            resolve('plan')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n\t// volume\n\t\n\tfunction getVolume(args={}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/volume_vtk', args)\n          .then((response_get) => {\n            volume_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data))\t\t  \n            console.log('volume')\n\t\t\tconsole.log(typeof(volume_reader.getOutputDataObject(0)))\n            resolve('volume')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n\t// events\n\t\n\tfunction getEvents(args={}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/events', args)\n          .then((response_get) => {\n\t\t\tevents = response_get.data\n            const pd = newPolyDataFromEvents(events)\n\t\t\tevents_mapper.setInputData(pd)\n            resolve('events_data')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n\tfunction filterEventData(timestamp) {\n      const events_data = events.data.filter((event) => {\n        return event.timestamp > timestamp\n        }\n      )\n      const pd = newPolyDataFromEvents({'meta':events.meta, 'data':events_data})\n      events_mapper.setInputData(pd)\n    }\n\t\n\tfunction newPolyDataFromEvents(events) {\n      const events_data = events.data\n      const points = vtkPoints.newInstance()\n      points.setNumberOfPoints(events_data.length)\n      const arr_mags = new Float32Array(events_data.length)\n      const arr_timestamp = new Float32Array(events_data.length)\n      const arr_scale = new Float32Array(events_data.length)\n      const arr_verts = []\n      \n      const offset = 1.0\n      const min_mag = events['meta'].min_mag\n      const max_mag = events['meta'].max_mag\n      \n      events_data.forEach((event_data, index) => {\n        arr_mags[index] = event_data.mag\n        arr_scale[index] = (offset - min_mag + event_data.mag)/(offset - min_mag + max_mag)\n        arr_timestamp[index] = event_data.timestamp\n        arr_verts.push(1,index)\n        points.setPoint(index, event_data.x, event_data.y, event_data.z);\n      })\n      const mags = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_mags,\n        name: 'mags',\n      })\n      const scale = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_scale,\n        name: 'scale',\n      })\n      const timestamp = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_timestamp,\n        name: 'timestamp',\n      })\n      const verts = vtkCellArray.newInstance({values: Uint16Array.from(arr_verts)})\n      const pd = vtkPolyData.newInstance()\n      pd.setPoints(points)\n      pd.setVerts(verts)\n      pd.getPointData().addArray(mags)\n      pd.getPointData().addArray(scale)\n      pd.getPointData().addArray(timestamp)\n      pd.getPointData().setActiveAttributeByName('timestamp', 0) // scalars\n      return pd   \t\n    }\n\t\n\t// all --------------------------------------------------------------------\n\t\n    async function getAllAndRender() {\n      const {renderWindow, renderer} = context.value\n      await getNodes({mine: session.mine})\n      bounds = node_mapper.getInputData().getBounds()\n      //await getNodes({mine: session.mine})\n      //bounds = node_reader.getOutputData().getBounds()\n      const buffer = 1000.0\n      bounds[0] -= buffer\n      bounds[1] += buffer\n      bounds[2] -= buffer\n      bounds[3] += buffer\n      bounds[4] -= buffer\n      bounds[5] += buffer\n      //\n      Promise.allSettled([getPlan({bounds: bounds, mine: session.mine}), getEvents({bounds: bounds, mine: session.mine, timestamp: 0.0}), getVolume({mine: session.mine})]).then(() => {\n        const range = events_mapper.getInputData().getPointData().getScalars().getRange()\n        events_timestamp_min.value = range[0]\n        events_timestamp_max.value = range[1]\n\t\tevents_timestamp.value = range[0]\n\t\tevents_mapper.setScalarRange(range)\n\t\trenderer.resetCamera()\n        renderWindow.render()\n      })\n\t}\n\t\n    function checkModified(){\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/modified', {mine: session.mine})\n          .then((response_get) => {\n            console.log(response_get.data)\t\t  \n            resolve('plan')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n\twatch(events_timestamp, (newValue) => {\n      onEventFilter(newValue)\n\t})\n\n    watchEffect(() => {\n      if (context.value) {\n        const {renderWindow } = context.value;\n\t\tconsole.log(unref(node_representation))\n\t\tnode_mapper.setScaleMode(unref(node_representation));\n\t\tnode_mapper.update()\n\t\tplan_actor.getProperty().setOpacity(unref(plan_opacity)*0.01);\n        plan_actor.getProperty().setRepresentation(unref(plan_representation))\n\t\tevents_actor.getProperty().setOpacity(unref(events_opacity)*0.01)\n\t\trenderWindow.render();\n      }\n    });\n\t\n    onMounted(() => {\n      console.log('onMounted')\n\t\n      if (!context.value) {\n        \n\t\tconst fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value,\n          });\n         \n        const renderer = fullScreenRenderer.getRenderer()\n        const renderWindow = fullScreenRenderer.getRenderWindow()\n\t\t//\n        renderer.setBackground(1.0, 1.0, 1.0)\n\t\trenderer.setUseDepthPeeling(true) // depth peeling\n        renderer.setMaximumNumberOfPeels(100) // depth peeling\n        renderer.setOcclusionRatio(0.01) // depth peeling\n\t\t//\n\t\trenderer.addActor(node_actor)\n\t\trenderer.addActor(plan_actor)\n\t\trenderer.addActor(events_actor)\n\t\trenderer.addActor(volume_actor)\n\t\t\n\t\tcontext.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          //\n          node_actor,\n          node_mapper,\n          node_glyph,\n          //\n          events_actor,\n          events_mapper,\n          //\n          plan_reader,\n          plan_mapper,\n          plan_actor,\n          //\n          volume_reader,\n          volume_mapper,\n          volume_actor,\n        };\n\t\t\n\t\t// render all and start monitoring for changes to incoming datasets\n\t\tgetAllAndRender()\n        setInterval(checkModified, 30000)\n      }\n    });\n\t\n\n\tonBeforeUnmount(() => {\n      if (context.value) {\n        const { renderer, renderWindow, fullScreenRenderer, node_actor, node_mapper, node_glyph, plan_reader, plan_actor, plan_mapper, events_actor, events_mapper} = context.value;\n        plan_actor.delete();\n        plan_mapper.delete();\n        plan_reader.delete();\n\t\tnode_actor.delete();\n        node_mapper.delete();\n\t\tnode_glyph.delete();\n        events_actor.delete();\n        events_mapper.delete();\n        //\n\t\trenderer.delete()\n\t\trenderWindow.delete()\n        //\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n\n    return {\n      vtkContainer,\n      setNodeRepresentation,\n      setEventOpacity,\n      setEventTimeStamp,\n      setPlanOpacity,\n      setPlanRepresentation,\n      plan_opacity,\n      plan_representation,\n      events_timestamp,\n      events_timestamp_min,\n      events_timestamp_max,\n      events_opacity,\n      node_representation,\n    };\n  }\n}\n</script>\n\n<style scoped>\n.controls {\n  position: absolute;\n  top: 25px;\n  left: 25px;\n  background: white;\n  padding: 12px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}