{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { VtkDataTypes } from '../../Common/Core/DataArray/Constants.js';\nimport { m as macro } from '../../macros2.js';\nimport { registerViewConstructor } from '../Core/RenderWindow.js';\nimport vtkForwardPass from './ForwardPass.js';\nimport vtkHardwareSelector from './HardwareSelector.js';\nimport vtkShaderCache from './ShaderCache.js';\nimport vtkTextureUnitManager from './TextureUnitManager.js';\nimport vtkViewNodeFactory, { registerOverride } from './ViewNodeFactory.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkRenderWindowViewNode from '../SceneGraph/RenderWindowViewNode.js';\nimport { createContextProxyHandler } from './RenderWindow/ContextProxy.js';\nconst {\n  vtkDebugMacro,\n  vtkErrorMacro\n} = macro;\nconst SCREENSHOT_PLACEHOLDER = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%'\n};\nconst parentMethodsToProxy = ['activateTexture', 'deactivateTexture', 'disableCullFace', 'enableCullFace', 'get3DContext', 'getActiveFramebuffer', 'getContext', 'getDefaultTextureByteSize', 'getDefaultTextureInternalFormat', 'getDefaultToWebgl2', 'getGLInformations', 'getGraphicsMemoryInfo', 'getGraphicsResourceForObject', 'getHardwareMaximumLineWidth', 'getPixelData', 'getShaderCache', 'getTextureUnitForTexture', 'getTextureUnitManager', 'getWebgl2', 'makeCurrent', 'releaseGraphicsResources', 'registerGraphicsResourceUser', 'unregisterGraphicsResourceUser', 'restoreContext', 'setActiveFramebuffer', 'setContext', 'setDefaultToWebgl2', 'setGraphicsResourceForObject'];\nfunction checkRenderTargetSupport(gl, format, type) {\n  // create temporary frame buffer and texture\n  const framebuffer = gl.createFramebuffer();\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, 2, 2, 0, format, type, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  // check frame buffer status\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n  // clean up\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  return status === gl.FRAMEBUFFER_COMPLETE;\n}\n\n// ----------------------------------------------------------------------------\n// Monitor the usage of GL context across vtkOpenGLRenderWindow instances\n// ----------------------------------------------------------------------------\n\nlet GL_CONTEXT_COUNT = 0;\nconst GL_CONTEXT_LISTENERS = [];\nfunction createGLContext() {\n  GL_CONTEXT_COUNT++;\n  GL_CONTEXT_LISTENERS.forEach(cb => cb(GL_CONTEXT_COUNT));\n}\nfunction deleteGLContext() {\n  GL_CONTEXT_COUNT--;\n  GL_CONTEXT_LISTENERS.forEach(cb => cb(GL_CONTEXT_COUNT));\n}\nfunction pushMonitorGLContextCount(cb) {\n  GL_CONTEXT_LISTENERS.push(cb);\n}\nfunction popMonitorGLContextCount(cb) {\n  return GL_CONTEXT_LISTENERS.pop();\n}\nfunction _preventDefault(e) {\n  e.preventDefault();\n}\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLRenderWindow methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLRenderWindow(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLRenderWindow');\n\n  // Only create a cachingContextHandler if needed\n  let cachingContextHandler;\n  function getCachingContextHandler() {\n    if (!cachingContextHandler) {\n      cachingContextHandler = createContextProxyHandler();\n    }\n    return cachingContextHandler;\n  }\n  publicAPI.getViewNodeFactory = () => model.myFactory;\n\n  // prevent default context lost handler\n  model.canvas.addEventListener('webglcontextlost', _preventDefault, false);\n  model.canvas.addEventListener('webglcontextrestored', publicAPI.restoreContext, false);\n\n  // Auto update style\n  const previousSize = [0, 0];\n  function updateWindow() {\n    // Canvas size\n    if (model.renderable) {\n      if (model.size[0] !== previousSize[0] || model.size[1] !== previousSize[1]) {\n        previousSize[0] = model.size[0];\n        previousSize[1] = model.size[1];\n        model.canvas.setAttribute('width', model.size[0]);\n        model.canvas.setAttribute('height', model.size[1]);\n      }\n    }\n\n    // ImageStream size\n    if (model.viewStream) {\n      // If same size that's a NoOp\n      model.viewStream.setSize(model.size[0], model.size[1]);\n    }\n\n    // Offscreen ?\n    model.canvas.style.display = model.useOffScreen ? 'none' : 'block';\n\n    // Cursor type\n    if (model.el) {\n      model.el.style.cursor = model.cursorVisibility ? model.cursor : 'none';\n    }\n\n    // Invalidate cached DOM container size\n    model.containerSize = null;\n  }\n  publicAPI.onModified(updateWindow);\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNodes(model.renderable.getRenderersByReference());\n      publicAPI.addMissingNodes(model.renderable.getChildRenderWindowsByReference());\n      publicAPI.removeUnusedNodes();\n      publicAPI.initialize();\n      model.children.forEach(child => {\n        // Children can be openGl renderer or openGl render windows\n        // Only openGl renderers have a method setOpenGLRenderWindow\n        child.setOpenGLRenderWindow?.(publicAPI);\n      });\n    }\n  };\n  publicAPI.initialize = () => {\n    if (!model.initialized) {\n      // Set root parent if there is one\n      // Some methods of the root parent are proxied (see parentMethodsToProxy)\n      model.rootOpenGLRenderWindow = publicAPI.getLastAncestorOfType('vtkOpenGLRenderWindow');\n      if (model.rootOpenGLRenderWindow) {\n        // Initialize a 2D context that will copy the content of the root parent\n        model.context2D = publicAPI.get2DContext();\n      } else {\n        // Initialize a 3D context that may be used by child render windows\n        model.context = publicAPI.get3DContext();\n        publicAPI.resizeFromChildRenderWindows();\n        if (model.context) {\n          createGLContext();\n        }\n        model.textureUnitManager = vtkTextureUnitManager.newInstance();\n        model.textureUnitManager.setContext(model.context);\n        model.shaderCache.setContext(model.context);\n        // initialize blending for transparency\n        const gl = model.context;\n        gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.depthFunc(gl.LEQUAL);\n        gl.enable(gl.BLEND);\n      }\n      model.initialized = true;\n    }\n  };\n  publicAPI.makeCurrent = () => {\n    model.context.makeCurrent();\n  };\n  publicAPI.setContainer = el => {\n    if (model.el && model.el !== el) {\n      if (model.canvas.parentNode !== model.el) {\n        vtkErrorMacro('Error: canvas parent node does not match container');\n      }\n\n      // Remove canvas from previous container\n      model.el.removeChild(model.canvas);\n\n      // If the renderer has previously added\n      // a background image, remove it from the DOM.\n      if (model.el.contains(model.bgImage)) {\n        model.el.removeChild(model.bgImage);\n      }\n    }\n    if (model.el !== el) {\n      model.el = el;\n      if (model.el) {\n        model.el.appendChild(model.canvas);\n\n        // If the renderer is set to use a background\n        // image, attach it to the DOM.\n        if (model.useBackgroundImage) {\n          model.el.appendChild(model.bgImage);\n        }\n      }\n\n      // Trigger modified()\n      publicAPI.modified();\n    }\n  };\n  publicAPI.getContainer = () => model.el;\n  publicAPI.getContainerSize = () => {\n    if (!model.containerSize && model.el) {\n      const {\n        width,\n        height\n      } = model.el.getBoundingClientRect();\n      model.containerSize = [width, height];\n    }\n    return model.containerSize || model.size;\n  };\n  publicAPI.getFramebufferSize = () => {\n    const fbSize = model.activeFramebuffer?.getSize();\n    return fbSize || model.size;\n  };\n  publicAPI.getPixelData = (x1, y1, x2, y2) => {\n    const pixels = new Uint8Array((x2 - x1 + 1) * (y2 - y1 + 1) * 4);\n    model.context.readPixels(x1, y1, x2 - x1 + 1, y2 - y1 + 1, model.context.RGBA, model.context.UNSIGNED_BYTE, pixels);\n    return pixels;\n  };\n  publicAPI.get3DContext = function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      preserveDrawingBuffer: false,\n      depth: true,\n      alpha: true,\n      powerPreference: 'high-performance'\n    };\n    let result = null;\n    const webgl2Supported = typeof WebGL2RenderingContext !== 'undefined';\n    model.webgl2 = false;\n    if (model.defaultToWebgl2 && webgl2Supported) {\n      result = model.canvas.getContext('webgl2', options);\n      if (result) {\n        model.webgl2 = true;\n        vtkDebugMacro('using webgl2');\n      }\n    }\n    if (!result) {\n      vtkDebugMacro('using webgl1');\n      result = model.canvas.getContext('webgl', options) || model.canvas.getContext('experimental-webgl', options);\n    }\n    return new Proxy(result, getCachingContextHandler());\n  };\n  publicAPI.get2DContext = function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return model.canvas.getContext('2d', options);\n  };\n  publicAPI.restoreContext = () => {\n    const rp = vtkRenderPass.newInstance();\n    rp.setCurrentOperation('Release');\n    rp.traverse(publicAPI, null);\n  };\n  publicAPI.activateTexture = texture => {\n    // Only add if it isn't already there\n    const result = model._textureResourceIds.get(texture);\n    if (result !== undefined) {\n      model.context.activeTexture(model.context.TEXTURE0 + result);\n      return;\n    }\n    const activeUnit = publicAPI.getTextureUnitManager().allocate();\n    if (activeUnit < 0) {\n      vtkErrorMacro('Hardware does not support the number of textures defined.');\n      return;\n    }\n    model._textureResourceIds.set(texture, activeUnit);\n    model.context.activeTexture(model.context.TEXTURE0 + activeUnit);\n  };\n  publicAPI.deactivateTexture = texture => {\n    // Only deactivate if it isn't already there\n    const result = model._textureResourceIds.get(texture);\n    if (result !== undefined) {\n      publicAPI.getTextureUnitManager().free(result);\n      model._textureResourceIds.delete(texture);\n    }\n  };\n  publicAPI.getTextureUnitForTexture = texture => {\n    const result = model._textureResourceIds.get(texture);\n    if (result !== undefined) {\n      return result;\n    }\n    return -1;\n  };\n  publicAPI.getDefaultTextureByteSize = function (vtkType) {\n    let oglNorm16Ext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let useHalfFloat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (model.webgl2) {\n      switch (vtkType) {\n        case VtkDataTypes.CHAR:\n        case VtkDataTypes.SIGNED_CHAR:\n        case VtkDataTypes.UNSIGNED_CHAR:\n          return 1;\n        case oglNorm16Ext:\n        case useHalfFloat:\n        case VtkDataTypes.UNSIGNED_SHORT:\n        case VtkDataTypes.SHORT:\n        case VtkDataTypes.VOID:\n          // Used for unsigned int depth\n          return 2;\n        default:\n          // For all other cases, assume float\n          return 4;\n      }\n    }\n\n    // webgl1 type support is limited to 1 byte\n    return 1;\n  };\n  publicAPI.getDefaultTextureInternalFormat = function (vtktype, numComps) {\n    let oglNorm16Ext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let useHalfFloat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    if (model.webgl2) {\n      switch (vtktype) {\n        case VtkDataTypes.UNSIGNED_CHAR:\n          switch (numComps) {\n            case 1:\n              return model.context.R8;\n            case 2:\n              return model.context.RG8;\n            case 3:\n              return model.context.RGB8;\n            case 4:\n            default:\n              return model.context.RGBA8;\n          }\n        case oglNorm16Ext && !useHalfFloat && VtkDataTypes.UNSIGNED_SHORT:\n          switch (numComps) {\n            case 1:\n              return oglNorm16Ext.R16_EXT;\n            case 2:\n              return oglNorm16Ext.RG16_EXT;\n            case 3:\n              return oglNorm16Ext.RGB16_EXT;\n            case 4:\n            default:\n              return oglNorm16Ext.RGBA16_EXT;\n          }\n        // prioritize norm16 over float\n        case oglNorm16Ext && !useHalfFloat && VtkDataTypes.SHORT:\n          switch (numComps) {\n            case 1:\n              return oglNorm16Ext.R16_SNORM_EXT;\n            case 2:\n              return oglNorm16Ext.RG16_SNORM_EXT;\n            case 3:\n              return oglNorm16Ext.RGB16_SNORM_EXT;\n            case 4:\n            default:\n              return oglNorm16Ext.RGBA16_SNORM_EXT;\n          }\n        case VtkDataTypes.UNSIGNED_SHORT:\n        case VtkDataTypes.SHORT:\n        case VtkDataTypes.FLOAT:\n        default:\n          // useHalfFloat tells us if the texture can be accurately\n          // rendered with 16 bits or not.\n          switch (numComps) {\n            case 1:\n              return useHalfFloat ? model.context.R16F : model.context.R32F;\n            case 2:\n              return useHalfFloat ? model.context.RG16F : model.context.RG32F;\n            case 3:\n              return useHalfFloat ? model.context.RGB16F : model.context.RGB32F;\n            case 4:\n            default:\n              return useHalfFloat ? model.context.RGBA16F : model.context.RGBA32F;\n          }\n      }\n    }\n\n    // webgl1 only supports four types\n    switch (numComps) {\n      case 1:\n        return model.context.LUMINANCE;\n      case 2:\n        return model.context.LUMINANCE_ALPHA;\n      case 3:\n        return model.context.RGB;\n      case 4:\n      default:\n        return model.context.RGBA;\n    }\n  };\n  publicAPI.setBackgroundImage = img => {\n    model.bgImage.src = img.src;\n  };\n  publicAPI.setUseBackgroundImage = value => {\n    model.useBackgroundImage = value;\n\n    // Add or remove the background image from the\n    // DOM as specified.\n    if (model.useBackgroundImage && !model.el.contains(model.bgImage)) {\n      model.el.appendChild(model.bgImage);\n    } else if (!model.useBackgroundImage && model.el.contains(model.bgImage)) {\n      model.el.removeChild(model.bgImage);\n    }\n  };\n  function getCanvasDataURL() {\n    let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : model.imageFormat;\n    // Copy current canvas to not modify the original\n    const temporaryCanvas = document.createElement('canvas');\n    const temporaryContext = temporaryCanvas.getContext('2d');\n    temporaryCanvas.width = model.canvas.width;\n    temporaryCanvas.height = model.canvas.height;\n    temporaryContext.drawImage(model.canvas, 0, 0);\n\n    // Get current client rect to place canvas\n    const mainBoundingClientRect = model.canvas.getBoundingClientRect();\n    const renderWindow = model.renderable;\n    const renderers = renderWindow.getRenderers();\n    renderers.forEach(renderer => {\n      const viewProps = renderer.getViewProps();\n      viewProps.forEach(viewProp => {\n        // Check if the prop has a container that should have canvas\n        if (viewProp.getContainer) {\n          const container = viewProp.getContainer();\n          const canvasList = container.getElementsByTagName('canvas');\n          // Go throughout all canvas and copy it into temporary main canvas\n          for (let i = 0; i < canvasList.length; i++) {\n            const currentCanvas = canvasList[i];\n            const boundingClientRect = currentCanvas.getBoundingClientRect();\n            const newXPosition = boundingClientRect.x - mainBoundingClientRect.x;\n            const newYPosition = boundingClientRect.y - mainBoundingClientRect.y;\n            temporaryContext.drawImage(currentCanvas, newXPosition, newYPosition);\n          }\n        }\n      });\n    });\n    const screenshot = temporaryCanvas.toDataURL(format);\n    temporaryCanvas.remove();\n    publicAPI.invokeImageReady(screenshot);\n  }\n  publicAPI.captureNextImage = function () {\n    let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'image/png';\n    let {\n      resetCamera = false,\n      size = null,\n      scale = 1\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (model.deleted) {\n      return null;\n    }\n    model.imageFormat = format;\n    const previous = model.notifyStartCaptureImage;\n    model.notifyStartCaptureImage = true;\n    model._screenshot = {\n      size: !!size || scale !== 1 ? size || model.size.map(val => val * scale) : null\n    };\n    return new Promise((resolve, reject) => {\n      const subscription = publicAPI.onImageReady(imageURL => {\n        if (model._screenshot.size === null) {\n          model.notifyStartCaptureImage = previous;\n          subscription.unsubscribe();\n          if (model._screenshot.placeHolder) {\n            // resize the main canvas back to its original size and show it\n            model.size = model._screenshot.originalSize;\n\n            // process the resize\n            publicAPI.modified();\n\n            // restore the saved camera parameters, if applicable\n            if (model._screenshot.cameras) {\n              model._screenshot.cameras.forEach(_ref => {\n                let {\n                  restoreParamsFn,\n                  arg\n                } = _ref;\n                return restoreParamsFn(arg);\n              });\n            }\n\n            // Trigger a render at the original size\n            publicAPI.traverseAllPasses();\n\n            // Remove and clean up the placeholder, revealing the original\n            model.el.removeChild(model._screenshot.placeHolder);\n            model._screenshot.placeHolder.remove();\n            model._screenshot = null;\n          }\n          resolve(imageURL);\n        } else {\n          // Create a placeholder image overlay while we resize and render\n          const tmpImg = document.createElement('img');\n          tmpImg.style = SCREENSHOT_PLACEHOLDER;\n          tmpImg.src = imageURL;\n          model._screenshot.placeHolder = model.el.appendChild(tmpImg);\n\n          // hide the main canvas\n          model.canvas.style.display = 'none';\n\n          // remember the main canvas original size, then resize it\n          model._screenshot.originalSize = model.size;\n          model.size = model._screenshot.size;\n          model.rootOpenGLRenderWindow?.resizeFromChildRenderWindows();\n          model._screenshot.size = null;\n\n          // process the resize\n          publicAPI.modified();\n          if (resetCamera) {\n            const isUserResetCamera = resetCamera !== true;\n\n            // If resetCamera was requested, we first save camera parameters\n            // from all the renderers, so we can restore them later\n            model._screenshot.cameras = model.renderable.getRenderers().map(renderer => {\n              const camera = renderer.getActiveCamera();\n              const params = camera.get('focalPoint', 'position', 'parallelScale');\n              return {\n                resetCameraArgs: isUserResetCamera ? {\n                  renderer\n                } : undefined,\n                resetCameraFn: isUserResetCamera ? resetCamera : renderer.resetCamera,\n                restoreParamsFn: camera.set,\n                // \"clone\" the params so we don't keep refs to properties\n                arg: JSON.parse(JSON.stringify(params))\n              };\n            });\n\n            // Perform the resetCamera() on each renderer only after capturing\n            // the params from all active cameras, in case there happen to be\n            // linked cameras among the renderers.\n            model._screenshot.cameras.forEach(_ref2 => {\n              let {\n                resetCameraFn,\n                resetCameraArgs\n              } = _ref2;\n              return resetCameraFn(resetCameraArgs);\n            });\n          }\n\n          // Trigger a render at the custom size\n          publicAPI.traverseAllPasses();\n        }\n      });\n    });\n  };\n  let hardwareMaximumLineWidth;\n  publicAPI.getHardwareMaximumLineWidth = () => {\n    // We cache the result of this function because `getParameter` is slow\n    if (hardwareMaximumLineWidth != null) {\n      return hardwareMaximumLineWidth;\n    }\n    const gl = publicAPI.get3DContext();\n    const lineWidthRange = gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE);\n    hardwareMaximumLineWidth = lineWidthRange[1];\n    return lineWidthRange[1];\n  };\n  publicAPI.getGLInformations = () => {\n    if (model._glInformation) {\n      return model._glInformation;\n    }\n    const gl = publicAPI.get3DContext();\n    const glTextureFloat = gl.getExtension('OES_texture_float');\n    const glTextureHalfFloat = gl.getExtension('OES_texture_half_float');\n    const glDebugRendererInfo = gl.getExtension('WEBGL_debug_renderer_info');\n    const glDrawBuffers = gl.getExtension('WEBGL_draw_buffers');\n    const glAnisotropic = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n    const params = [['Max Vertex Attributes', 'MAX_VERTEX_ATTRIBS', gl.getParameter(gl.MAX_VERTEX_ATTRIBS)], ['Max Varying Vectors', 'MAX_VARYING_VECTORS', gl.getParameter(gl.MAX_VARYING_VECTORS)], ['Max Vertex Uniform Vectors', 'MAX_VERTEX_UNIFORM_VECTORS', gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS)], ['Max Fragment Uniform Vectors', 'MAX_FRAGMENT_UNIFORM_VECTORS', gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS)], ['Max Fragment Texture Image Units', 'MAX_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS)], ['Max Vertex Texture Image Units', 'MAX_VERTEX_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS)], ['Max Combined Texture Image Units', 'MAX_COMBINED_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS)], ['Max 2D Texture Size', 'MAX_TEXTURE_SIZE', gl.getParameter(gl.MAX_TEXTURE_SIZE)], ['Max Cube Texture Size', 'MAX_CUBE_MAP_TEXTURE_SIZE', gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)], ['Max Texture Anisotropy', 'MAX_TEXTURE_MAX_ANISOTROPY_EXT', glAnisotropic && gl.getParameter(glAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT)], ['Point Size Range', 'ALIASED_POINT_SIZE_RANGE', gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE).join(' - ')], ['Line Width Range', 'ALIASED_LINE_WIDTH_RANGE', gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE).join(' - ')], ['Max Viewport Dimensions', 'MAX_VIEWPORT_DIMS', gl.getParameter(gl.MAX_VIEWPORT_DIMS).join(' - ')], ['Max Renderbuffer Size', 'MAX_RENDERBUFFER_SIZE', gl.getParameter(gl.MAX_RENDERBUFFER_SIZE)], ['Framebuffer Red Bits', 'RED_BITS', gl.getParameter(gl.RED_BITS)], ['Framebuffer Green Bits', 'GREEN_BITS', gl.getParameter(gl.GREEN_BITS)], ['Framebuffer Blue Bits', 'BLUE_BITS', gl.getParameter(gl.BLUE_BITS)], ['Framebuffer Alpha Bits', 'ALPHA_BITS', gl.getParameter(gl.ALPHA_BITS)], ['Framebuffer Depth Bits', 'DEPTH_BITS', gl.getParameter(gl.DEPTH_BITS)], ['Framebuffer Stencil Bits', 'STENCIL_BITS', gl.getParameter(gl.STENCIL_BITS)], ['Framebuffer Subpixel Bits', 'SUBPIXEL_BITS', gl.getParameter(gl.SUBPIXEL_BITS)], ['MSAA Samples', 'SAMPLES', gl.getParameter(gl.SAMPLES)], ['MSAA Sample Buffers', 'SAMPLE_BUFFERS', gl.getParameter(gl.SAMPLE_BUFFERS)], ['Supported Formats for UByte Render Targets     ', 'UNSIGNED_BYTE RENDER TARGET FORMATS', [glTextureFloat && checkRenderTargetSupport(gl, gl.RGBA, gl.UNSIGNED_BYTE) ? 'RGBA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.RGB, gl.UNSIGNED_BYTE) ? 'RGB' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, gl.UNSIGNED_BYTE) ? 'LUMINANCE' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.ALPHA, gl.UNSIGNED_BYTE) ? 'ALPHA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, gl.UNSIGNED_BYTE) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Supported Formats for Half Float Render Targets', 'HALF FLOAT RENDER TARGET FORMATS', [glTextureHalfFloat && checkRenderTargetSupport(gl, gl.RGBA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'RGBA' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.RGB, glTextureHalfFloat.HALF_FLOAT_OES) ? 'RGB' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, glTextureHalfFloat.HALF_FLOAT_OES) ? 'LUMINANCE' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.ALPHA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'ALPHA' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Supported Formats for Full Float Render Targets', 'FLOAT RENDER TARGET FORMATS', [glTextureFloat && checkRenderTargetSupport(gl, gl.RGBA, gl.FLOAT) ? 'RGBA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.RGB, gl.FLOAT) ? 'RGB' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, gl.FLOAT) ? 'LUMINANCE' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.ALPHA, gl.FLOAT) ? 'ALPHA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, gl.FLOAT) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Max Multiple Render Targets Buffers', 'MAX_DRAW_BUFFERS_WEBGL', glDrawBuffers ? gl.getParameter(glDrawBuffers.MAX_DRAW_BUFFERS_WEBGL) : 0], ['High Float Precision in Vertex Shader', 'HIGH_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).rangeMax, '</sup>)'].join('')], ['Medium Float Precision in Vertex Shader', 'MEDIUM_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).rangeMax, '</sup>)'].join('')], ['Low Float Precision in Vertex Shader', 'LOW_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).rangeMax, '</sup>)'].join('')], ['High Float Precision in Fragment Shader', 'HIGH_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).rangeMax, '</sup>)'].join('')], ['Medium Float Precision in Fragment Shader', 'MEDIUM_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).rangeMax, '</sup>)'].join('')], ['Low Float Precision in Fragment Shader', 'LOW_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).rangeMax, '</sup>)'].join('')], ['High Int Precision in Vertex Shader', 'HIGH_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).rangeMax, '</sup>)'].join('')], ['Medium Int Precision in Vertex Shader', 'MEDIUM_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).rangeMax, '</sup>)'].join('')], ['Low Int Precision in Vertex Shader', 'LOW_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).rangeMax, '</sup>)'].join('')], ['High Int Precision in Fragment Shader', 'HIGH_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).rangeMax, '</sup>)'].join('')], ['Medium Int Precision in Fragment Shader', 'MEDIUM_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).rangeMax, '</sup>)'].join('')], ['Low Int Precision in Fragment Shader', 'LOW_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).rangeMax, '</sup>)'].join('')], ['Supported Extensions', 'EXTENSIONS', gl.getSupportedExtensions().join('<br/>\\t\\t\\t\\t\\t    ')], ['WebGL Renderer', 'RENDERER', gl.getParameter(gl.RENDERER)], ['WebGL Vendor', 'VENDOR', gl.getParameter(gl.VENDOR)], ['WebGL Version', 'VERSION', gl.getParameter(gl.VERSION)], ['Shading Language Version', 'SHADING_LANGUAGE_VERSION', gl.getParameter(gl.SHADING_LANGUAGE_VERSION)], ['Unmasked Renderer', 'UNMASKED_RENDERER', glDebugRendererInfo && gl.getParameter(glDebugRendererInfo.UNMASKED_RENDERER_WEBGL)], ['Unmasked Vendor', 'UNMASKED_VENDOR', glDebugRendererInfo && gl.getParameter(glDebugRendererInfo.UNMASKED_VENDOR_WEBGL)], ['WebGL Version', 'WEBGL_VERSION', model.webgl2 ? 2 : 1]];\n    const result = {};\n    while (params.length) {\n      const [label, key, value] = params.pop();\n      if (key) {\n        result[key] = {\n          label,\n          value\n        };\n      }\n    }\n    model._glInformation = result;\n    return result;\n  };\n  publicAPI.traverseAllPasses = () => {\n    if (model.renderPasses) {\n      for (let index = 0; index < model.renderPasses.length; ++index) {\n        model.renderPasses[index].traverse(publicAPI, null);\n      }\n    }\n    publicAPI.copyParentContent();\n    if (model.notifyStartCaptureImage) {\n      getCanvasDataURL();\n    }\n    const childrenRW = model.renderable.getChildRenderWindowsByReference();\n    for (let i = 0; i < childrenRW.length; ++i) {\n      publicAPI.getViewNodeFor(childrenRW[i])?.traverseAllPasses();\n    }\n  };\n  publicAPI.copyParentContent = () => {\n    const rootParent = model.rootOpenGLRenderWindow;\n    if (!rootParent || !model.context2D || model.children.some(oglRenderer => !!oglRenderer.getSelector?.())) {\n      return;\n    }\n    const parentCanvas = rootParent.getCanvas();\n    const selfCanvas = model.canvas;\n    model.context2D.drawImage(parentCanvas, 0, parentCanvas.height - selfCanvas.height,\n    // source y axis is inverted\n    selfCanvas.width, selfCanvas.height, 0, 0, selfCanvas.width, selfCanvas.height);\n  };\n  publicAPI.resizeFromChildRenderWindows = () => {\n    // Adapt the size of the parent render window to the child render windows\n    const childrenRW = model.renderable.getChildRenderWindowsByReference();\n    if (childrenRW.length > 0) {\n      const maxSize = [0, 0];\n      for (let i = 0; i < childrenRW.length; ++i) {\n        const childSize = publicAPI.getViewNodeFor(childrenRW[i])?.getSize();\n        if (childSize) {\n          maxSize[0] = childSize[0] > maxSize[0] ? childSize[0] : maxSize[0];\n          maxSize[1] = childSize[1] > maxSize[1] ? childSize[1] : maxSize[1];\n        }\n      }\n      publicAPI.setSize(...maxSize);\n    }\n  };\n  publicAPI.disableCullFace = () => {\n    if (model.cullFaceEnabled) {\n      model.context.disable(model.context.CULL_FACE);\n      model.cullFaceEnabled = false;\n    }\n  };\n  publicAPI.enableCullFace = () => {\n    if (!model.cullFaceEnabled) {\n      model.context.enable(model.context.CULL_FACE);\n      model.cullFaceEnabled = true;\n    }\n  };\n  publicAPI.setViewStream = stream => {\n    if (model.viewStream === stream) {\n      return false;\n    }\n    if (model.subscription) {\n      model.subscription.unsubscribe();\n      model.subscription = null;\n    }\n    model.viewStream = stream;\n    if (model.viewStream) {\n      // Force background to be transparent + render\n      const mainRenderer = model.renderable.getRenderers()[0];\n      mainRenderer.getBackgroundByReference()[3] = 0;\n\n      // Enable display of the background image\n      publicAPI.setUseBackgroundImage(true);\n\n      // Bind to remote stream\n      model.subscription = model.viewStream.onImageReady(e => publicAPI.setBackgroundImage(e.image));\n      model.viewStream.setSize(model.size[0], model.size[1]);\n      model.viewStream.invalidateCache();\n      model.viewStream.render();\n      publicAPI.modified();\n    }\n    return true;\n  };\n  publicAPI.createSelector = () => {\n    const ret = vtkHardwareSelector.newInstance();\n    ret.setOpenGLRenderWindow(publicAPI);\n    return ret;\n  };\n  function clearEvents() {\n    model.canvas.removeEventListener('webglcontextlost', _preventDefault);\n    model.canvas.removeEventListener('webglcontextrestored', publicAPI.restoreContext);\n  }\n  publicAPI.delete = macro.chain(() => {\n    if (model.context) {\n      deleteGLContext();\n    }\n    publicAPI.setContainer();\n    publicAPI.setViewStream();\n  }, clearEvents, publicAPI.delete);\n\n  // Do not trigger modified for performance reasons\n  publicAPI.setActiveFramebuffer = newActiveFramebuffer => {\n    model.activeFramebuffer = newActiveFramebuffer;\n  };\n  const superSetSize = publicAPI.setSize;\n  publicAPI.setSize = (width, height) => {\n    const modified = superSetSize(width, height);\n    if (modified) {\n      publicAPI.invokeWindowResizeEvent({\n        width,\n        height\n      });\n    }\n    return modified;\n  };\n  publicAPI.registerGraphicsResourceUser = (coreObject, newUser) => {\n    // Try to create the graphics resource if it doesn't exist\n    if (!model._graphicsResources.has(coreObject)) {\n      publicAPI.setGraphicsResourceForObject(coreObject, null, null);\n    }\n    // Add newUser to the set of users\n    const sharedResource = model._graphicsResources.get(coreObject);\n    sharedResource?.users.add(newUser);\n  };\n  publicAPI.unregisterGraphicsResourceUser = (coreObject, oldUser) => {\n    const sharedResource = model._graphicsResources.get(coreObject);\n    if (!sharedResource) {\n      return;\n    }\n    sharedResource.users.delete(oldUser);\n    // Release graphics resources when the number of users reaches 0\n    if (!sharedResource.users.size) {\n      sharedResource.oglObject?.releaseGraphicsResources(publicAPI);\n      model._graphicsResources.delete(coreObject);\n    }\n  };\n  publicAPI.getGraphicsResourceForObject = coreObject => model._graphicsResources.get(coreObject);\n  publicAPI.setGraphicsResourceForObject = (coreObject, oglObject, hash) => {\n    if (!coreObject) {\n      return;\n    }\n    const sharedResource = model._graphicsResources.get(coreObject);\n    // Release the old resource\n    sharedResource?.oglObject?.releaseGraphicsResources(publicAPI);\n    // Keep the same users that have registered for this coreObject\n    model._graphicsResources.set(coreObject, {\n      coreObject,\n      oglObject,\n      hash,\n      users: sharedResource?.users ?? new Set()\n    });\n  };\n  publicAPI.getGraphicsMemoryInfo = () => {\n    let memUsed = 0;\n    model._graphicsResources.forEach(_ref3 => {\n      let {\n        oglObject\n      } = _ref3;\n      memUsed += oglObject.getAllocatedGPUMemoryInBytes();\n    });\n    return memUsed;\n  };\n  publicAPI.releaseGraphicsResources = () => {\n    // Clear the shader cache\n    if (model.shaderCache !== null) {\n      model.shaderCache.releaseGraphicsResources(publicAPI);\n    }\n    // Free cached graphics resources at the context level\n    model._graphicsResources.forEach(_ref4 => {\n      let {\n        oglObject\n      } = _ref4;\n      oglObject.releaseGraphicsResources(publicAPI);\n    });\n    model._graphicsResources.clear();\n    if (model.textureUnitManager !== null) {\n      model.textureUnitManager.freeAll();\n    }\n    // Finally, ask the renderers to release prop resources\n    model.renderable.getRenderersByReference().forEach(ren => {\n      const glRen = publicAPI.getViewNodeFor(ren);\n      glRen?.releaseGraphicsResources();\n    });\n  };\n\n  // Proxy some methods if needed\n  const publicAPIBeforeProxy = {\n    ...publicAPI\n  };\n  parentMethodsToProxy.forEach(methodName => {\n    publicAPI[methodName] = function () {\n      if (model.rootOpenGLRenderWindow) {\n        // Proxy only methods when the render window has a parent\n        return model.rootOpenGLRenderWindow[methodName](...arguments);\n      }\n      return publicAPIBeforeProxy[methodName](...arguments);\n    };\n  });\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  cullFaceEnabled: false,\n  shaderCache: null,\n  initialized: false,\n  context: null,\n  context2D: null,\n  canvas: null,\n  cursorVisibility: true,\n  cursor: 'pointer',\n  textureUnitManager: null,\n  textureResourceIds: null,\n  containerSize: null,\n  renderPasses: [],\n  notifyStartCaptureImage: false,\n  webgl2: false,\n  defaultToWebgl2: true,\n  // attempt webgl2 on by default\n  activeFramebuffer: null,\n  imageFormat: 'image/png',\n  useOffScreen: false,\n  useBackgroundImage: false\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkRenderWindowViewNode.extend(publicAPI, model, initialValues);\n\n  // Create internal instances\n  if (!model.canvas) {\n    model.canvas = document.createElement('canvas');\n    model.canvas.style.width = '100%';\n  }\n  if (!model.selector) {\n    model.selector = vtkHardwareSelector.newInstance();\n    model.selector.setOpenGLRenderWindow(publicAPI);\n  }\n\n  // Create internal bgImage\n  model.bgImage = new Image();\n  model.bgImage.style.position = 'absolute';\n  model.bgImage.style.left = '0';\n  model.bgImage.style.top = '0';\n  model.bgImage.style.width = '100%';\n  model.bgImage.style.height = '100%';\n  model.bgImage.style.zIndex = '-1';\n  model._textureResourceIds = new Map();\n  model._graphicsResources = new Map();\n  model._glInformation = null;\n  model.myFactory = vtkViewNodeFactory.newInstance();\n  model.shaderCache = vtkShaderCache.newInstance();\n  model.shaderCache.setOpenGLRenderWindow(publicAPI);\n\n  // setup default forward pass rendering\n  model.renderPasses[0] = vtkForwardPass.newInstance();\n\n  // Build VTK API\n  macro.get(publicAPI, model, ['shaderCache', 'textureUnitManager', 'webgl2', 'useBackgroundImage', 'activeFramebuffer', 'rootOpenGLRenderWindow']);\n  macro.setGet(publicAPI, model, ['initialized', 'context', 'context2D', 'canvas', 'renderPasses', 'notifyStartCaptureImage', 'defaultToWebgl2', 'cursor', 'useOffScreen']);\n  macro.setGetArray(publicAPI, model, ['size'], 2);\n  macro.event(publicAPI, model, 'imageReady');\n  macro.event(publicAPI, model, 'windowResizeEvent');\n\n  // Object methods\n  vtkOpenGLRenderWindow(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkOpenGLRenderWindow');\n\n// ----------------------------------------------------------------------------\n// Register API specific RenderWindow implementation\n// ----------------------------------------------------------------------------\n\nregisterViewConstructor('WebGL', newInstance);\n\n// ----------------------------------------------------------------------------\n\nvar vtkRenderWindow = {\n  newInstance,\n  extend,\n  pushMonitorGLContextCount,\n  popMonitorGLContextCount\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkRenderWindow', newInstance);\nexport { vtkRenderWindow as default, extend, newInstance, popMonitorGLContextCount, pushMonitorGLContextCount };","map":{"version":3,"names":["VtkDataTypes","m","macro","registerViewConstructor","vtkForwardPass","vtkHardwareSelector","vtkShaderCache","vtkTextureUnitManager","vtkViewNodeFactory","registerOverride","vtkRenderPass","vtkRenderWindowViewNode","createContextProxyHandler","vtkDebugMacro","vtkErrorMacro","SCREENSHOT_PLACEHOLDER","position","top","left","width","height","parentMethodsToProxy","checkRenderTargetSupport","gl","format","type","framebuffer","createFramebuffer","texture","createTexture","bindTexture","TEXTURE_2D","texImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","GL_CONTEXT_COUNT","GL_CONTEXT_LISTENERS","createGLContext","forEach","cb","deleteGLContext","pushMonitorGLContextCount","push","popMonitorGLContextCount","pop","_preventDefault","e","preventDefault","vtkOpenGLRenderWindow","publicAPI","model","classHierarchy","cachingContextHandler","getCachingContextHandler","getViewNodeFactory","myFactory","canvas","addEventListener","restoreContext","previousSize","updateWindow","renderable","size","setAttribute","viewStream","setSize","style","display","useOffScreen","el","cursor","cursorVisibility","containerSize","onModified","buildPass","prepass","prepareNodes","addMissingNodes","getRenderersByReference","getChildRenderWindowsByReference","removeUnusedNodes","initialize","children","child","setOpenGLRenderWindow","initialized","rootOpenGLRenderWindow","getLastAncestorOfType","context2D","get2DContext","context","get3DContext","resizeFromChildRenderWindows","textureUnitManager","newInstance","setContext","shaderCache","blendFuncSeparate","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE","depthFunc","LEQUAL","enable","BLEND","makeCurrent","setContainer","parentNode","removeChild","contains","bgImage","appendChild","useBackgroundImage","modified","getContainer","getContainerSize","getBoundingClientRect","getFramebufferSize","fbSize","activeFramebuffer","getSize","getPixelData","x1","y1","x2","y2","pixels","Uint8Array","readPixels","RGBA","UNSIGNED_BYTE","options","arguments","length","undefined","preserveDrawingBuffer","depth","alpha","powerPreference","result","webgl2Supported","WebGL2RenderingContext","webgl2","defaultToWebgl2","getContext","Proxy","rp","setCurrentOperation","traverse","activateTexture","_textureResourceIds","get","activeTexture","TEXTURE0","activeUnit","getTextureUnitManager","allocate","set","deactivateTexture","free","delete","getTextureUnitForTexture","getDefaultTextureByteSize","vtkType","oglNorm16Ext","useHalfFloat","CHAR","SIGNED_CHAR","UNSIGNED_CHAR","UNSIGNED_SHORT","SHORT","VOID","getDefaultTextureInternalFormat","vtktype","numComps","R8","RG8","RGB8","RGBA8","R16_EXT","RG16_EXT","RGB16_EXT","RGBA16_EXT","R16_SNORM_EXT","RG16_SNORM_EXT","RGB16_SNORM_EXT","RGBA16_SNORM_EXT","FLOAT","R16F","R32F","RG16F","RG32F","RGB16F","RGB32F","RGBA16F","RGBA32F","LUMINANCE","LUMINANCE_ALPHA","RGB","setBackgroundImage","img","src","setUseBackgroundImage","value","getCanvasDataURL","imageFormat","temporaryCanvas","document","createElement","temporaryContext","drawImage","mainBoundingClientRect","renderWindow","renderers","getRenderers","renderer","viewProps","getViewProps","viewProp","container","canvasList","getElementsByTagName","i","currentCanvas","boundingClientRect","newXPosition","x","newYPosition","y","screenshot","toDataURL","remove","invokeImageReady","captureNextImage","resetCamera","scale","deleted","previous","notifyStartCaptureImage","_screenshot","map","val","Promise","resolve","reject","subscription","onImageReady","imageURL","unsubscribe","placeHolder","originalSize","cameras","_ref","restoreParamsFn","arg","traverseAllPasses","tmpImg","isUserResetCamera","camera","getActiveCamera","params","resetCameraArgs","resetCameraFn","JSON","parse","stringify","_ref2","hardwareMaximumLineWidth","getHardwareMaximumLineWidth","lineWidthRange","getParameter","ALIASED_LINE_WIDTH_RANGE","getGLInformations","_glInformation","glTextureFloat","getExtension","glTextureHalfFloat","glDebugRendererInfo","glDrawBuffers","glAnisotropic","MAX_VERTEX_ATTRIBS","MAX_VARYING_VECTORS","MAX_VERTEX_UNIFORM_VECTORS","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_TEXTURE_IMAGE_UNITS","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","MAX_TEXTURE_MAX_ANISOTROPY_EXT","ALIASED_POINT_SIZE_RANGE","join","MAX_VIEWPORT_DIMS","MAX_RENDERBUFFER_SIZE","RED_BITS","GREEN_BITS","BLUE_BITS","ALPHA_BITS","DEPTH_BITS","STENCIL_BITS","SUBPIXEL_BITS","SAMPLES","SAMPLE_BUFFERS","ALPHA","HALF_FLOAT_OES","MAX_DRAW_BUFFERS_WEBGL","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","precision","rangeMin","rangeMax","MEDIUM_FLOAT","LOW_FLOAT","FRAGMENT_SHADER","HIGH_INT","MEDIUM_INT","LOW_INT","getSupportedExtensions","RENDERER","VENDOR","VERSION","SHADING_LANGUAGE_VERSION","UNMASKED_RENDERER_WEBGL","UNMASKED_VENDOR_WEBGL","label","key","renderPasses","index","copyParentContent","childrenRW","getViewNodeFor","rootParent","some","oglRenderer","getSelector","parentCanvas","getCanvas","selfCanvas","maxSize","childSize","disableCullFace","cullFaceEnabled","disable","CULL_FACE","enableCullFace","setViewStream","stream","mainRenderer","getBackgroundByReference","image","invalidateCache","render","createSelector","ret","clearEvents","removeEventListener","chain","setActiveFramebuffer","newActiveFramebuffer","superSetSize","invokeWindowResizeEvent","registerGraphicsResourceUser","coreObject","newUser","_graphicsResources","has","setGraphicsResourceForObject","sharedResource","users","add","unregisterGraphicsResourceUser","oldUser","oglObject","releaseGraphicsResources","getGraphicsResourceForObject","hash","Set","getGraphicsMemoryInfo","memUsed","_ref3","getAllocatedGPUMemoryInBytes","_ref4","clear","freeAll","ren","glRen","publicAPIBeforeProxy","methodName","DEFAULT_VALUES","textureResourceIds","extend","initialValues","Object","assign","selector","Image","zIndex","Map","setGet","setGetArray","event","vtkRenderWindow","default"],"sources":["C:/Users/Malcolm/my-vtkjs-app/node_modules/@kitware/vtk.js/Rendering/OpenGL/RenderWindow.js"],"sourcesContent":["import { VtkDataTypes } from '../../Common/Core/DataArray/Constants.js';\nimport { m as macro } from '../../macros2.js';\nimport { registerViewConstructor } from '../Core/RenderWindow.js';\nimport vtkForwardPass from './ForwardPass.js';\nimport vtkHardwareSelector from './HardwareSelector.js';\nimport vtkShaderCache from './ShaderCache.js';\nimport vtkTextureUnitManager from './TextureUnitManager.js';\nimport vtkViewNodeFactory, { registerOverride } from './ViewNodeFactory.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkRenderWindowViewNode from '../SceneGraph/RenderWindowViewNode.js';\nimport { createContextProxyHandler } from './RenderWindow/ContextProxy.js';\n\nconst {\n  vtkDebugMacro,\n  vtkErrorMacro\n} = macro;\nconst SCREENSHOT_PLACEHOLDER = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%'\n};\nconst parentMethodsToProxy = ['activateTexture', 'deactivateTexture', 'disableCullFace', 'enableCullFace', 'get3DContext', 'getActiveFramebuffer', 'getContext', 'getDefaultTextureByteSize', 'getDefaultTextureInternalFormat', 'getDefaultToWebgl2', 'getGLInformations', 'getGraphicsMemoryInfo', 'getGraphicsResourceForObject', 'getHardwareMaximumLineWidth', 'getPixelData', 'getShaderCache', 'getTextureUnitForTexture', 'getTextureUnitManager', 'getWebgl2', 'makeCurrent', 'releaseGraphicsResources', 'registerGraphicsResourceUser', 'unregisterGraphicsResourceUser', 'restoreContext', 'setActiveFramebuffer', 'setContext', 'setDefaultToWebgl2', 'setGraphicsResourceForObject'];\nfunction checkRenderTargetSupport(gl, format, type) {\n  // create temporary frame buffer and texture\n  const framebuffer = gl.createFramebuffer();\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, 2, 2, 0, format, type, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  // check frame buffer status\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n  // clean up\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  return status === gl.FRAMEBUFFER_COMPLETE;\n}\n\n// ----------------------------------------------------------------------------\n// Monitor the usage of GL context across vtkOpenGLRenderWindow instances\n// ----------------------------------------------------------------------------\n\nlet GL_CONTEXT_COUNT = 0;\nconst GL_CONTEXT_LISTENERS = [];\nfunction createGLContext() {\n  GL_CONTEXT_COUNT++;\n  GL_CONTEXT_LISTENERS.forEach(cb => cb(GL_CONTEXT_COUNT));\n}\nfunction deleteGLContext() {\n  GL_CONTEXT_COUNT--;\n  GL_CONTEXT_LISTENERS.forEach(cb => cb(GL_CONTEXT_COUNT));\n}\nfunction pushMonitorGLContextCount(cb) {\n  GL_CONTEXT_LISTENERS.push(cb);\n}\nfunction popMonitorGLContextCount(cb) {\n  return GL_CONTEXT_LISTENERS.pop();\n}\nfunction _preventDefault(e) {\n  e.preventDefault();\n}\n\n// ----------------------------------------------------------------------------\n// vtkOpenGLRenderWindow methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLRenderWindow(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLRenderWindow');\n\n  // Only create a cachingContextHandler if needed\n  let cachingContextHandler;\n  function getCachingContextHandler() {\n    if (!cachingContextHandler) {\n      cachingContextHandler = createContextProxyHandler();\n    }\n    return cachingContextHandler;\n  }\n  publicAPI.getViewNodeFactory = () => model.myFactory;\n\n  // prevent default context lost handler\n  model.canvas.addEventListener('webglcontextlost', _preventDefault, false);\n  model.canvas.addEventListener('webglcontextrestored', publicAPI.restoreContext, false);\n\n  // Auto update style\n  const previousSize = [0, 0];\n  function updateWindow() {\n    // Canvas size\n    if (model.renderable) {\n      if (model.size[0] !== previousSize[0] || model.size[1] !== previousSize[1]) {\n        previousSize[0] = model.size[0];\n        previousSize[1] = model.size[1];\n        model.canvas.setAttribute('width', model.size[0]);\n        model.canvas.setAttribute('height', model.size[1]);\n      }\n    }\n\n    // ImageStream size\n    if (model.viewStream) {\n      // If same size that's a NoOp\n      model.viewStream.setSize(model.size[0], model.size[1]);\n    }\n\n    // Offscreen ?\n    model.canvas.style.display = model.useOffScreen ? 'none' : 'block';\n\n    // Cursor type\n    if (model.el) {\n      model.el.style.cursor = model.cursorVisibility ? model.cursor : 'none';\n    }\n\n    // Invalidate cached DOM container size\n    model.containerSize = null;\n  }\n  publicAPI.onModified(updateWindow);\n\n  // Builds myself.\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNodes(model.renderable.getRenderersByReference());\n      publicAPI.addMissingNodes(model.renderable.getChildRenderWindowsByReference());\n      publicAPI.removeUnusedNodes();\n      publicAPI.initialize();\n      model.children.forEach(child => {\n        // Children can be openGl renderer or openGl render windows\n        // Only openGl renderers have a method setOpenGLRenderWindow\n        child.setOpenGLRenderWindow?.(publicAPI);\n      });\n    }\n  };\n  publicAPI.initialize = () => {\n    if (!model.initialized) {\n      // Set root parent if there is one\n      // Some methods of the root parent are proxied (see parentMethodsToProxy)\n      model.rootOpenGLRenderWindow = publicAPI.getLastAncestorOfType('vtkOpenGLRenderWindow');\n      if (model.rootOpenGLRenderWindow) {\n        // Initialize a 2D context that will copy the content of the root parent\n        model.context2D = publicAPI.get2DContext();\n      } else {\n        // Initialize a 3D context that may be used by child render windows\n        model.context = publicAPI.get3DContext();\n        publicAPI.resizeFromChildRenderWindows();\n        if (model.context) {\n          createGLContext();\n        }\n        model.textureUnitManager = vtkTextureUnitManager.newInstance();\n        model.textureUnitManager.setContext(model.context);\n        model.shaderCache.setContext(model.context);\n        // initialize blending for transparency\n        const gl = model.context;\n        gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.depthFunc(gl.LEQUAL);\n        gl.enable(gl.BLEND);\n      }\n      model.initialized = true;\n    }\n  };\n  publicAPI.makeCurrent = () => {\n    model.context.makeCurrent();\n  };\n  publicAPI.setContainer = el => {\n    if (model.el && model.el !== el) {\n      if (model.canvas.parentNode !== model.el) {\n        vtkErrorMacro('Error: canvas parent node does not match container');\n      }\n\n      // Remove canvas from previous container\n      model.el.removeChild(model.canvas);\n\n      // If the renderer has previously added\n      // a background image, remove it from the DOM.\n      if (model.el.contains(model.bgImage)) {\n        model.el.removeChild(model.bgImage);\n      }\n    }\n    if (model.el !== el) {\n      model.el = el;\n      if (model.el) {\n        model.el.appendChild(model.canvas);\n\n        // If the renderer is set to use a background\n        // image, attach it to the DOM.\n        if (model.useBackgroundImage) {\n          model.el.appendChild(model.bgImage);\n        }\n      }\n\n      // Trigger modified()\n      publicAPI.modified();\n    }\n  };\n  publicAPI.getContainer = () => model.el;\n  publicAPI.getContainerSize = () => {\n    if (!model.containerSize && model.el) {\n      const {\n        width,\n        height\n      } = model.el.getBoundingClientRect();\n      model.containerSize = [width, height];\n    }\n    return model.containerSize || model.size;\n  };\n  publicAPI.getFramebufferSize = () => {\n    const fbSize = model.activeFramebuffer?.getSize();\n    return fbSize || model.size;\n  };\n  publicAPI.getPixelData = (x1, y1, x2, y2) => {\n    const pixels = new Uint8Array((x2 - x1 + 1) * (y2 - y1 + 1) * 4);\n    model.context.readPixels(x1, y1, x2 - x1 + 1, y2 - y1 + 1, model.context.RGBA, model.context.UNSIGNED_BYTE, pixels);\n    return pixels;\n  };\n  publicAPI.get3DContext = function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      preserveDrawingBuffer: false,\n      depth: true,\n      alpha: true,\n      powerPreference: 'high-performance'\n    };\n    let result = null;\n    const webgl2Supported = typeof WebGL2RenderingContext !== 'undefined';\n    model.webgl2 = false;\n    if (model.defaultToWebgl2 && webgl2Supported) {\n      result = model.canvas.getContext('webgl2', options);\n      if (result) {\n        model.webgl2 = true;\n        vtkDebugMacro('using webgl2');\n      }\n    }\n    if (!result) {\n      vtkDebugMacro('using webgl1');\n      result = model.canvas.getContext('webgl', options) || model.canvas.getContext('experimental-webgl', options);\n    }\n    return new Proxy(result, getCachingContextHandler());\n  };\n  publicAPI.get2DContext = function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return model.canvas.getContext('2d', options);\n  };\n  publicAPI.restoreContext = () => {\n    const rp = vtkRenderPass.newInstance();\n    rp.setCurrentOperation('Release');\n    rp.traverse(publicAPI, null);\n  };\n  publicAPI.activateTexture = texture => {\n    // Only add if it isn't already there\n    const result = model._textureResourceIds.get(texture);\n    if (result !== undefined) {\n      model.context.activeTexture(model.context.TEXTURE0 + result);\n      return;\n    }\n    const activeUnit = publicAPI.getTextureUnitManager().allocate();\n    if (activeUnit < 0) {\n      vtkErrorMacro('Hardware does not support the number of textures defined.');\n      return;\n    }\n    model._textureResourceIds.set(texture, activeUnit);\n    model.context.activeTexture(model.context.TEXTURE0 + activeUnit);\n  };\n  publicAPI.deactivateTexture = texture => {\n    // Only deactivate if it isn't already there\n    const result = model._textureResourceIds.get(texture);\n    if (result !== undefined) {\n      publicAPI.getTextureUnitManager().free(result);\n      model._textureResourceIds.delete(texture);\n    }\n  };\n  publicAPI.getTextureUnitForTexture = texture => {\n    const result = model._textureResourceIds.get(texture);\n    if (result !== undefined) {\n      return result;\n    }\n    return -1;\n  };\n  publicAPI.getDefaultTextureByteSize = function (vtkType) {\n    let oglNorm16Ext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let useHalfFloat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (model.webgl2) {\n      switch (vtkType) {\n        case VtkDataTypes.CHAR:\n        case VtkDataTypes.SIGNED_CHAR:\n        case VtkDataTypes.UNSIGNED_CHAR:\n          return 1;\n        case oglNorm16Ext:\n        case useHalfFloat:\n        case VtkDataTypes.UNSIGNED_SHORT:\n        case VtkDataTypes.SHORT:\n        case VtkDataTypes.VOID:\n          // Used for unsigned int depth\n          return 2;\n        default:\n          // For all other cases, assume float\n          return 4;\n      }\n    }\n\n    // webgl1 type support is limited to 1 byte\n    return 1;\n  };\n  publicAPI.getDefaultTextureInternalFormat = function (vtktype, numComps) {\n    let oglNorm16Ext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let useHalfFloat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    if (model.webgl2) {\n      switch (vtktype) {\n        case VtkDataTypes.UNSIGNED_CHAR:\n          switch (numComps) {\n            case 1:\n              return model.context.R8;\n            case 2:\n              return model.context.RG8;\n            case 3:\n              return model.context.RGB8;\n            case 4:\n            default:\n              return model.context.RGBA8;\n          }\n        case oglNorm16Ext && !useHalfFloat && VtkDataTypes.UNSIGNED_SHORT:\n          switch (numComps) {\n            case 1:\n              return oglNorm16Ext.R16_EXT;\n            case 2:\n              return oglNorm16Ext.RG16_EXT;\n            case 3:\n              return oglNorm16Ext.RGB16_EXT;\n            case 4:\n            default:\n              return oglNorm16Ext.RGBA16_EXT;\n          }\n        // prioritize norm16 over float\n        case oglNorm16Ext && !useHalfFloat && VtkDataTypes.SHORT:\n          switch (numComps) {\n            case 1:\n              return oglNorm16Ext.R16_SNORM_EXT;\n            case 2:\n              return oglNorm16Ext.RG16_SNORM_EXT;\n            case 3:\n              return oglNorm16Ext.RGB16_SNORM_EXT;\n            case 4:\n            default:\n              return oglNorm16Ext.RGBA16_SNORM_EXT;\n          }\n        case VtkDataTypes.UNSIGNED_SHORT:\n        case VtkDataTypes.SHORT:\n        case VtkDataTypes.FLOAT:\n        default:\n          // useHalfFloat tells us if the texture can be accurately\n          // rendered with 16 bits or not.\n          switch (numComps) {\n            case 1:\n              return useHalfFloat ? model.context.R16F : model.context.R32F;\n            case 2:\n              return useHalfFloat ? model.context.RG16F : model.context.RG32F;\n            case 3:\n              return useHalfFloat ? model.context.RGB16F : model.context.RGB32F;\n            case 4:\n            default:\n              return useHalfFloat ? model.context.RGBA16F : model.context.RGBA32F;\n          }\n      }\n    }\n\n    // webgl1 only supports four types\n    switch (numComps) {\n      case 1:\n        return model.context.LUMINANCE;\n      case 2:\n        return model.context.LUMINANCE_ALPHA;\n      case 3:\n        return model.context.RGB;\n      case 4:\n      default:\n        return model.context.RGBA;\n    }\n  };\n  publicAPI.setBackgroundImage = img => {\n    model.bgImage.src = img.src;\n  };\n  publicAPI.setUseBackgroundImage = value => {\n    model.useBackgroundImage = value;\n\n    // Add or remove the background image from the\n    // DOM as specified.\n    if (model.useBackgroundImage && !model.el.contains(model.bgImage)) {\n      model.el.appendChild(model.bgImage);\n    } else if (!model.useBackgroundImage && model.el.contains(model.bgImage)) {\n      model.el.removeChild(model.bgImage);\n    }\n  };\n  function getCanvasDataURL() {\n    let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : model.imageFormat;\n    // Copy current canvas to not modify the original\n    const temporaryCanvas = document.createElement('canvas');\n    const temporaryContext = temporaryCanvas.getContext('2d');\n    temporaryCanvas.width = model.canvas.width;\n    temporaryCanvas.height = model.canvas.height;\n    temporaryContext.drawImage(model.canvas, 0, 0);\n\n    // Get current client rect to place canvas\n    const mainBoundingClientRect = model.canvas.getBoundingClientRect();\n    const renderWindow = model.renderable;\n    const renderers = renderWindow.getRenderers();\n    renderers.forEach(renderer => {\n      const viewProps = renderer.getViewProps();\n      viewProps.forEach(viewProp => {\n        // Check if the prop has a container that should have canvas\n        if (viewProp.getContainer) {\n          const container = viewProp.getContainer();\n          const canvasList = container.getElementsByTagName('canvas');\n          // Go throughout all canvas and copy it into temporary main canvas\n          for (let i = 0; i < canvasList.length; i++) {\n            const currentCanvas = canvasList[i];\n            const boundingClientRect = currentCanvas.getBoundingClientRect();\n            const newXPosition = boundingClientRect.x - mainBoundingClientRect.x;\n            const newYPosition = boundingClientRect.y - mainBoundingClientRect.y;\n            temporaryContext.drawImage(currentCanvas, newXPosition, newYPosition);\n          }\n        }\n      });\n    });\n    const screenshot = temporaryCanvas.toDataURL(format);\n    temporaryCanvas.remove();\n    publicAPI.invokeImageReady(screenshot);\n  }\n  publicAPI.captureNextImage = function () {\n    let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'image/png';\n    let {\n      resetCamera = false,\n      size = null,\n      scale = 1\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (model.deleted) {\n      return null;\n    }\n    model.imageFormat = format;\n    const previous = model.notifyStartCaptureImage;\n    model.notifyStartCaptureImage = true;\n    model._screenshot = {\n      size: !!size || scale !== 1 ? size || model.size.map(val => val * scale) : null\n    };\n    return new Promise((resolve, reject) => {\n      const subscription = publicAPI.onImageReady(imageURL => {\n        if (model._screenshot.size === null) {\n          model.notifyStartCaptureImage = previous;\n          subscription.unsubscribe();\n          if (model._screenshot.placeHolder) {\n            // resize the main canvas back to its original size and show it\n            model.size = model._screenshot.originalSize;\n\n            // process the resize\n            publicAPI.modified();\n\n            // restore the saved camera parameters, if applicable\n            if (model._screenshot.cameras) {\n              model._screenshot.cameras.forEach(_ref => {\n                let {\n                  restoreParamsFn,\n                  arg\n                } = _ref;\n                return restoreParamsFn(arg);\n              });\n            }\n\n            // Trigger a render at the original size\n            publicAPI.traverseAllPasses();\n\n            // Remove and clean up the placeholder, revealing the original\n            model.el.removeChild(model._screenshot.placeHolder);\n            model._screenshot.placeHolder.remove();\n            model._screenshot = null;\n          }\n          resolve(imageURL);\n        } else {\n          // Create a placeholder image overlay while we resize and render\n          const tmpImg = document.createElement('img');\n          tmpImg.style = SCREENSHOT_PLACEHOLDER;\n          tmpImg.src = imageURL;\n          model._screenshot.placeHolder = model.el.appendChild(tmpImg);\n\n          // hide the main canvas\n          model.canvas.style.display = 'none';\n\n          // remember the main canvas original size, then resize it\n          model._screenshot.originalSize = model.size;\n          model.size = model._screenshot.size;\n          model.rootOpenGLRenderWindow?.resizeFromChildRenderWindows();\n          model._screenshot.size = null;\n\n          // process the resize\n          publicAPI.modified();\n          if (resetCamera) {\n            const isUserResetCamera = resetCamera !== true;\n\n            // If resetCamera was requested, we first save camera parameters\n            // from all the renderers, so we can restore them later\n            model._screenshot.cameras = model.renderable.getRenderers().map(renderer => {\n              const camera = renderer.getActiveCamera();\n              const params = camera.get('focalPoint', 'position', 'parallelScale');\n              return {\n                resetCameraArgs: isUserResetCamera ? {\n                  renderer\n                } : undefined,\n                resetCameraFn: isUserResetCamera ? resetCamera : renderer.resetCamera,\n                restoreParamsFn: camera.set,\n                // \"clone\" the params so we don't keep refs to properties\n                arg: JSON.parse(JSON.stringify(params))\n              };\n            });\n\n            // Perform the resetCamera() on each renderer only after capturing\n            // the params from all active cameras, in case there happen to be\n            // linked cameras among the renderers.\n            model._screenshot.cameras.forEach(_ref2 => {\n              let {\n                resetCameraFn,\n                resetCameraArgs\n              } = _ref2;\n              return resetCameraFn(resetCameraArgs);\n            });\n          }\n\n          // Trigger a render at the custom size\n          publicAPI.traverseAllPasses();\n        }\n      });\n    });\n  };\n  let hardwareMaximumLineWidth;\n  publicAPI.getHardwareMaximumLineWidth = () => {\n    // We cache the result of this function because `getParameter` is slow\n    if (hardwareMaximumLineWidth != null) {\n      return hardwareMaximumLineWidth;\n    }\n    const gl = publicAPI.get3DContext();\n    const lineWidthRange = gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE);\n    hardwareMaximumLineWidth = lineWidthRange[1];\n    return lineWidthRange[1];\n  };\n  publicAPI.getGLInformations = () => {\n    if (model._glInformation) {\n      return model._glInformation;\n    }\n    const gl = publicAPI.get3DContext();\n    const glTextureFloat = gl.getExtension('OES_texture_float');\n    const glTextureHalfFloat = gl.getExtension('OES_texture_half_float');\n    const glDebugRendererInfo = gl.getExtension('WEBGL_debug_renderer_info');\n    const glDrawBuffers = gl.getExtension('WEBGL_draw_buffers');\n    const glAnisotropic = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n    const params = [['Max Vertex Attributes', 'MAX_VERTEX_ATTRIBS', gl.getParameter(gl.MAX_VERTEX_ATTRIBS)], ['Max Varying Vectors', 'MAX_VARYING_VECTORS', gl.getParameter(gl.MAX_VARYING_VECTORS)], ['Max Vertex Uniform Vectors', 'MAX_VERTEX_UNIFORM_VECTORS', gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS)], ['Max Fragment Uniform Vectors', 'MAX_FRAGMENT_UNIFORM_VECTORS', gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS)], ['Max Fragment Texture Image Units', 'MAX_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS)], ['Max Vertex Texture Image Units', 'MAX_VERTEX_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS)], ['Max Combined Texture Image Units', 'MAX_COMBINED_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS)], ['Max 2D Texture Size', 'MAX_TEXTURE_SIZE', gl.getParameter(gl.MAX_TEXTURE_SIZE)], ['Max Cube Texture Size', 'MAX_CUBE_MAP_TEXTURE_SIZE', gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)], ['Max Texture Anisotropy', 'MAX_TEXTURE_MAX_ANISOTROPY_EXT', glAnisotropic && gl.getParameter(glAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT)], ['Point Size Range', 'ALIASED_POINT_SIZE_RANGE', gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE).join(' - ')], ['Line Width Range', 'ALIASED_LINE_WIDTH_RANGE', gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE).join(' - ')], ['Max Viewport Dimensions', 'MAX_VIEWPORT_DIMS', gl.getParameter(gl.MAX_VIEWPORT_DIMS).join(' - ')], ['Max Renderbuffer Size', 'MAX_RENDERBUFFER_SIZE', gl.getParameter(gl.MAX_RENDERBUFFER_SIZE)], ['Framebuffer Red Bits', 'RED_BITS', gl.getParameter(gl.RED_BITS)], ['Framebuffer Green Bits', 'GREEN_BITS', gl.getParameter(gl.GREEN_BITS)], ['Framebuffer Blue Bits', 'BLUE_BITS', gl.getParameter(gl.BLUE_BITS)], ['Framebuffer Alpha Bits', 'ALPHA_BITS', gl.getParameter(gl.ALPHA_BITS)], ['Framebuffer Depth Bits', 'DEPTH_BITS', gl.getParameter(gl.DEPTH_BITS)], ['Framebuffer Stencil Bits', 'STENCIL_BITS', gl.getParameter(gl.STENCIL_BITS)], ['Framebuffer Subpixel Bits', 'SUBPIXEL_BITS', gl.getParameter(gl.SUBPIXEL_BITS)], ['MSAA Samples', 'SAMPLES', gl.getParameter(gl.SAMPLES)], ['MSAA Sample Buffers', 'SAMPLE_BUFFERS', gl.getParameter(gl.SAMPLE_BUFFERS)], ['Supported Formats for UByte Render Targets     ', 'UNSIGNED_BYTE RENDER TARGET FORMATS', [glTextureFloat && checkRenderTargetSupport(gl, gl.RGBA, gl.UNSIGNED_BYTE) ? 'RGBA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.RGB, gl.UNSIGNED_BYTE) ? 'RGB' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, gl.UNSIGNED_BYTE) ? 'LUMINANCE' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.ALPHA, gl.UNSIGNED_BYTE) ? 'ALPHA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, gl.UNSIGNED_BYTE) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Supported Formats for Half Float Render Targets', 'HALF FLOAT RENDER TARGET FORMATS', [glTextureHalfFloat && checkRenderTargetSupport(gl, gl.RGBA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'RGBA' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.RGB, glTextureHalfFloat.HALF_FLOAT_OES) ? 'RGB' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, glTextureHalfFloat.HALF_FLOAT_OES) ? 'LUMINANCE' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.ALPHA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'ALPHA' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Supported Formats for Full Float Render Targets', 'FLOAT RENDER TARGET FORMATS', [glTextureFloat && checkRenderTargetSupport(gl, gl.RGBA, gl.FLOAT) ? 'RGBA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.RGB, gl.FLOAT) ? 'RGB' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, gl.FLOAT) ? 'LUMINANCE' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.ALPHA, gl.FLOAT) ? 'ALPHA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, gl.FLOAT) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Max Multiple Render Targets Buffers', 'MAX_DRAW_BUFFERS_WEBGL', glDrawBuffers ? gl.getParameter(glDrawBuffers.MAX_DRAW_BUFFERS_WEBGL) : 0], ['High Float Precision in Vertex Shader', 'HIGH_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).rangeMax, '</sup>)'].join('')], ['Medium Float Precision in Vertex Shader', 'MEDIUM_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).rangeMax, '</sup>)'].join('')], ['Low Float Precision in Vertex Shader', 'LOW_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).rangeMax, '</sup>)'].join('')], ['High Float Precision in Fragment Shader', 'HIGH_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).rangeMax, '</sup>)'].join('')], ['Medium Float Precision in Fragment Shader', 'MEDIUM_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).rangeMax, '</sup>)'].join('')], ['Low Float Precision in Fragment Shader', 'LOW_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).rangeMax, '</sup>)'].join('')], ['High Int Precision in Vertex Shader', 'HIGH_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).rangeMax, '</sup>)'].join('')], ['Medium Int Precision in Vertex Shader', 'MEDIUM_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).rangeMax, '</sup>)'].join('')], ['Low Int Precision in Vertex Shader', 'LOW_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).rangeMax, '</sup>)'].join('')], ['High Int Precision in Fragment Shader', 'HIGH_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).rangeMax, '</sup>)'].join('')], ['Medium Int Precision in Fragment Shader', 'MEDIUM_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).rangeMax, '</sup>)'].join('')], ['Low Int Precision in Fragment Shader', 'LOW_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).rangeMax, '</sup>)'].join('')], ['Supported Extensions', 'EXTENSIONS', gl.getSupportedExtensions().join('<br/>\\t\\t\\t\\t\\t    ')], ['WebGL Renderer', 'RENDERER', gl.getParameter(gl.RENDERER)], ['WebGL Vendor', 'VENDOR', gl.getParameter(gl.VENDOR)], ['WebGL Version', 'VERSION', gl.getParameter(gl.VERSION)], ['Shading Language Version', 'SHADING_LANGUAGE_VERSION', gl.getParameter(gl.SHADING_LANGUAGE_VERSION)], ['Unmasked Renderer', 'UNMASKED_RENDERER', glDebugRendererInfo && gl.getParameter(glDebugRendererInfo.UNMASKED_RENDERER_WEBGL)], ['Unmasked Vendor', 'UNMASKED_VENDOR', glDebugRendererInfo && gl.getParameter(glDebugRendererInfo.UNMASKED_VENDOR_WEBGL)], ['WebGL Version', 'WEBGL_VERSION', model.webgl2 ? 2 : 1]];\n    const result = {};\n    while (params.length) {\n      const [label, key, value] = params.pop();\n      if (key) {\n        result[key] = {\n          label,\n          value\n        };\n      }\n    }\n    model._glInformation = result;\n    return result;\n  };\n  publicAPI.traverseAllPasses = () => {\n    if (model.renderPasses) {\n      for (let index = 0; index < model.renderPasses.length; ++index) {\n        model.renderPasses[index].traverse(publicAPI, null);\n      }\n    }\n    publicAPI.copyParentContent();\n    if (model.notifyStartCaptureImage) {\n      getCanvasDataURL();\n    }\n    const childrenRW = model.renderable.getChildRenderWindowsByReference();\n    for (let i = 0; i < childrenRW.length; ++i) {\n      publicAPI.getViewNodeFor(childrenRW[i])?.traverseAllPasses();\n    }\n  };\n  publicAPI.copyParentContent = () => {\n    const rootParent = model.rootOpenGLRenderWindow;\n    if (!rootParent || !model.context2D || model.children.some(oglRenderer => !!oglRenderer.getSelector?.())) {\n      return;\n    }\n    const parentCanvas = rootParent.getCanvas();\n    const selfCanvas = model.canvas;\n    model.context2D.drawImage(parentCanvas, 0, parentCanvas.height - selfCanvas.height,\n    // source y axis is inverted\n    selfCanvas.width, selfCanvas.height, 0, 0, selfCanvas.width, selfCanvas.height);\n  };\n  publicAPI.resizeFromChildRenderWindows = () => {\n    // Adapt the size of the parent render window to the child render windows\n    const childrenRW = model.renderable.getChildRenderWindowsByReference();\n    if (childrenRW.length > 0) {\n      const maxSize = [0, 0];\n      for (let i = 0; i < childrenRW.length; ++i) {\n        const childSize = publicAPI.getViewNodeFor(childrenRW[i])?.getSize();\n        if (childSize) {\n          maxSize[0] = childSize[0] > maxSize[0] ? childSize[0] : maxSize[0];\n          maxSize[1] = childSize[1] > maxSize[1] ? childSize[1] : maxSize[1];\n        }\n      }\n      publicAPI.setSize(...maxSize);\n    }\n  };\n  publicAPI.disableCullFace = () => {\n    if (model.cullFaceEnabled) {\n      model.context.disable(model.context.CULL_FACE);\n      model.cullFaceEnabled = false;\n    }\n  };\n  publicAPI.enableCullFace = () => {\n    if (!model.cullFaceEnabled) {\n      model.context.enable(model.context.CULL_FACE);\n      model.cullFaceEnabled = true;\n    }\n  };\n  publicAPI.setViewStream = stream => {\n    if (model.viewStream === stream) {\n      return false;\n    }\n    if (model.subscription) {\n      model.subscription.unsubscribe();\n      model.subscription = null;\n    }\n    model.viewStream = stream;\n    if (model.viewStream) {\n      // Force background to be transparent + render\n      const mainRenderer = model.renderable.getRenderers()[0];\n      mainRenderer.getBackgroundByReference()[3] = 0;\n\n      // Enable display of the background image\n      publicAPI.setUseBackgroundImage(true);\n\n      // Bind to remote stream\n      model.subscription = model.viewStream.onImageReady(e => publicAPI.setBackgroundImage(e.image));\n      model.viewStream.setSize(model.size[0], model.size[1]);\n      model.viewStream.invalidateCache();\n      model.viewStream.render();\n      publicAPI.modified();\n    }\n    return true;\n  };\n  publicAPI.createSelector = () => {\n    const ret = vtkHardwareSelector.newInstance();\n    ret.setOpenGLRenderWindow(publicAPI);\n    return ret;\n  };\n  function clearEvents() {\n    model.canvas.removeEventListener('webglcontextlost', _preventDefault);\n    model.canvas.removeEventListener('webglcontextrestored', publicAPI.restoreContext);\n  }\n  publicAPI.delete = macro.chain(() => {\n    if (model.context) {\n      deleteGLContext();\n    }\n    publicAPI.setContainer();\n    publicAPI.setViewStream();\n  }, clearEvents, publicAPI.delete);\n\n  // Do not trigger modified for performance reasons\n  publicAPI.setActiveFramebuffer = newActiveFramebuffer => {\n    model.activeFramebuffer = newActiveFramebuffer;\n  };\n  const superSetSize = publicAPI.setSize;\n  publicAPI.setSize = (width, height) => {\n    const modified = superSetSize(width, height);\n    if (modified) {\n      publicAPI.invokeWindowResizeEvent({\n        width,\n        height\n      });\n    }\n    return modified;\n  };\n  publicAPI.registerGraphicsResourceUser = (coreObject, newUser) => {\n    // Try to create the graphics resource if it doesn't exist\n    if (!model._graphicsResources.has(coreObject)) {\n      publicAPI.setGraphicsResourceForObject(coreObject, null, null);\n    }\n    // Add newUser to the set of users\n    const sharedResource = model._graphicsResources.get(coreObject);\n    sharedResource?.users.add(newUser);\n  };\n  publicAPI.unregisterGraphicsResourceUser = (coreObject, oldUser) => {\n    const sharedResource = model._graphicsResources.get(coreObject);\n    if (!sharedResource) {\n      return;\n    }\n    sharedResource.users.delete(oldUser);\n    // Release graphics resources when the number of users reaches 0\n    if (!sharedResource.users.size) {\n      sharedResource.oglObject?.releaseGraphicsResources(publicAPI);\n      model._graphicsResources.delete(coreObject);\n    }\n  };\n  publicAPI.getGraphicsResourceForObject = coreObject => model._graphicsResources.get(coreObject);\n  publicAPI.setGraphicsResourceForObject = (coreObject, oglObject, hash) => {\n    if (!coreObject) {\n      return;\n    }\n    const sharedResource = model._graphicsResources.get(coreObject);\n    // Release the old resource\n    sharedResource?.oglObject?.releaseGraphicsResources(publicAPI);\n    // Keep the same users that have registered for this coreObject\n    model._graphicsResources.set(coreObject, {\n      coreObject,\n      oglObject,\n      hash,\n      users: sharedResource?.users ?? new Set()\n    });\n  };\n  publicAPI.getGraphicsMemoryInfo = () => {\n    let memUsed = 0;\n    model._graphicsResources.forEach(_ref3 => {\n      let {\n        oglObject\n      } = _ref3;\n      memUsed += oglObject.getAllocatedGPUMemoryInBytes();\n    });\n    return memUsed;\n  };\n  publicAPI.releaseGraphicsResources = () => {\n    // Clear the shader cache\n    if (model.shaderCache !== null) {\n      model.shaderCache.releaseGraphicsResources(publicAPI);\n    }\n    // Free cached graphics resources at the context level\n    model._graphicsResources.forEach(_ref4 => {\n      let {\n        oglObject\n      } = _ref4;\n      oglObject.releaseGraphicsResources(publicAPI);\n    });\n    model._graphicsResources.clear();\n    if (model.textureUnitManager !== null) {\n      model.textureUnitManager.freeAll();\n    }\n    // Finally, ask the renderers to release prop resources\n    model.renderable.getRenderersByReference().forEach(ren => {\n      const glRen = publicAPI.getViewNodeFor(ren);\n      glRen?.releaseGraphicsResources();\n    });\n  };\n\n  // Proxy some methods if needed\n  const publicAPIBeforeProxy = {\n    ...publicAPI\n  };\n  parentMethodsToProxy.forEach(methodName => {\n    publicAPI[methodName] = function () {\n      if (model.rootOpenGLRenderWindow) {\n        // Proxy only methods when the render window has a parent\n        return model.rootOpenGLRenderWindow[methodName](...arguments);\n      }\n      return publicAPIBeforeProxy[methodName](...arguments);\n    };\n  });\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  cullFaceEnabled: false,\n  shaderCache: null,\n  initialized: false,\n  context: null,\n  context2D: null,\n  canvas: null,\n  cursorVisibility: true,\n  cursor: 'pointer',\n  textureUnitManager: null,\n  textureResourceIds: null,\n  containerSize: null,\n  renderPasses: [],\n  notifyStartCaptureImage: false,\n  webgl2: false,\n  defaultToWebgl2: true,\n  // attempt webgl2 on by default\n  activeFramebuffer: null,\n  imageFormat: 'image/png',\n  useOffScreen: false,\n  useBackgroundImage: false\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkRenderWindowViewNode.extend(publicAPI, model, initialValues);\n\n  // Create internal instances\n  if (!model.canvas) {\n    model.canvas = document.createElement('canvas');\n    model.canvas.style.width = '100%';\n  }\n  if (!model.selector) {\n    model.selector = vtkHardwareSelector.newInstance();\n    model.selector.setOpenGLRenderWindow(publicAPI);\n  }\n\n  // Create internal bgImage\n  model.bgImage = new Image();\n  model.bgImage.style.position = 'absolute';\n  model.bgImage.style.left = '0';\n  model.bgImage.style.top = '0';\n  model.bgImage.style.width = '100%';\n  model.bgImage.style.height = '100%';\n  model.bgImage.style.zIndex = '-1';\n  model._textureResourceIds = new Map();\n  model._graphicsResources = new Map();\n  model._glInformation = null;\n  model.myFactory = vtkViewNodeFactory.newInstance();\n  model.shaderCache = vtkShaderCache.newInstance();\n  model.shaderCache.setOpenGLRenderWindow(publicAPI);\n\n  // setup default forward pass rendering\n  model.renderPasses[0] = vtkForwardPass.newInstance();\n\n  // Build VTK API\n  macro.get(publicAPI, model, ['shaderCache', 'textureUnitManager', 'webgl2', 'useBackgroundImage', 'activeFramebuffer', 'rootOpenGLRenderWindow']);\n  macro.setGet(publicAPI, model, ['initialized', 'context', 'context2D', 'canvas', 'renderPasses', 'notifyStartCaptureImage', 'defaultToWebgl2', 'cursor', 'useOffScreen']);\n  macro.setGetArray(publicAPI, model, ['size'], 2);\n  macro.event(publicAPI, model, 'imageReady');\n  macro.event(publicAPI, model, 'windowResizeEvent');\n\n  // Object methods\n  vtkOpenGLRenderWindow(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkOpenGLRenderWindow');\n\n// ----------------------------------------------------------------------------\n// Register API specific RenderWindow implementation\n// ----------------------------------------------------------------------------\n\nregisterViewConstructor('WebGL', newInstance);\n\n// ----------------------------------------------------------------------------\n\nvar vtkRenderWindow = {\n  newInstance,\n  extend,\n  pushMonitorGLContextCount,\n  popMonitorGLContextCount\n};\n\n// Register ourself to OpenGL backend if imported\nregisterOverride('vtkRenderWindow', newInstance);\n\nexport { vtkRenderWindow as default, extend, newInstance, popMonitorGLContextCount, pushMonitorGLContextCount };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}