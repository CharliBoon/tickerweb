{"ast":null,"code":"import otherStaticMethods, { Resolve } from './Static.js';\nexport { Resolve } from './Static.js';\nimport { m as macro } from '../../../macros2.js';\n\n/* eslint-disable arrow-body-style */\nfunction addCoincidentTopologyMethods(publicAPI, model, nameList) {\n  nameList.forEach(item => {\n    publicAPI[`get${item.method}`] = () => model[item.key];\n    publicAPI[`set${item.method}`] = macro.objectSetterMap.object(publicAPI, model, {\n      name: item.key,\n      params: ['factor', 'offset']\n    });\n  });\n}\nconst CATEGORIES = ['Polygon', 'Line', 'Point'];\n\n// CoincidentTopology static methods ------------------------------------------\n\nconst staticOffsetModel = {\n  Polygon: {\n    factor: 2,\n    offset: 0\n  },\n  Line: {\n    factor: 1,\n    offset: -1\n  },\n  Point: {\n    factor: 0,\n    offset: -2\n  }\n};\nconst staticOffsetAPI = {};\naddCoincidentTopologyMethods(staticOffsetAPI, staticOffsetModel, CATEGORIES.map(key => ({\n  key,\n  method: `ResolveCoincidentTopology${key}OffsetParameters`\n})));\nfunction implementCoincidentTopologyMethods(publicAPI, model) {\n  if (model.resolveCoincidentTopology === undefined) {\n    model.resolveCoincidentTopology = false;\n  }\n  macro.setGet(publicAPI, model, ['resolveCoincidentTopology']);\n\n  // Relative methods\n  model.topologyOffset = {\n    Polygon: {\n      factor: 0,\n      offset: 0\n    },\n    Line: {\n      factor: 0,\n      offset: 0\n    },\n    Point: {\n      factor: 0,\n      offset: 0\n    }\n  };\n\n  // Add Static methods to our instance\n  Object.keys(otherStaticMethods).forEach(methodName => {\n    publicAPI[methodName] = otherStaticMethods[methodName];\n  });\n  Object.keys(staticOffsetAPI).forEach(methodName => {\n    publicAPI[methodName] = staticOffsetAPI[methodName];\n  });\n  addCoincidentTopologyMethods(publicAPI, model.topologyOffset, CATEGORIES.map(key => ({\n    key,\n    method: `RelativeCoincidentTopology${key}OffsetParameters`\n  })));\n  publicAPI.getCoincidentTopologyPolygonOffsetParameters = () => {\n    const globalValue = staticOffsetAPI.getResolveCoincidentTopologyPolygonOffsetParameters();\n    const localValue = publicAPI.getRelativeCoincidentTopologyPolygonOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n  publicAPI.getCoincidentTopologyLineOffsetParameters = () => {\n    const globalValue = staticOffsetAPI.getResolveCoincidentTopologyLineOffsetParameters();\n    const localValue = publicAPI.getRelativeCoincidentTopologyLineOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n  publicAPI.getCoincidentTopologyPointOffsetParameter = () => {\n    const globalValue = staticOffsetAPI.getResolveCoincidentTopologyPointOffsetParameters();\n    const localValue = publicAPI.getRelativeCoincidentTopologyPointOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n}\nvar CoincidentTopologyHelper = {\n  implementCoincidentTopologyMethods,\n  staticOffsetAPI,\n  otherStaticMethods,\n  CATEGORIES,\n  Resolve\n};\nexport { CATEGORIES, CoincidentTopologyHelper as default };","map":{"version":3,"names":["otherStaticMethods","Resolve","m","macro","addCoincidentTopologyMethods","publicAPI","model","nameList","forEach","item","method","key","objectSetterMap","object","name","params","CATEGORIES","staticOffsetModel","Polygon","factor","offset","Line","Point","staticOffsetAPI","map","implementCoincidentTopologyMethods","resolveCoincidentTopology","undefined","setGet","topologyOffset","Object","keys","methodName","getCoincidentTopologyPolygonOffsetParameters","globalValue","getResolveCoincidentTopologyPolygonOffsetParameters","localValue","getRelativeCoincidentTopologyPolygonOffsetParameters","getCoincidentTopologyLineOffsetParameters","getResolveCoincidentTopologyLineOffsetParameters","getRelativeCoincidentTopologyLineOffsetParameters","getCoincidentTopologyPointOffsetParameter","getResolveCoincidentTopologyPointOffsetParameters","getRelativeCoincidentTopologyPointOffsetParameters","CoincidentTopologyHelper","default"],"sources":["C:/Users/Malcolm/Projects/Web/my-vtkjs-app/node_modules/@kitware/vtk.js/Rendering/Core/Mapper/CoincidentTopologyHelper.js"],"sourcesContent":["import otherStaticMethods, { Resolve } from './Static.js';\nexport { Resolve } from './Static.js';\nimport { m as macro } from '../../../macros2.js';\n\n/* eslint-disable arrow-body-style */\nfunction addCoincidentTopologyMethods(publicAPI, model, nameList) {\n  nameList.forEach(item => {\n    publicAPI[`get${item.method}`] = () => model[item.key];\n    publicAPI[`set${item.method}`] = macro.objectSetterMap.object(publicAPI, model, {\n      name: item.key,\n      params: ['factor', 'offset']\n    });\n  });\n}\nconst CATEGORIES = ['Polygon', 'Line', 'Point'];\n\n// CoincidentTopology static methods ------------------------------------------\n\nconst staticOffsetModel = {\n  Polygon: {\n    factor: 2,\n    offset: 0\n  },\n  Line: {\n    factor: 1,\n    offset: -1\n  },\n  Point: {\n    factor: 0,\n    offset: -2\n  }\n};\nconst staticOffsetAPI = {};\naddCoincidentTopologyMethods(staticOffsetAPI, staticOffsetModel, CATEGORIES.map(key => ({\n  key,\n  method: `ResolveCoincidentTopology${key}OffsetParameters`\n})));\nfunction implementCoincidentTopologyMethods(publicAPI, model) {\n  if (model.resolveCoincidentTopology === undefined) {\n    model.resolveCoincidentTopology = false;\n  }\n  macro.setGet(publicAPI, model, ['resolveCoincidentTopology']);\n\n  // Relative methods\n  model.topologyOffset = {\n    Polygon: {\n      factor: 0,\n      offset: 0\n    },\n    Line: {\n      factor: 0,\n      offset: 0\n    },\n    Point: {\n      factor: 0,\n      offset: 0\n    }\n  };\n\n  // Add Static methods to our instance\n  Object.keys(otherStaticMethods).forEach(methodName => {\n    publicAPI[methodName] = otherStaticMethods[methodName];\n  });\n  Object.keys(staticOffsetAPI).forEach(methodName => {\n    publicAPI[methodName] = staticOffsetAPI[methodName];\n  });\n  addCoincidentTopologyMethods(publicAPI, model.topologyOffset, CATEGORIES.map(key => ({\n    key,\n    method: `RelativeCoincidentTopology${key}OffsetParameters`\n  })));\n  publicAPI.getCoincidentTopologyPolygonOffsetParameters = () => {\n    const globalValue = staticOffsetAPI.getResolveCoincidentTopologyPolygonOffsetParameters();\n    const localValue = publicAPI.getRelativeCoincidentTopologyPolygonOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n  publicAPI.getCoincidentTopologyLineOffsetParameters = () => {\n    const globalValue = staticOffsetAPI.getResolveCoincidentTopologyLineOffsetParameters();\n    const localValue = publicAPI.getRelativeCoincidentTopologyLineOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n  publicAPI.getCoincidentTopologyPointOffsetParameter = () => {\n    const globalValue = staticOffsetAPI.getResolveCoincidentTopologyPointOffsetParameters();\n    const localValue = publicAPI.getRelativeCoincidentTopologyPointOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n}\nvar CoincidentTopologyHelper = {\n  implementCoincidentTopologyMethods,\n  staticOffsetAPI,\n  otherStaticMethods,\n  CATEGORIES,\n  Resolve\n};\n\nexport { CATEGORIES, CoincidentTopologyHelper as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}