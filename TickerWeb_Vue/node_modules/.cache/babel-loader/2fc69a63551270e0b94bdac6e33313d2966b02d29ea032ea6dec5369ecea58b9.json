{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { m as macro } from '../../macros2.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUSimpleMapper from './SimpleMapper.js';\nimport vtkWebGPURenderEncoder from './RenderEncoder.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\nimport vtkWebGPUTexture from './Texture.js';\nimport vtkWebGPUUniformBuffer from './UniformBuffer.js';\nimport vtkWebGPUFullScreenQuad from './FullScreenQuad.js';\nimport vtkWebGPUVolumePassFSQ from './VolumePassFSQ.js';\nimport { e as distance2BetweenPoints } from '../../Common/Core/Math/index.js';\nconst {\n  Representation\n} = vtkProperty;\nconst {\n  BufferUsage,\n  PrimitiveTypes\n} = vtkWebGPUBufferManager;\n\n// The volume rendering pass consists of two sub passes. The first\n// (depthRange) renders polygonal cubes for the volumes to compute min and\n// max bounds in depth for the image. This is then fed into the second pass\n// (final) which actually does the raycasting between those bounds sampling\n// the volumes along the way. So the first pass tends to be very fast whicle\n// the second is where most of the work is done.\n\n// given x then y then z ordering\n//\n//     2-----3\n//   / |   / |\n//  6-----7  |\n//  |  |  |  |\n//  |  0-----1\n//  |/    |/\n//  4-----5\n//\nconst cubeFaceTriangles = [[0, 4, 6], [0, 6, 2], [1, 3, 7], [1, 7, 5], [0, 5, 4], [0, 1, 5], [2, 6, 7], [2, 7, 3], [0, 3, 1], [0, 2, 3], [4, 5, 7], [4, 7, 6]];\nconst DepthBoundsFS = `\n//VTK::Renderer::Dec\n\n//VTK::Select::Dec\n\n//VTK::VolumePass::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output : fragmentOutput;\n\n  //VTK::Select::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::VolumePass::Impl\n\n  // use the maximum (closest) of the current value and the zbuffer\n  // the blend func will then take the min to find the farthest stop value\n  var stopval: f32 = max(input.fragPos.z, textureLoad(opaquePassDepthTexture, vec2<i32>(i32(input.fragPos.x), i32(input.fragPos.y)), 0));\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\nconst volumeCopyFragTemplate = `\n//VTK::Renderer::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var computedColor: vec4<f32> = textureSample(volumePassColorTexture,\n    volumePassColorTextureSampler, mapperUBO.tscale*input.tcoordVS);\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\n\n/* eslint-disable no-undef */\n/* eslint-disable no-bitwise */\n\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUVolumePass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUVolumePass');\n\n  // create the required textures, encoders, FSQ etc\n  publicAPI.initialize = viewNode => {\n    if (!model._clearEncoder) {\n      publicAPI.createClearEncoder(viewNode);\n    }\n    if (!model._mergeEncoder) {\n      publicAPI.createMergeEncoder(viewNode);\n    }\n    if (!model._copyEncoder) {\n      publicAPI.createCopyEncoder(viewNode);\n    }\n    if (!model._depthRangeEncoder) {\n      publicAPI.createDepthRangeEncoder(viewNode);\n    }\n    if (!model.fullScreenQuad) {\n      model.fullScreenQuad = vtkWebGPUVolumePassFSQ.newInstance();\n      model.fullScreenQuad.setDevice(viewNode.getDevice());\n      model.fullScreenQuad.setTextureViews([...model._depthRangeEncoder.getColorTextureViews()]);\n    }\n    if (!model._volumeCopyQuad) {\n      model._volumeCopyQuad = vtkWebGPUFullScreenQuad.newInstance();\n      model._volumeCopyQuad.setPipelineHash('volpassfsq');\n      model._volumeCopyQuad.setDevice(viewNode.getDevice());\n      model._volumeCopyQuad.setFragmentShaderTemplate(volumeCopyFragTemplate);\n      model._copyUBO = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n      model._copyUBO.addEntry('tscale', 'vec2<f32>');\n      model._volumeCopyQuad.setUBO(model._copyUBO);\n      model._volumeCopyQuad.setTextureViews([model._colorTextureView]);\n    }\n  };\n  publicAPI.traverse = (renNode, viewNode) => {\n    if (model.deleted) {\n      return;\n    }\n\n    // we just render our delegates in order\n    model._currentParent = viewNode;\n\n    // create stuff we need\n    publicAPI.initialize(viewNode);\n\n    // determine if we are rendering a small size\n    publicAPI.computeTiming(viewNode);\n\n    // first render the boxes to generate a min max depth\n    // map for all the volumes\n    publicAPI.renderDepthBounds(renNode, viewNode);\n\n    // always mark true\n    model._firstGroup = true;\n    const device = viewNode.getDevice();\n\n    // determine how many volumes we can render at a time. We subtract\n    // 4 because we use know we use textures for min, max, ofun and tfun\n    const maxVolumes = device.getHandle().limits.maxSampledTexturesPerShaderStage - 4;\n\n    // if we have to make multiple passes then break the volumes up into groups\n    // rendered from farthest to closest\n    if (model.volumes.length > maxVolumes) {\n      const cameraPos = renNode.getRenderable().getActiveCamera().getPosition();\n      // sort from back to front based on volume centroid\n      const distances = [];\n      for (let v = 0; v < model.volumes.length; v++) {\n        const bounds = model.volumes[v].getRenderable().getBounds();\n        const centroid = [0.5 * (bounds[1] + bounds[0]), 0.5 * (bounds[3] + bounds[2]), 0.5 * (bounds[5] + bounds[4])];\n        distances[v] = distance2BetweenPoints(centroid, cameraPos);\n      }\n\n      // sort by distance\n      const volumeOrder = [...Array(model.volumes.length).keys()];\n      volumeOrder.sort((a, b) => distances[b] - distances[a]);\n\n      // render in chunks back to front\n      let volumesToRender = [];\n      // start with smallest chunk so that the last (closest) chunk\n      // has a full maxVolumes;\n      let chunkSize = volumeOrder.length % maxVolumes;\n      for (let v = 0; v < volumeOrder.length; v++) {\n        volumesToRender.push(model.volumes[volumeOrder[v]]);\n        if (volumesToRender.length >= chunkSize) {\n          publicAPI.rayCastPass(viewNode, renNode, volumesToRender);\n          volumesToRender = [];\n          chunkSize = maxVolumes;\n          model._firstGroup = false;\n        }\n      }\n    } else {\n      // if not rendering in chunks then just draw all of them at once\n      publicAPI.rayCastPass(viewNode, renNode, model.volumes);\n    }\n\n    // copy back to the original color buffer\n\n    // final composite\n    model._volumeCopyQuad.setWebGPURenderer(renNode);\n    if (model._useSmallViewport) {\n      const width = model._colorTextureView.getTexture().getWidth();\n      const height = model._colorTextureView.getTexture().getHeight();\n      model._copyUBO.setArray('tscale', [model._smallViewportWidth / width, model._smallViewportHeight / height]);\n    } else {\n      model._copyUBO.setArray('tscale', [1.0, 1.0]);\n    }\n    model._copyUBO.sendIfNeeded(device);\n    model._copyEncoder.setColorTextureView(0, model.colorTextureView);\n    model._copyEncoder.attachTextureViews();\n    model._copyEncoder.begin(viewNode.getCommandEncoder());\n    renNode.scissorAndViewport(model._copyEncoder);\n    model._volumeCopyQuad.prepareAndDraw(model._copyEncoder);\n    model._copyEncoder.end();\n  };\n\n  // unsubscribe from our listeners\n  publicAPI.delete = macro.chain(() => {\n    if (model._animationRateSubscription) {\n      model._animationRateSubscription.unsubscribe();\n      model._animationRateSubscription = null;\n    }\n  }, publicAPI.delete);\n  publicAPI.computeTiming = viewNode => {\n    const rwi = viewNode.getRenderable().getInteractor();\n    if (model._lastScale == null) {\n      const firstMapper = model.volumes[0].getRenderable().getMapper();\n      model._lastScale = firstMapper.getInitialInteractionScale() || 1.0;\n    }\n    model._useSmallViewport = false;\n    if (rwi.isAnimating() && model._lastScale > 1.5) {\n      model._useSmallViewport = true;\n    }\n    model._colorTexture.resize(viewNode.getCanvas().width, viewNode.getCanvas().height);\n    if (!model._animationRateSubscription) {\n      // when the animation frame rate changes recompute the scale factor\n      model._animationRateSubscription = rwi.onAnimationFrameRateUpdate(() => {\n        const firstMapper = model.volumes[0].getRenderable().getMapper();\n        if (firstMapper.getAutoAdjustSampleDistances()) {\n          const frate = rwi.getRecentAnimationFrameRate();\n          const targetScale = model._lastScale * rwi.getDesiredUpdateRate() / frate;\n          model._lastScale = targetScale;\n          // clamp scale to some reasonable values.\n          // Below 1.5 we will just be using full resolution as that is close enough\n          // Above 400 seems like a lot so we limit to that 1/20th per axis\n          if (model._lastScale > 400) {\n            model._lastScale = 400;\n          }\n        } else {\n          model._lastScale = firstMapper.getImageSampleDistance() * firstMapper.getImageSampleDistance();\n        }\n        if (model._lastScale < 1.5) {\n          model._lastScale = 1.5;\n        }\n      });\n    }\n  };\n  publicAPI.rayCastPass = (viewNode, renNode, volumes) => {\n    const encoder = model._firstGroup ? model._clearEncoder : model._mergeEncoder;\n    encoder.attachTextureViews();\n    encoder.begin(viewNode.getCommandEncoder());\n    let width = model._colorTextureView.getTexture().getWidth();\n    let height = model._colorTextureView.getTexture().getHeight();\n    if (model._useSmallViewport) {\n      const canvas = viewNode.getCanvas();\n      const scaleFactor = 1 / Math.sqrt(model._lastScale);\n      model._smallViewportWidth = Math.ceil(scaleFactor * canvas.width);\n      model._smallViewportHeight = Math.ceil(scaleFactor * canvas.height);\n      width = model._smallViewportWidth;\n      height = model._smallViewportHeight;\n    }\n    encoder.getHandle().setViewport(0, 0, width, height, 0.0, 1.0);\n    // set scissor\n    encoder.getHandle().setScissorRect(0, 0, width, height);\n    model.fullScreenQuad.setWebGPURenderer(renNode);\n    model.fullScreenQuad.setVolumes(volumes);\n    model.fullScreenQuad.prepareAndDraw(encoder);\n    encoder.end();\n  };\n  publicAPI.renderDepthBounds = (renNode, viewNode) => {\n    publicAPI.updateDepthPolyData(renNode);\n    const pd = model._boundsPoly;\n    const points = pd.getPoints();\n    const cells = pd.getPolys();\n    let buffRequest = {\n      hash: `vp${cells.getMTime()}`,\n      usage: BufferUsage.Index,\n      cells,\n      numberOfPoints: points.getNumberOfPoints(),\n      primitiveType: PrimitiveTypes.Triangles,\n      representation: Representation.SURFACE\n    };\n    const indexBuffer = viewNode.getDevice().getBufferManager().getBuffer(buffRequest);\n    model._mapper.getVertexInput().setIndexBuffer(indexBuffer);\n\n    // points\n    buffRequest = {\n      usage: BufferUsage.PointArray,\n      format: 'float32x4',\n      hash: `vp${points.getMTime()}${cells.getMTime()}`,\n      dataArray: points,\n      indexBuffer,\n      packExtra: true\n    };\n    const buff = viewNode.getDevice().getBufferManager().getBuffer(buffRequest);\n    model._mapper.getVertexInput().addBuffer(buff, ['vertexBC']);\n    model._mapper.setNumberOfVertices(buff.getSizeInBytes() / buff.getStrideInBytes());\n    publicAPI.drawDepthRange(renNode, viewNode);\n  };\n  publicAPI.updateDepthPolyData = renNode => {\n    // check mtimes first\n    let update = false;\n    for (let i = 0; i < model.volumes.length; i++) {\n      const mtime = model.volumes[i].getMTime();\n      if (!model._lastMTimes[i] || mtime !== model._lastMTimes[i]) {\n        update = true;\n        model._lastMTimes[i] = mtime;\n      }\n    }\n\n    // also check stabilized time\n    const stime = renNode.getStabilizedTime();\n    if (model._lastMTimes.length <= model.volumes.length || stime !== model._lastMTimes[model.volumes.length]) {\n      update = true;\n      model._lastMTimes[model.volumes.length] = stime;\n    }\n\n    // if no need to update then return\n    if (!update) {\n      return;\n    }\n\n    // rebuild\n    const center = renNode.getStabilizedCenterByReference();\n    const numPts = model.volumes.length * 8;\n    const points = new Float64Array(numPts * 3);\n    const numTris = model.volumes.length * 12;\n    const polys = new Uint16Array(numTris * 4);\n\n    // add points and cells\n    for (let i = 0; i < model.volumes.length; i++) {\n      model.volumes[i].getBoundingCubePoints(points, i * 24);\n      let cellIdx = i * 12 * 4;\n      const offset = i * 8;\n      for (let t = 0; t < 12; t++) {\n        polys[cellIdx++] = 3;\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][0];\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][1];\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][2];\n      }\n    }\n    for (let p = 0; p < points.length; p += 3) {\n      points[p] -= center[0];\n      points[p + 1] -= center[1];\n      points[p + 2] -= center[2];\n    }\n    model._boundsPoly.getPoints().setData(points, 3);\n    model._boundsPoly.getPoints().modified();\n    model._boundsPoly.getPolys().setData(polys, 1);\n    model._boundsPoly.getPolys().modified();\n    model._boundsPoly.modified();\n  };\n  publicAPI.drawDepthRange = (renNode, viewNode) => {\n    // copy current depth buffer to\n    model._depthRangeTexture.resizeToMatch(model.colorTextureView.getTexture());\n    model._depthRangeTexture2.resizeToMatch(model.colorTextureView.getTexture());\n    model._depthRangeEncoder.attachTextureViews();\n    publicAPI.setCurrentOperation('volumeDepthRangePass');\n    renNode.setRenderEncoder(model._depthRangeEncoder);\n    renNode.volumeDepthRangePass(true);\n    model._mapper.setWebGPURenderer(renNode);\n    model._mapper.prepareToDraw(model._depthRangeEncoder);\n    model._mapper.registerDrawCallback(model._depthRangeEncoder);\n    renNode.volumeDepthRangePass(false);\n  };\n  publicAPI.createDepthRangeEncoder = viewNode => {\n    const device = viewNode.getDevice();\n    model._depthRangeEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'VolumePass DepthRange'\n    });\n    model._depthRangeEncoder.setPipelineHash('volr');\n    model._depthRangeEncoder.setReplaceShaderCodeFunction(pipeline => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor1');\n      fDesc.addOutput('vec4<f32>', 'outColor2');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor1 = vec4<f32>(input.fragPos.z, 0.0, 0.0, 0.0);', 'output.outColor2 = vec4<f32>(stopval, 0.0, 0.0, 0.0);']).result;\n      fDesc.setCode(code);\n    });\n    model._depthRangeEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        clearValue: [0.0, 0.0, 0.0, 0.0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }, {\n        view: null,\n        clearValue: [1.0, 1.0, 1.0, 1.0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n    });\n    model._depthRangeEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'r16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one',\n              operation: 'max'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one',\n              operation: 'max'\n            }\n          }\n        }, {\n          format: 'r16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one',\n              operation: 'min'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one',\n              operation: 'min'\n            }\n          }\n        }]\n      }\n    });\n\n    // and the textures it needs\n    model._depthRangeTexture = vtkWebGPUTexture.newInstance({\n      label: 'volumePassMaxDepth'\n    });\n    model._depthRangeTexture.create(device, {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'r16float',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n    });\n    const maxView = model._depthRangeTexture.createView('maxTexture');\n    model._depthRangeEncoder.setColorTextureView(0, maxView);\n    model._depthRangeTexture2 = vtkWebGPUTexture.newInstance({\n      label: 'volumePassDepthMin'\n    });\n    model._depthRangeTexture2.create(device, {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'r16float',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n    });\n    const minView = model._depthRangeTexture2.createView('minTexture');\n    model._depthRangeEncoder.setColorTextureView(1, minView);\n    model._mapper.setDevice(viewNode.getDevice());\n    model._mapper.setTextureViews([model.depthTextureView]);\n  };\n  publicAPI.createClearEncoder = viewNode => {\n    model._colorTexture = vtkWebGPUTexture.newInstance({\n      label: 'volumePassColor'\n    });\n    model._colorTexture.create(viewNode.getDevice(), {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'bgra8unorm',\n      /* eslint-disable no-undef */\n      /* eslint-disable no-bitwise */\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC\n    });\n    model._colorTextureView = model._colorTexture.createView('volumePassColorTexture');\n    model._colorTextureView.addSampler(viewNode.getDevice(), {\n      minFilter: 'linear',\n      magFilter: 'linear'\n    });\n    model._clearEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'VolumePass Clear'\n    });\n    model._clearEncoder.setColorTextureView(0, model._colorTextureView);\n    model._clearEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        clearValue: [0.0, 0.0, 0.0, 0.0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n    });\n    model._clearEncoder.setPipelineHash('volpf');\n    model._clearEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'bgra8unorm',\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n  publicAPI.createCopyEncoder = viewNode => {\n    model._copyEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'volumePassCopy'\n    });\n    model._copyEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n    model._copyEncoder.setPipelineHash('volcopypf');\n    model._copyEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'rgba16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n  publicAPI.createMergeEncoder = viewNode => {\n    model._mergeEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'volumePassMerge'\n    });\n    model._mergeEncoder.setColorTextureView(0, model._colorTextureView);\n    model._mergeEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n    model._mergeEncoder.setReplaceShaderCodeFunction(pipeline => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor = vec4<f32>(computedColor.rgb, computedColor.a);']).result;\n      fDesc.setCode(code);\n    });\n    model._mergeEncoder.setPipelineHash('volpf');\n    model._mergeEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'bgra8unorm',\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n\n  // marks modified when needed\n  publicAPI.setVolumes = val => {\n    if (!model.volumes || model.volumes.length !== val.length) {\n      model.volumes = [...val];\n      publicAPI.modified();\n      return;\n    }\n    for (let i = 0; i < val.length; i++) {\n      if (val[i] !== model.volumes[i]) {\n        model.volumes = [...val];\n        publicAPI.modified();\n        return;\n      }\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  colorTextureView: null,\n  depthTextureView: null,\n  volumes: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  model._mapper = vtkWebGPUSimpleMapper.newInstance();\n  model._mapper.setFragmentShaderTemplate(DepthBoundsFS);\n  model._mapper.getShaderReplacements().set('replaceShaderVolumePass', (hash, pipeline, vertexInput) => {\n    const fDesc = pipeline.getShaderDescription('fragment');\n    fDesc.addBuiltinInput('vec4<f32>', '@builtin(position) fragPos');\n  });\n  model._boundsPoly = vtkPolyData.newInstance();\n  model._lastMTimes = [];\n  macro.setGet(publicAPI, model, ['colorTextureView', 'depthTextureView']);\n\n  // Object methods\n  vtkWebGPUVolumePass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUVolumePass');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUVolumePass$1 = {\n  newInstance,\n  extend\n};\nexport { vtkWebGPUVolumePass$1 as default, extend, newInstance };","map":{"version":3,"names":["m","macro","vtkPolyData","vtkProperty","vtkRenderPass","vtkWebGPUBufferManager","vtkWebGPUSimpleMapper","vtkWebGPURenderEncoder","vtkWebGPUShaderCache","vtkWebGPUTexture","vtkWebGPUUniformBuffer","vtkWebGPUFullScreenQuad","vtkWebGPUVolumePassFSQ","e","distance2BetweenPoints","Representation","BufferUsage","PrimitiveTypes","cubeFaceTriangles","DepthBoundsFS","volumeCopyFragTemplate","vtkWebGPUVolumePass","publicAPI","model","classHierarchy","push","initialize","viewNode","_clearEncoder","createClearEncoder","_mergeEncoder","createMergeEncoder","_copyEncoder","createCopyEncoder","_depthRangeEncoder","createDepthRangeEncoder","fullScreenQuad","newInstance","setDevice","getDevice","setTextureViews","getColorTextureViews","_volumeCopyQuad","setPipelineHash","setFragmentShaderTemplate","_copyUBO","label","addEntry","setUBO","_colorTextureView","traverse","renNode","deleted","_currentParent","computeTiming","renderDepthBounds","_firstGroup","device","maxVolumes","getHandle","limits","maxSampledTexturesPerShaderStage","volumes","length","cameraPos","getRenderable","getActiveCamera","getPosition","distances","v","bounds","getBounds","centroid","volumeOrder","Array","keys","sort","a","b","volumesToRender","chunkSize","rayCastPass","setWebGPURenderer","_useSmallViewport","width","getTexture","getWidth","height","getHeight","setArray","_smallViewportWidth","_smallViewportHeight","sendIfNeeded","setColorTextureView","colorTextureView","attachTextureViews","begin","getCommandEncoder","scissorAndViewport","prepareAndDraw","end","delete","chain","_animationRateSubscription","unsubscribe","rwi","getInteractor","_lastScale","firstMapper","getMapper","getInitialInteractionScale","isAnimating","_colorTexture","resize","getCanvas","onAnimationFrameRateUpdate","getAutoAdjustSampleDistances","frate","getRecentAnimationFrameRate","targetScale","getDesiredUpdateRate","getImageSampleDistance","encoder","canvas","scaleFactor","Math","sqrt","ceil","setViewport","setScissorRect","setVolumes","updateDepthPolyData","pd","_boundsPoly","points","getPoints","cells","getPolys","buffRequest","hash","getMTime","usage","Index","numberOfPoints","getNumberOfPoints","primitiveType","Triangles","representation","SURFACE","indexBuffer","getBufferManager","getBuffer","_mapper","getVertexInput","setIndexBuffer","PointArray","format","dataArray","packExtra","buff","addBuffer","setNumberOfVertices","getSizeInBytes","getStrideInBytes","drawDepthRange","update","i","mtime","_lastMTimes","stime","getStabilizedTime","center","getStabilizedCenterByReference","numPts","Float64Array","numTris","polys","Uint16Array","getBoundingCubePoints","cellIdx","offset","t","p","setData","modified","_depthRangeTexture","resizeToMatch","_depthRangeTexture2","setCurrentOperation","setRenderEncoder","volumeDepthRangePass","prepareToDraw","registerDrawCallback","setReplaceShaderCodeFunction","pipeline","fDesc","getShaderDescription","addOutput","code","getCode","substitute","result","setCode","setDescription","colorAttachments","view","clearValue","loadOp","storeOp","setPipelineSettings","primitive","cullMode","fragment","targets","blend","color","srcFactor","dstFactor","operation","alpha","srcfactor","create","GPUTextureUsage","RENDER_ATTACHMENT","TEXTURE_BINDING","maxView","createView","minView","depthTextureView","COPY_SRC","addSampler","minFilter","magFilter","val","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","getShaderReplacements","set","vertexInput","addBuiltinInput","setGet","vtkWebGPUVolumePass$1","default"],"sources":["/home/ims/VSCodeProjects/TickerWeb/TickerWeb_Vue/node_modules/@kitware/vtk.js/Rendering/WebGPU/VolumePass.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUSimpleMapper from './SimpleMapper.js';\nimport vtkWebGPURenderEncoder from './RenderEncoder.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\nimport vtkWebGPUTexture from './Texture.js';\nimport vtkWebGPUUniformBuffer from './UniformBuffer.js';\nimport vtkWebGPUFullScreenQuad from './FullScreenQuad.js';\nimport vtkWebGPUVolumePassFSQ from './VolumePassFSQ.js';\nimport { e as distance2BetweenPoints } from '../../Common/Core/Math/index.js';\n\nconst {\n  Representation\n} = vtkProperty;\nconst {\n  BufferUsage,\n  PrimitiveTypes\n} = vtkWebGPUBufferManager;\n\n// The volume rendering pass consists of two sub passes. The first\n// (depthRange) renders polygonal cubes for the volumes to compute min and\n// max bounds in depth for the image. This is then fed into the second pass\n// (final) which actually does the raycasting between those bounds sampling\n// the volumes along the way. So the first pass tends to be very fast whicle\n// the second is where most of the work is done.\n\n// given x then y then z ordering\n//\n//     2-----3\n//   / |   / |\n//  6-----7  |\n//  |  |  |  |\n//  |  0-----1\n//  |/    |/\n//  4-----5\n//\nconst cubeFaceTriangles = [[0, 4, 6], [0, 6, 2], [1, 3, 7], [1, 7, 5], [0, 5, 4], [0, 1, 5], [2, 6, 7], [2, 7, 3], [0, 3, 1], [0, 2, 3], [4, 5, 7], [4, 7, 6]];\nconst DepthBoundsFS = `\n//VTK::Renderer::Dec\n\n//VTK::Select::Dec\n\n//VTK::VolumePass::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output : fragmentOutput;\n\n  //VTK::Select::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::VolumePass::Impl\n\n  // use the maximum (closest) of the current value and the zbuffer\n  // the blend func will then take the min to find the farthest stop value\n  var stopval: f32 = max(input.fragPos.z, textureLoad(opaquePassDepthTexture, vec2<i32>(i32(input.fragPos.x), i32(input.fragPos.y)), 0));\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\nconst volumeCopyFragTemplate = `\n//VTK::Renderer::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var computedColor: vec4<f32> = textureSample(volumePassColorTexture,\n    volumePassColorTextureSampler, mapperUBO.tscale*input.tcoordVS);\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\n\n/* eslint-disable no-undef */\n/* eslint-disable no-bitwise */\n\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUVolumePass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUVolumePass');\n\n  // create the required textures, encoders, FSQ etc\n  publicAPI.initialize = viewNode => {\n    if (!model._clearEncoder) {\n      publicAPI.createClearEncoder(viewNode);\n    }\n    if (!model._mergeEncoder) {\n      publicAPI.createMergeEncoder(viewNode);\n    }\n    if (!model._copyEncoder) {\n      publicAPI.createCopyEncoder(viewNode);\n    }\n    if (!model._depthRangeEncoder) {\n      publicAPI.createDepthRangeEncoder(viewNode);\n    }\n    if (!model.fullScreenQuad) {\n      model.fullScreenQuad = vtkWebGPUVolumePassFSQ.newInstance();\n      model.fullScreenQuad.setDevice(viewNode.getDevice());\n      model.fullScreenQuad.setTextureViews([...model._depthRangeEncoder.getColorTextureViews()]);\n    }\n    if (!model._volumeCopyQuad) {\n      model._volumeCopyQuad = vtkWebGPUFullScreenQuad.newInstance();\n      model._volumeCopyQuad.setPipelineHash('volpassfsq');\n      model._volumeCopyQuad.setDevice(viewNode.getDevice());\n      model._volumeCopyQuad.setFragmentShaderTemplate(volumeCopyFragTemplate);\n      model._copyUBO = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n      model._copyUBO.addEntry('tscale', 'vec2<f32>');\n      model._volumeCopyQuad.setUBO(model._copyUBO);\n      model._volumeCopyQuad.setTextureViews([model._colorTextureView]);\n    }\n  };\n  publicAPI.traverse = (renNode, viewNode) => {\n    if (model.deleted) {\n      return;\n    }\n\n    // we just render our delegates in order\n    model._currentParent = viewNode;\n\n    // create stuff we need\n    publicAPI.initialize(viewNode);\n\n    // determine if we are rendering a small size\n    publicAPI.computeTiming(viewNode);\n\n    // first render the boxes to generate a min max depth\n    // map for all the volumes\n    publicAPI.renderDepthBounds(renNode, viewNode);\n\n    // always mark true\n    model._firstGroup = true;\n    const device = viewNode.getDevice();\n\n    // determine how many volumes we can render at a time. We subtract\n    // 4 because we use know we use textures for min, max, ofun and tfun\n    const maxVolumes = device.getHandle().limits.maxSampledTexturesPerShaderStage - 4;\n\n    // if we have to make multiple passes then break the volumes up into groups\n    // rendered from farthest to closest\n    if (model.volumes.length > maxVolumes) {\n      const cameraPos = renNode.getRenderable().getActiveCamera().getPosition();\n      // sort from back to front based on volume centroid\n      const distances = [];\n      for (let v = 0; v < model.volumes.length; v++) {\n        const bounds = model.volumes[v].getRenderable().getBounds();\n        const centroid = [0.5 * (bounds[1] + bounds[0]), 0.5 * (bounds[3] + bounds[2]), 0.5 * (bounds[5] + bounds[4])];\n        distances[v] = distance2BetweenPoints(centroid, cameraPos);\n      }\n\n      // sort by distance\n      const volumeOrder = [...Array(model.volumes.length).keys()];\n      volumeOrder.sort((a, b) => distances[b] - distances[a]);\n\n      // render in chunks back to front\n      let volumesToRender = [];\n      // start with smallest chunk so that the last (closest) chunk\n      // has a full maxVolumes;\n      let chunkSize = volumeOrder.length % maxVolumes;\n      for (let v = 0; v < volumeOrder.length; v++) {\n        volumesToRender.push(model.volumes[volumeOrder[v]]);\n        if (volumesToRender.length >= chunkSize) {\n          publicAPI.rayCastPass(viewNode, renNode, volumesToRender);\n          volumesToRender = [];\n          chunkSize = maxVolumes;\n          model._firstGroup = false;\n        }\n      }\n    } else {\n      // if not rendering in chunks then just draw all of them at once\n      publicAPI.rayCastPass(viewNode, renNode, model.volumes);\n    }\n\n    // copy back to the original color buffer\n\n    // final composite\n    model._volumeCopyQuad.setWebGPURenderer(renNode);\n    if (model._useSmallViewport) {\n      const width = model._colorTextureView.getTexture().getWidth();\n      const height = model._colorTextureView.getTexture().getHeight();\n      model._copyUBO.setArray('tscale', [model._smallViewportWidth / width, model._smallViewportHeight / height]);\n    } else {\n      model._copyUBO.setArray('tscale', [1.0, 1.0]);\n    }\n    model._copyUBO.sendIfNeeded(device);\n    model._copyEncoder.setColorTextureView(0, model.colorTextureView);\n    model._copyEncoder.attachTextureViews();\n    model._copyEncoder.begin(viewNode.getCommandEncoder());\n    renNode.scissorAndViewport(model._copyEncoder);\n    model._volumeCopyQuad.prepareAndDraw(model._copyEncoder);\n    model._copyEncoder.end();\n  };\n\n  // unsubscribe from our listeners\n  publicAPI.delete = macro.chain(() => {\n    if (model._animationRateSubscription) {\n      model._animationRateSubscription.unsubscribe();\n      model._animationRateSubscription = null;\n    }\n  }, publicAPI.delete);\n  publicAPI.computeTiming = viewNode => {\n    const rwi = viewNode.getRenderable().getInteractor();\n    if (model._lastScale == null) {\n      const firstMapper = model.volumes[0].getRenderable().getMapper();\n      model._lastScale = firstMapper.getInitialInteractionScale() || 1.0;\n    }\n    model._useSmallViewport = false;\n    if (rwi.isAnimating() && model._lastScale > 1.5) {\n      model._useSmallViewport = true;\n    }\n    model._colorTexture.resize(viewNode.getCanvas().width, viewNode.getCanvas().height);\n    if (!model._animationRateSubscription) {\n      // when the animation frame rate changes recompute the scale factor\n      model._animationRateSubscription = rwi.onAnimationFrameRateUpdate(() => {\n        const firstMapper = model.volumes[0].getRenderable().getMapper();\n        if (firstMapper.getAutoAdjustSampleDistances()) {\n          const frate = rwi.getRecentAnimationFrameRate();\n          const targetScale = model._lastScale * rwi.getDesiredUpdateRate() / frate;\n          model._lastScale = targetScale;\n          // clamp scale to some reasonable values.\n          // Below 1.5 we will just be using full resolution as that is close enough\n          // Above 400 seems like a lot so we limit to that 1/20th per axis\n          if (model._lastScale > 400) {\n            model._lastScale = 400;\n          }\n        } else {\n          model._lastScale = firstMapper.getImageSampleDistance() * firstMapper.getImageSampleDistance();\n        }\n        if (model._lastScale < 1.5) {\n          model._lastScale = 1.5;\n        }\n      });\n    }\n  };\n  publicAPI.rayCastPass = (viewNode, renNode, volumes) => {\n    const encoder = model._firstGroup ? model._clearEncoder : model._mergeEncoder;\n    encoder.attachTextureViews();\n    encoder.begin(viewNode.getCommandEncoder());\n    let width = model._colorTextureView.getTexture().getWidth();\n    let height = model._colorTextureView.getTexture().getHeight();\n    if (model._useSmallViewport) {\n      const canvas = viewNode.getCanvas();\n      const scaleFactor = 1 / Math.sqrt(model._lastScale);\n      model._smallViewportWidth = Math.ceil(scaleFactor * canvas.width);\n      model._smallViewportHeight = Math.ceil(scaleFactor * canvas.height);\n      width = model._smallViewportWidth;\n      height = model._smallViewportHeight;\n    }\n    encoder.getHandle().setViewport(0, 0, width, height, 0.0, 1.0);\n    // set scissor\n    encoder.getHandle().setScissorRect(0, 0, width, height);\n    model.fullScreenQuad.setWebGPURenderer(renNode);\n    model.fullScreenQuad.setVolumes(volumes);\n    model.fullScreenQuad.prepareAndDraw(encoder);\n    encoder.end();\n  };\n  publicAPI.renderDepthBounds = (renNode, viewNode) => {\n    publicAPI.updateDepthPolyData(renNode);\n    const pd = model._boundsPoly;\n    const points = pd.getPoints();\n    const cells = pd.getPolys();\n    let buffRequest = {\n      hash: `vp${cells.getMTime()}`,\n      usage: BufferUsage.Index,\n      cells,\n      numberOfPoints: points.getNumberOfPoints(),\n      primitiveType: PrimitiveTypes.Triangles,\n      representation: Representation.SURFACE\n    };\n    const indexBuffer = viewNode.getDevice().getBufferManager().getBuffer(buffRequest);\n    model._mapper.getVertexInput().setIndexBuffer(indexBuffer);\n\n    // points\n    buffRequest = {\n      usage: BufferUsage.PointArray,\n      format: 'float32x4',\n      hash: `vp${points.getMTime()}${cells.getMTime()}`,\n      dataArray: points,\n      indexBuffer,\n      packExtra: true\n    };\n    const buff = viewNode.getDevice().getBufferManager().getBuffer(buffRequest);\n    model._mapper.getVertexInput().addBuffer(buff, ['vertexBC']);\n    model._mapper.setNumberOfVertices(buff.getSizeInBytes() / buff.getStrideInBytes());\n    publicAPI.drawDepthRange(renNode, viewNode);\n  };\n  publicAPI.updateDepthPolyData = renNode => {\n    // check mtimes first\n    let update = false;\n    for (let i = 0; i < model.volumes.length; i++) {\n      const mtime = model.volumes[i].getMTime();\n      if (!model._lastMTimes[i] || mtime !== model._lastMTimes[i]) {\n        update = true;\n        model._lastMTimes[i] = mtime;\n      }\n    }\n\n    // also check stabilized time\n    const stime = renNode.getStabilizedTime();\n    if (model._lastMTimes.length <= model.volumes.length || stime !== model._lastMTimes[model.volumes.length]) {\n      update = true;\n      model._lastMTimes[model.volumes.length] = stime;\n    }\n\n    // if no need to update then return\n    if (!update) {\n      return;\n    }\n\n    // rebuild\n    const center = renNode.getStabilizedCenterByReference();\n    const numPts = model.volumes.length * 8;\n    const points = new Float64Array(numPts * 3);\n    const numTris = model.volumes.length * 12;\n    const polys = new Uint16Array(numTris * 4);\n\n    // add points and cells\n    for (let i = 0; i < model.volumes.length; i++) {\n      model.volumes[i].getBoundingCubePoints(points, i * 24);\n      let cellIdx = i * 12 * 4;\n      const offset = i * 8;\n      for (let t = 0; t < 12; t++) {\n        polys[cellIdx++] = 3;\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][0];\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][1];\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][2];\n      }\n    }\n    for (let p = 0; p < points.length; p += 3) {\n      points[p] -= center[0];\n      points[p + 1] -= center[1];\n      points[p + 2] -= center[2];\n    }\n    model._boundsPoly.getPoints().setData(points, 3);\n    model._boundsPoly.getPoints().modified();\n    model._boundsPoly.getPolys().setData(polys, 1);\n    model._boundsPoly.getPolys().modified();\n    model._boundsPoly.modified();\n  };\n  publicAPI.drawDepthRange = (renNode, viewNode) => {\n    // copy current depth buffer to\n    model._depthRangeTexture.resizeToMatch(model.colorTextureView.getTexture());\n    model._depthRangeTexture2.resizeToMatch(model.colorTextureView.getTexture());\n    model._depthRangeEncoder.attachTextureViews();\n    publicAPI.setCurrentOperation('volumeDepthRangePass');\n    renNode.setRenderEncoder(model._depthRangeEncoder);\n    renNode.volumeDepthRangePass(true);\n    model._mapper.setWebGPURenderer(renNode);\n    model._mapper.prepareToDraw(model._depthRangeEncoder);\n    model._mapper.registerDrawCallback(model._depthRangeEncoder);\n    renNode.volumeDepthRangePass(false);\n  };\n  publicAPI.createDepthRangeEncoder = viewNode => {\n    const device = viewNode.getDevice();\n    model._depthRangeEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'VolumePass DepthRange'\n    });\n    model._depthRangeEncoder.setPipelineHash('volr');\n    model._depthRangeEncoder.setReplaceShaderCodeFunction(pipeline => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor1');\n      fDesc.addOutput('vec4<f32>', 'outColor2');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor1 = vec4<f32>(input.fragPos.z, 0.0, 0.0, 0.0);', 'output.outColor2 = vec4<f32>(stopval, 0.0, 0.0, 0.0);']).result;\n      fDesc.setCode(code);\n    });\n    model._depthRangeEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        clearValue: [0.0, 0.0, 0.0, 0.0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }, {\n        view: null,\n        clearValue: [1.0, 1.0, 1.0, 1.0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n    });\n    model._depthRangeEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'r16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one',\n              operation: 'max'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one',\n              operation: 'max'\n            }\n          }\n        }, {\n          format: 'r16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one',\n              operation: 'min'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one',\n              operation: 'min'\n            }\n          }\n        }]\n      }\n    });\n\n    // and the textures it needs\n    model._depthRangeTexture = vtkWebGPUTexture.newInstance({\n      label: 'volumePassMaxDepth'\n    });\n    model._depthRangeTexture.create(device, {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'r16float',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n    });\n    const maxView = model._depthRangeTexture.createView('maxTexture');\n    model._depthRangeEncoder.setColorTextureView(0, maxView);\n    model._depthRangeTexture2 = vtkWebGPUTexture.newInstance({\n      label: 'volumePassDepthMin'\n    });\n    model._depthRangeTexture2.create(device, {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'r16float',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n    });\n    const minView = model._depthRangeTexture2.createView('minTexture');\n    model._depthRangeEncoder.setColorTextureView(1, minView);\n    model._mapper.setDevice(viewNode.getDevice());\n    model._mapper.setTextureViews([model.depthTextureView]);\n  };\n  publicAPI.createClearEncoder = viewNode => {\n    model._colorTexture = vtkWebGPUTexture.newInstance({\n      label: 'volumePassColor'\n    });\n    model._colorTexture.create(viewNode.getDevice(), {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'bgra8unorm',\n      /* eslint-disable no-undef */\n      /* eslint-disable no-bitwise */\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC\n    });\n    model._colorTextureView = model._colorTexture.createView('volumePassColorTexture');\n    model._colorTextureView.addSampler(viewNode.getDevice(), {\n      minFilter: 'linear',\n      magFilter: 'linear'\n    });\n    model._clearEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'VolumePass Clear'\n    });\n    model._clearEncoder.setColorTextureView(0, model._colorTextureView);\n    model._clearEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        clearValue: [0.0, 0.0, 0.0, 0.0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n    });\n    model._clearEncoder.setPipelineHash('volpf');\n    model._clearEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'bgra8unorm',\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n  publicAPI.createCopyEncoder = viewNode => {\n    model._copyEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'volumePassCopy'\n    });\n    model._copyEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n    model._copyEncoder.setPipelineHash('volcopypf');\n    model._copyEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'rgba16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n  publicAPI.createMergeEncoder = viewNode => {\n    model._mergeEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'volumePassMerge'\n    });\n    model._mergeEncoder.setColorTextureView(0, model._colorTextureView);\n    model._mergeEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n    model._mergeEncoder.setReplaceShaderCodeFunction(pipeline => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor = vec4<f32>(computedColor.rgb, computedColor.a);']).result;\n      fDesc.setCode(code);\n    });\n    model._mergeEncoder.setPipelineHash('volpf');\n    model._mergeEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'bgra8unorm',\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n\n  // marks modified when needed\n  publicAPI.setVolumes = val => {\n    if (!model.volumes || model.volumes.length !== val.length) {\n      model.volumes = [...val];\n      publicAPI.modified();\n      return;\n    }\n    for (let i = 0; i < val.length; i++) {\n      if (val[i] !== model.volumes[i]) {\n        model.volumes = [...val];\n        publicAPI.modified();\n        return;\n      }\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  colorTextureView: null,\n  depthTextureView: null,\n  volumes: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  model._mapper = vtkWebGPUSimpleMapper.newInstance();\n  model._mapper.setFragmentShaderTemplate(DepthBoundsFS);\n  model._mapper.getShaderReplacements().set('replaceShaderVolumePass', (hash, pipeline, vertexInput) => {\n    const fDesc = pipeline.getShaderDescription('fragment');\n    fDesc.addBuiltinInput('vec4<f32>', '@builtin(position) fragPos');\n  });\n  model._boundsPoly = vtkPolyData.newInstance();\n  model._lastMTimes = [];\n  macro.setGet(publicAPI, model, ['colorTextureView', 'depthTextureView']);\n\n  // Object methods\n  vtkWebGPUVolumePass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUVolumePass');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUVolumePass$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUVolumePass$1 as default, extend, newInstance };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}