{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport vtkXMLReader from './XMLReader.js';\nimport { m as macro } from '../../macros2.js';\nimport vtkImageData from '../../Common/DataModel/ImageData.js';\n\n// ----------------------------------------------------------------------------\n// vtkXMLImageDataReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkXMLImageDataReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkXMLImageDataReader');\n  publicAPI.parseXML = (rootElem, type, compressor, byteOrder, headerType) => {\n    const imageDataElem = rootElem.getElementsByTagName(model.dataType)[0];\n    const origin = imageDataElem.getAttribute('Origin').split(' ').map(t => Number(t));\n    const spacing = imageDataElem.getAttribute('Spacing').split(' ').map(t => Number(t));\n    const direction = imageDataElem.getAttribute('Direction')?.split(' ').map(t => Number(t));\n    const pieces = imageDataElem.getElementsByTagName('Piece');\n    const nbPieces = pieces.length;\n    for (let outputIndex = 0; outputIndex < nbPieces; outputIndex++) {\n      // Create image data\n      const piece = pieces[outputIndex];\n      const extent = piece.getAttribute('Extent').split(' ').map(t => Number(t));\n      const imageData = vtkImageData.newInstance({\n        origin,\n        spacing,\n        direction,\n        extent\n      });\n\n      // Fill data\n      vtkXMLReader.processFieldData(imageData.getNumberOfPoints(), piece.getElementsByTagName('PointData')[0], imageData.getPointData(), compressor, byteOrder, headerType, model.binaryBuffer);\n      vtkXMLReader.processFieldData(imageData.getNumberOfCells(), piece.getElementsByTagName('CellData')[0], imageData.getCellData(), compressor, byteOrder, headerType, model.binaryBuffer);\n\n      // Add new output\n      model.output[outputIndex] = imageData;\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  dataType: 'ImageData'\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkXMLReader.extend(publicAPI, model, initialValues);\n  vtkXMLImageDataReader(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkXMLImageDataReader');\n\n// ----------------------------------------------------------------------------\n\nvar vtkXMLImageDataReader$1 = {\n  newInstance,\n  extend\n};\nexport { vtkXMLImageDataReader$1 as default, extend, newInstance };","map":{"version":3,"names":["vtkXMLReader","m","macro","vtkImageData","vtkXMLImageDataReader","publicAPI","model","classHierarchy","push","parseXML","rootElem","type","compressor","byteOrder","headerType","imageDataElem","getElementsByTagName","dataType","origin","getAttribute","split","map","t","Number","spacing","direction","pieces","nbPieces","length","outputIndex","piece","extent","imageData","newInstance","processFieldData","getNumberOfPoints","getPointData","binaryBuffer","getNumberOfCells","getCellData","output","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","vtkXMLImageDataReader$1","default"],"sources":["C:/Users/Malcolm/Projects/Web/TickerWeb/node_modules/@kitware/vtk.js/IO/XML/XMLImageDataReader.js"],"sourcesContent":["import vtkXMLReader from './XMLReader.js';\nimport { m as macro } from '../../macros2.js';\nimport vtkImageData from '../../Common/DataModel/ImageData.js';\n\n// ----------------------------------------------------------------------------\n// vtkXMLImageDataReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkXMLImageDataReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkXMLImageDataReader');\n  publicAPI.parseXML = (rootElem, type, compressor, byteOrder, headerType) => {\n    const imageDataElem = rootElem.getElementsByTagName(model.dataType)[0];\n    const origin = imageDataElem.getAttribute('Origin').split(' ').map(t => Number(t));\n    const spacing = imageDataElem.getAttribute('Spacing').split(' ').map(t => Number(t));\n    const direction = imageDataElem.getAttribute('Direction')?.split(' ').map(t => Number(t));\n    const pieces = imageDataElem.getElementsByTagName('Piece');\n    const nbPieces = pieces.length;\n    for (let outputIndex = 0; outputIndex < nbPieces; outputIndex++) {\n      // Create image data\n      const piece = pieces[outputIndex];\n      const extent = piece.getAttribute('Extent').split(' ').map(t => Number(t));\n      const imageData = vtkImageData.newInstance({\n        origin,\n        spacing,\n        direction,\n        extent\n      });\n\n      // Fill data\n      vtkXMLReader.processFieldData(imageData.getNumberOfPoints(), piece.getElementsByTagName('PointData')[0], imageData.getPointData(), compressor, byteOrder, headerType, model.binaryBuffer);\n      vtkXMLReader.processFieldData(imageData.getNumberOfCells(), piece.getElementsByTagName('CellData')[0], imageData.getCellData(), compressor, byteOrder, headerType, model.binaryBuffer);\n\n      // Add new output\n      model.output[outputIndex] = imageData;\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  dataType: 'ImageData'\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkXMLReader.extend(publicAPI, model, initialValues);\n  vtkXMLImageDataReader(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkXMLImageDataReader');\n\n// ----------------------------------------------------------------------------\n\nvar vtkXMLImageDataReader$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkXMLImageDataReader$1 as default, extend, newInstance };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}