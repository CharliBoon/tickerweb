{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nimport { ref, unref, onMounted, onBeforeUnmount, watchEffect, watch } from 'vue';\n// vtk\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry'; // geometry rendering for WebGL, WebGPU\nimport '@kitware/vtk.js/Rendering/Profiles/Glyph'; // vtkGlyph3DMapper\nimport '@kitware/vtk.js/Rendering/Profiles/Molecule'; // vtkSphereMapper\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\n//\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkXMLImageDataReader from '@kitware/vtk.js/IO/XML/XMLImageDataReader';\nimport vtkGlyph3DMapper from '@kitware/vtk.js/Rendering/Core/Glyph3DMapper';\nimport vtkCubeSource from '@kitware/vtk.js/Filters/Sources/CubeSource';\nimport vtkSphereMapper from '@kitware/vtk.js/Rendering/Core/SphereMapper';\nimport vtkImageMarchingCubes from '@kitware/vtk.js/Filters/General/ImageMarchingCubes';\nimport vtkOutlineFilter from '@kitware/vtk.js/Filters/General/OutlineFilter';\n//\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkPoints from '@kitware/vtk.js/Common/Core/Points';\nimport vtkCellArray from '@kitware/vtk.js/Common/Core/CellArray';\nimport vtkLookupTable from '@kitware/vtk.js/Common/Core/LookupTable';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nexport default {\n  setup() {\n    const url = new URL(window.location.href);\n    const queryParams = new URLSearchParams(url.search);\n    console.log('queryParams');\n    console.log(queryParams);\n    const session = {\n      user: 'malcolm',\n      mine: 'Bambanani'\n    };\n    //const session = {user: 'malcolm', mine:'Skorrosh'}       \n    let nodes = {\n      'data': [],\n      'meta': {}\n    }; // node data - response getNodes - for table, polydata\n    let events = {\n      'data': [],\n      'meta': {}\n    }; // event data - response getEvents - for table, polydata\n\n    let bounds = null; // new Array(6).fill(0.0)\n\n    const vtkContainer = ref(null);\n    const context = ref(null);\n    const node_representation = ref(0);\n    const events_opacity = ref(50);\n    const events_timestamp = ref(0);\n    const events_timestamp_min = ref(0);\n    const events_timestamp_max = ref(0);\n    const plan_opacity = ref(100);\n    const plan_representation = ref(1);\n    const volume_opacity = ref(15);\n    const volume_iso = ref(2500);\n    const volume_min = ref(0);\n    const volume_max = ref(0);\n    const textEncoder = new TextEncoder();\n    //const path = 'http://localhost:5000';\n    const path = 'http://192.168.0.2:5000';\n\n    // nodes\n    const node_lut = vtkLookupTable.newInstance(); // make custom LUT\n    const data = new Uint8Array([0, 255, 0, 255, 255, 165, 80, 255, 255, 0, 0, 255]); // RGBA: green, orange, red\n    const table = vtkDataArray.newInstance({\n      values: data,\n      numberOfComponents: 4\n    }); // to VTK\n    node_lut.setTable(table); // LUT = green, orange, red\n\n    const node_glyph = vtkCubeSource.newInstance();\n    const node_mapper = vtkGlyph3DMapper.newInstance();\n    const node_actor = vtkActor.newInstance();\n    //\n    node_mapper.setScalarModeToUsePointData();\n    node_mapper.setScalarVisibility(true);\n    node_mapper.setScalarRange(1, 3);\n    node_mapper.setLookupTable(node_lut);\n    node_mapper.setScaleFactor(10.0);\n    node_actor.setMapper(node_mapper);\n    //node_actor.getProperty().setAmbient(0.5)\n\n    // plan\n    const plan_reader = vtkXMLPolyDataReader.newInstance();\n    const plan_mapper = vtkMapper.newInstance();\n    const plan_actor = vtkActor.newInstance();\n    //\n    plan_mapper.setInputConnection(plan_reader.getOutputPort());\n    plan_actor.setMapper(plan_mapper);\n    plan_actor.getProperty().setOpacity(0.25);\n    plan_actor.getProperty().setColor(0.5, 0.5, 0.5);\n\n    // volume\n    const volume_reader = vtkXMLImageDataReader.newInstance();\n    const volume_mapper = vtkMapper.newInstance();\n    const volume_actor = vtkActor.newInstance();\n    //\n    const marchingCube = vtkImageMarchingCubes.newInstance({\n      contourValue: 2500.0,\n      computeNormals: false,\n      mergePoints: false\n    });\n    //volume_mapper.setInputConnection(volume_reader.getOutputPort());\n    marchingCube.setInputConnection(volume_reader.getOutputPort());\n    volume_mapper.setInputConnection(marchingCube.getOutputPort());\n    volume_actor.setMapper(volume_mapper);\n    //volume_actor.getProperty().setOpacity(0.25)\n    //volume_actor.getProperty().setRepresentationToWireframe()\n    volume_actor.getProperty().setColor(0.5, 1.0, 1.0);\n    const outline = vtkOutlineFilter.newInstance();\n    const outline_mapper = vtkMapper.newInstance();\n    const outline_actor = vtkActor.newInstance();\n    outline.setInputConnection(volume_reader.getOutputPort());\n    outline_mapper.setInputConnection(outline.getOutputPort());\n    outline_actor.setMapper(outline_mapper);\n    outline_actor.getProperty().setColor(0.0, 0.0, 0.0);\n\n    // events\n    const events_reader = vtkXMLPolyDataReader.newInstance();\n    const events_mapper = vtkSphereMapper.newInstance();\n    const events_actor = vtkActor.newInstance();\n    //\n    events_mapper.setInputConnection(events_reader.getOutputPort());\n    events_mapper.setScaleFactor(100.0);\n    events_mapper.setScaleArray('scale');\n    events_mapper.setScalarVisibility(true);\n    events_mapper.setScalarModeToUsePointData();\n    events_actor.setMapper(events_mapper);\n    events_actor.getProperty().setOpacity(0.5);\n    function setNodeRepresentation(rep) {\n      node_representation.value = Number(rep);\n    }\n    function setEventOpacity(opacity) {\n      events_opacity.value = Number(opacity);\n    }\n    function setEventTimeStamp(res) {\n      events_timestamp.value = Number(res);\n    }\n    function setPlanOpacity(opacity) {\n      plan_opacity.value = Number(opacity);\n    }\n    function setPlanRepresentation(rep) {\n      plan_representation.value = Number(rep);\n    }\n    async function onEventFilter(timestamp) {\n      const {\n        renderWindow\n      } = context.value;\n      filterEventData(timestamp);\n      renderWindow.render();\n    }\n    function setVolumeOpacity(opacity) {\n      volume_opacity.value = Number(opacity);\n    }\n    function setVolumeIso(iso) {\n      volume_iso.value = Number(iso);\n    }\n    async function onVolumeIso(iso_value) {\n      const {\n        renderWindow\n      } = context.value;\n      marchingCube.setContourValue(iso_value);\n      renderWindow.render();\n    }\n\n    // provide data to vtk pipelines ------------------------------------------\n\n    // nodes\n\n    function getNodes(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/nodes', args).then(response_get => {\n          nodes = response_get.data;\n          const pd = newPolyDataFromNodes(nodes);\n          node_mapper.setInputData(pd, 0);\n          node_mapper.setInputData(node_glyph.getOutputData(), 1);\n          resolve('nodes_data');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    function newPolyDataFromNodes(nodes) {\n      const nodes_data = nodes['data'];\n      const points = vtkPoints.newInstance();\n      points.setNumberOfPoints(nodes_data.length);\n      const arr_alerts = new Float32Array(nodes_data.length);\n      const arr_verts = [];\n      nodes_data.forEach((node, index) => {\n        arr_alerts[index] = node.alert;\n        arr_verts.push(1, index);\n        points.setPoint(index, node.x, node.y, node.z);\n      });\n      const alerts = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_alerts,\n        name: 'alerts'\n      });\n      const verts = vtkCellArray.newInstance({\n        values: Uint16Array.from(arr_verts)\n      });\n      const pd = vtkPolyData.newInstance();\n      pd.setPoints(points);\n      pd.setVerts(verts);\n      pd.getPointData().setScalars(alerts);\n      return pd;\n    }\n\n    // plan\n\n    function getPlan(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/plan_vtk', args).then(response_get => {\n          plan_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n          resolve('plan');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n\n    // volume\n\n    function getVolume(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/volume_vtk', args).then(response_get => {\n          console.log('volume');\n          console.log(typeof response_get.data);\n          volume_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n          //console.log(typeof(volume_reader.getOutputDataObject(0)))\n          resolve('volume');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n\n    // events\n\n    function getEvents(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/events', args).then(response_get => {\n          events = response_get.data;\n          const pd = newPolyDataFromEvents(events);\n          events_mapper.setInputData(pd);\n          resolve('events_data');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    function filterEventData(timestamp) {\n      const events_data = events.data.filter(event => {\n        return event.timestamp > timestamp;\n      });\n      const pd = newPolyDataFromEvents({\n        'meta': events.meta,\n        'data': events_data\n      });\n      events_mapper.setInputData(pd);\n    }\n    function newPolyDataFromEvents(events) {\n      const events_data = events.data;\n      const points = vtkPoints.newInstance();\n      points.setNumberOfPoints(events_data.length);\n      const arr_mags = new Float32Array(events_data.length);\n      const arr_timestamp = new Float32Array(events_data.length);\n      const arr_scale = new Float32Array(events_data.length);\n      const arr_verts = [];\n      const offset = 1.0;\n      const min_mag = events['meta'].min_mag;\n      const max_mag = events['meta'].max_mag;\n      events_data.forEach((event_data, index) => {\n        arr_mags[index] = event_data.mag;\n        arr_scale[index] = (offset - min_mag + event_data.mag) / (offset - min_mag + max_mag);\n        arr_timestamp[index] = event_data.timestamp;\n        arr_verts.push(1, index);\n        points.setPoint(index, event_data.x, event_data.y, event_data.z);\n      });\n      const mags = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_mags,\n        name: 'mags'\n      });\n      const scale = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_scale,\n        name: 'scale'\n      });\n      const timestamp = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_timestamp,\n        name: 'timestamp'\n      });\n      const verts = vtkCellArray.newInstance({\n        values: Uint16Array.from(arr_verts)\n      });\n      const pd = vtkPolyData.newInstance();\n      pd.setPoints(points);\n      pd.setVerts(verts);\n      pd.getPointData().addArray(mags);\n      pd.getPointData().addArray(scale);\n      pd.getPointData().addArray(timestamp);\n      pd.getPointData().setActiveAttributeByName('timestamp', 0); // scalars\n      return pd;\n    }\n\n    // all --------------------------------------------------------------------\n\n    async function getAllAndRender() {\n      const {\n        renderWindow,\n        renderer\n      } = context.value;\n      await getNodes({\n        mine: session.mine\n      });\n      console.log('nodes nPts: ' + String(node_mapper.getInputData().getNumberOfPoints()));\n      if (node_mapper.getInputData().getNumberOfPoints() > 0) {\n        bounds = node_mapper.getInputData().getBounds();\n        //console.log('nodes nPts: ' + String(node_mapper.getInputData().getNumberOfPoints()))\n        console.log(bounds);\n        const buffer = 1000.0;\n        bounds[0] -= buffer;\n        bounds[1] += buffer;\n        bounds[2] -= buffer;\n        bounds[3] += buffer;\n        bounds[4] -= buffer;\n        bounds[5] += buffer;\n      } else {\n        bounds = null;\n      }\n      await getVolume({\n        mine: session.mine\n      });\n      if (outline_mapper.getInputData().getNumberOfPoints() > 0 && node_mapper.getInputData().getNumberOfPoints() === 0) {\n        bounds = outline_mapper.getInputData().getBounds();\n        //console.log('nodes nPts: ' + String(node_mapper.getInputData().getNumberOfPoints()))\n        console.log(bounds);\n        const buffer = 1000.0;\n        bounds[0] -= buffer;\n        bounds[1] += buffer;\n        bounds[2] -= buffer;\n        bounds[3] += buffer;\n        bounds[4] -= buffer;\n        bounds[5] += buffer;\n      }\n      //\n      //Promise.allSettled([getPlan({bounds: bounds, mine: session.mine}), getEvents({bounds: bounds, mine: session.mine, timestamp: 0.0}), getVolume({mine: session.mine})]).then(() => {\n      Promise.allSettled([getPlan({\n        bounds: bounds,\n        mine: session.mine\n      }), getEvents({\n        bounds: bounds,\n        mine: session.mine,\n        timestamp: 0.0\n      })]).then(() => {\n        const range = events_mapper.getInputData().getPointData().getScalars().getRange();\n        events_timestamp_min.value = range[0];\n        events_timestamp_max.value = range[1];\n        events_timestamp.value = range[0];\n        events_mapper.setScalarRange(range);\n        //\n        const volume_range = volume_reader.getOutputData().getPointData().getScalars().getRange();\n        volume_min.value = volume_range[0];\n        volume_max.value = volume_range[1];\n        volume_iso.value = (volume_range[0] + volume_range[1]) / 2;\n        volume_mapper.setScalarRange(volume_range);\n        //\t\t\n        renderer.resetCamera();\n        renderWindow.render();\n      });\n    }\n    function checkModified() {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/modified', {\n          mine: session.mine\n        }).then(response_get => {\n          console.log(response_get.data);\n          resolve('plan');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    watch(events_timestamp, newValue => {\n      onEventFilter(newValue);\n    });\n    watch(volume_iso, newValue => {\n      onVolumeIso(newValue);\n    });\n    watchEffect(() => {\n      if (context.value) {\n        const {\n          renderWindow\n        } = context.value;\n        console.log(unref(node_representation));\n        node_mapper.setScaleMode(unref(node_representation));\n        node_mapper.update();\n        plan_actor.getProperty().setOpacity(unref(plan_opacity) * 0.01);\n        plan_actor.getProperty().setRepresentation(unref(plan_representation));\n        events_actor.getProperty().setOpacity(unref(events_opacity) * 0.01);\n        volume_actor.getProperty().setOpacity(unref(volume_opacity) * 0.01);\n        renderWindow.render();\n      }\n    });\n    onMounted(() => {\n      console.log('onMounted');\n      if (!context.value) {\n        const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value\n        });\n        const renderer = fullScreenRenderer.getRenderer();\n        const renderWindow = fullScreenRenderer.getRenderWindow();\n        //\n        renderer.setBackground(1.0, 1.0, 1.0);\n        renderer.setUseDepthPeeling(true); // depth peeling\n        renderer.setMaximumNumberOfPeels(100); // depth peeling\n        renderer.setOcclusionRatio(0.01); // depth peeling\n        //\n        renderer.addActor(node_actor);\n        renderer.addActor(plan_actor);\n        renderer.addActor(events_actor);\n        renderer.addActor(volume_actor);\n        renderer.addActor(outline_actor);\n        context.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          //\n          node_actor,\n          node_mapper,\n          node_glyph,\n          //\n          events_actor,\n          events_mapper,\n          //\n          plan_reader,\n          plan_mapper,\n          plan_actor,\n          //\n          volume_reader,\n          volume_mapper,\n          volume_actor,\n          outline,\n          outline_mapper,\n          outline_actor\n        };\n\n        // render all and start monitoring for changes to incoming datasets\n        getAllAndRender();\n        setInterval(checkModified, 30000);\n      }\n    });\n    onBeforeUnmount(() => {\n      if (context.value) {\n        const {\n          renderer,\n          renderWindow,\n          fullScreenRenderer,\n          node_actor,\n          node_mapper,\n          node_glyph,\n          plan_reader,\n          plan_actor,\n          plan_mapper,\n          events_actor,\n          events_mapper,\n          volume_reader,\n          volume_mapper,\n          volume_actor\n        } = context.value;\n        renderer.removeAllActors();\n        plan_actor.delete();\n        plan_mapper.delete();\n        plan_reader.delete();\n        node_actor.delete();\n        node_mapper.delete();\n        node_glyph.delete();\n        events_actor.delete();\n        events_mapper.delete();\n        volume_actor.delete();\n        volume_mapper.delete();\n        volume_reader.delete();\n\n        //\n        renderer.delete();\n        renderWindow.delete();\n        //\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n    return {\n      vtkContainer,\n      setNodeRepresentation,\n      setEventOpacity,\n      setEventTimeStamp,\n      setPlanOpacity,\n      setPlanRepresentation,\n      plan_opacity,\n      plan_representation,\n      events_timestamp,\n      events_timestamp_min,\n      events_timestamp_max,\n      events_opacity,\n      node_representation,\n      volume_opacity,\n      setVolumeOpacity,\n      volume_iso,\n      volume_min,\n      volume_max,\n      setVolumeIso\n    };\n  }\n};","map":{"version":3,"names":["axios","ref","unref","onMounted","onBeforeUnmount","watchEffect","watch","vtkFullScreenRenderWindow","vtkActor","vtkMapper","vtkXMLPolyDataReader","vtkXMLImageDataReader","vtkGlyph3DMapper","vtkCubeSource","vtkSphereMapper","vtkImageMarchingCubes","vtkOutlineFilter","vtkPolyData","vtkPoints","vtkCellArray","vtkLookupTable","vtkDataArray","setup","url","URL","window","location","href","queryParams","URLSearchParams","search","console","log","session","user","mine","nodes","events","bounds","vtkContainer","context","node_representation","events_opacity","events_timestamp","events_timestamp_min","events_timestamp_max","plan_opacity","plan_representation","volume_opacity","volume_iso","volume_min","volume_max","textEncoder","TextEncoder","path","node_lut","newInstance","data","Uint8Array","table","values","numberOfComponents","setTable","node_glyph","node_mapper","node_actor","setScalarModeToUsePointData","setScalarVisibility","setScalarRange","setLookupTable","setScaleFactor","setMapper","plan_reader","plan_mapper","plan_actor","setInputConnection","getOutputPort","getProperty","setOpacity","setColor","volume_reader","volume_mapper","volume_actor","marchingCube","contourValue","computeNormals","mergePoints","outline","outline_mapper","outline_actor","events_reader","events_mapper","events_actor","setScaleArray","setNodeRepresentation","rep","value","Number","setEventOpacity","opacity","setEventTimeStamp","res","setPlanOpacity","setPlanRepresentation","onEventFilter","timestamp","renderWindow","filterEventData","render","setVolumeOpacity","setVolumeIso","iso","onVolumeIso","iso_value","setContourValue","getNodes","args","Promise","resolve","reject","put","then","response_get","pd","newPolyDataFromNodes","setInputData","getOutputData","catch","error","nodes_data","points","setNumberOfPoints","length","arr_alerts","Float32Array","arr_verts","forEach","node","index","alert","push","setPoint","x","y","z","alerts","name","verts","Uint16Array","from","setPoints","setVerts","getPointData","setScalars","getPlan","parseAsArrayBuffer","encode","getVolume","getEvents","newPolyDataFromEvents","events_data","filter","event","meta","arr_mags","arr_timestamp","arr_scale","offset","min_mag","max_mag","event_data","mag","mags","scale","addArray","setActiveAttributeByName","getAllAndRender","renderer","String","getInputData","getNumberOfPoints","getBounds","buffer","allSettled","range","getScalars","getRange","volume_range","resetCamera","checkModified","newValue","setScaleMode","update","setRepresentation","fullScreenRenderer","rootContainer","getRenderer","getRenderWindow","setBackground","setUseDepthPeeling","setMaximumNumberOfPeels","setOcclusionRatio","addActor","setInterval","removeAllActors","delete"],"sources":["C:\\Users\\Malcolm\\Projects\\Web\\TickerWeb\\TickerWeb_Vue\\src\\components\\TickerVTK.vue"],"sourcesContent":["<template>\n  <div>\n    <div ref=\"vtkContainer\" />\n    <table class=\"controls\">\n      <tbody>\n        <tr>\n          <td style=\"text-align:left\"><b>Nodes</b></td>\n          <td style=\"text-align:left\"> </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Representation</td>\n          <td>\n            <select\n              style=\"width: 100%\"\n              :value=\"node_representation\"\n              @change=\"setNodeRepresentation($event.target.value)\"\n            >\n              <option value=\"0\">Unscaled</option>\n              <option value=\"1\">Scaled</option>\n            </select>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"text-align:left\"><b>Events</b></td>\n          <td style=\"text-align:left\"> </td>\n        </tr>\n        <tr>\n          <td style=\"text-align:left\">TimeStamp</td>\n          <td>\n            <input\n              type=\"range\"\n              :min=\"events_timestamp_min\"\n              :max=\"events_timestamp_max\"\n              :value=\"events_timestamp\"\n              @input=\"setEventTimeStamp($event.target.value)\"\n            />\n          </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Opacity</td>\n          <td>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              :value=\"events_opacity\"\n              @input=\"setEventOpacity($event.target.value)\"\n            />\n          </td>\n        </tr>\t\t\n        <tr>\n          <td style=\"text-align:left\"><b>Plan</b></td>\n          <td style=\"text-align:left\"> </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Opacity</td>\n          <td>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              :value=\"plan_opacity\"\n              @input=\"setPlanOpacity($event.target.value)\"\n            />\n          </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Representation</td>\n          <td>\n            <select\n              style=\"width: 100%\"\n              :value=\"plan_representation\"\n              @change=\"setPlanRepresentation($event.target.value)\"\n            >\n              <option value=\"0\">Points</option>\n              <option value=\"1\">Wireframe</option>\n            </select>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"text-align:left\"><b>Volume</b></td>\n          <td style=\"text-align:left\"> </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Iso Value</td>\n          <td>\n            <input\n              type=\"range\"\n              :min=\"volume_min\"\n              :max=\"volume_max\"\n              :value=\"volume_iso\"\n              @input=\"setVolumeIso($event.target.value)\"\n            />\n          </td>\n        </tr>\t\t\n\t\t<tr>\n          <td style=\"text-align:left\">Opacity</td>\n          <td>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              :value=\"volume_opacity\"\n              @input=\"setVolumeOpacity($event.target.value)\"\n            />\n          </td>\n        </tr>\t\t\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ref, unref, onMounted, onBeforeUnmount, watchEffect, watch } from 'vue';\n// vtk\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry'; // geometry rendering for WebGL, WebGPU\nimport '@kitware/vtk.js/Rendering/Profiles/Glyph';    // vtkGlyph3DMapper\nimport '@kitware/vtk.js/Rendering/Profiles/Molecule'; // vtkSphereMapper\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkActor                  from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper                 from '@kitware/vtk.js/Rendering/Core/Mapper';\n//\nimport vtkXMLPolyDataReader      from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkXMLImageDataReader     from '@kitware/vtk.js/IO/XML/XMLImageDataReader';\nimport vtkGlyph3DMapper          from '@kitware/vtk.js/Rendering/Core/Glyph3DMapper'; \nimport vtkCubeSource             from '@kitware/vtk.js/Filters/Sources/CubeSource';\nimport vtkSphereMapper           from '@kitware/vtk.js/Rendering/Core/SphereMapper';\nimport vtkImageMarchingCubes     from '@kitware/vtk.js/Filters/General/ImageMarchingCubes';\nimport vtkOutlineFilter          from '@kitware/vtk.js/Filters/General/OutlineFilter';\n//\nimport vtkPolyData               from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkPoints                 from '@kitware/vtk.js/Common/Core/Points';\nimport vtkCellArray              from '@kitware/vtk.js/Common/Core/CellArray'\nimport vtkLookupTable            from '@kitware/vtk.js/Common/Core/LookupTable';\nimport vtkDataArray              from '@kitware/vtk.js/Common/Core/DataArray';\n\nexport default {\n\n  setup() {\n\t  \n    const url = new URL(window.location.href);\n    const queryParams = new URLSearchParams(url.search);\n    console.log('queryParams')\n    console.log(queryParams)\n\t\n  \n    const session = {user: 'malcolm', mine:'Bambanani'}\n    //const session = {user: 'malcolm', mine:'Skorrosh'}       \n    let nodes = {'data':[], 'meta':{}} // node data - response getNodes - for table, polydata\n    let events = {'data':[], 'meta':{}} // event data - response getEvents - for table, polydata\n\t\n\tlet bounds = null // new Array(6).fill(0.0)\n\t\n\tconst vtkContainer = ref(null);\n    const context = ref(null);\n\n    const node_representation  = ref(0);    \n\tconst events_opacity       = ref(50);\n    const events_timestamp     = ref(0);\n    const events_timestamp_min = ref(0);\n    const events_timestamp_max = ref(0);\n\tconst plan_opacity         = ref(100);\n    const plan_representation  = ref(1);\n    const volume_opacity       = ref(15);\n\tconst volume_iso           = ref(2500);\n    const volume_min           = ref(0);\n    const volume_max           = ref(0);\n\t\n    const textEncoder = new TextEncoder();\n    //const path = 'http://localhost:5000';\n\tconst path = 'http://192.168.0.2:5000';\n    \n\t// nodes\n\tconst node_lut = vtkLookupTable.newInstance(); // make custom LUT\n    const data = new Uint8Array([0, 255, 0, 255, 255, 165, 80, 255, 255, 0, 0, 255]); // RGBA: green, orange, red\n    const table = vtkDataArray.newInstance({values: data, numberOfComponents: 4}); // to VTK\n    node_lut.setTable(table); // LUT = green, orange, red\n\n\tconst node_glyph = vtkCubeSource.newInstance();\n\tconst node_mapper = vtkGlyph3DMapper.newInstance();\n\tconst node_actor = vtkActor.newInstance();\n\t//\n\tnode_mapper.setScalarModeToUsePointData()\n\tnode_mapper.setScalarVisibility(true)\n\tnode_mapper.setScalarRange(1, 3)\n    node_mapper.setLookupTable(node_lut)\n\tnode_mapper.setScaleFactor(10.0)\n    node_actor.setMapper(node_mapper)\n\t//node_actor.getProperty().setAmbient(0.5)\n\t\n\t// plan\n\tconst plan_reader = vtkXMLPolyDataReader.newInstance();\n\tconst plan_mapper = vtkMapper.newInstance();\n\tconst plan_actor  = vtkActor.newInstance();\n\t//\n\tplan_mapper.setInputConnection(plan_reader.getOutputPort());\n\tplan_actor.setMapper(plan_mapper)\n\tplan_actor.getProperty().setOpacity(0.25)\n\tplan_actor.getProperty().setColor(0.5, 0.5, 0.5)\n\t\n\t// volume\n\tconst volume_reader = vtkXMLImageDataReader.newInstance();\n\tconst volume_mapper = vtkMapper.newInstance();\n\tconst volume_actor  = vtkActor.newInstance();\n\t//\n    const marchingCube = vtkImageMarchingCubes.newInstance({\n      contourValue: 2500.0,\n      computeNormals: false,\n      mergePoints: false,\n    });\n\t//volume_mapper.setInputConnection(volume_reader.getOutputPort());\n\tmarchingCube.setInputConnection(volume_reader.getOutputPort())\n    volume_mapper.setInputConnection(marchingCube.getOutputPort());\n\tvolume_actor.setMapper(volume_mapper)\n\t//volume_actor.getProperty().setOpacity(0.25)\n\t//volume_actor.getProperty().setRepresentationToWireframe()\n\tvolume_actor.getProperty().setColor(0.5, 1.0, 1.0)\n\t\n\tconst outline = vtkOutlineFilter.newInstance()\n    const outline_mapper = vtkMapper.newInstance();\n\tconst outline_actor  = vtkActor.newInstance();\n\t\n\toutline.setInputConnection(volume_reader.getOutputPort())\n    outline_mapper.setInputConnection(outline.getOutputPort());\n    outline_actor.setMapper(outline_mapper)\n\toutline_actor.getProperty().setColor(0.0, 0.0, 0.0)\n\t\n\t\n\t// events\n\tconst events_reader = vtkXMLPolyDataReader.newInstance();\n    const events_mapper = vtkSphereMapper.newInstance();\n\tconst events_actor  = vtkActor.newInstance();\n\t//\n\tevents_mapper.setInputConnection(events_reader.getOutputPort())\n\tevents_mapper.setScaleFactor(100.0);\n    events_mapper.setScaleArray('scale');\n\tevents_mapper.setScalarVisibility(true);\n\tevents_mapper.setScalarModeToUsePointData()\n\tevents_actor.setMapper(events_mapper)\n\tevents_actor.getProperty().setOpacity(0.5)\n\t\n    function setNodeRepresentation(rep) {\n      node_representation.value = Number(rep);\n    }\n\n\tfunction setEventOpacity(opacity) {\n      events_opacity.value = Number(opacity);\n    }\n\t\n    function setEventTimeStamp(res) {\n      events_timestamp.value = Number(res);\n    }\n\t\n\tfunction setPlanOpacity(opacity) {\n      plan_opacity.value = Number(opacity);\n    }\n\n    function setPlanRepresentation(rep) {\n      plan_representation.value = Number(rep);\n    }\n\t\n    async function onEventFilter(timestamp) {\n      const {renderWindow} = context.value\n      filterEventData(timestamp)\n      renderWindow.render()\n\t}\n\t\n    function setVolumeOpacity(opacity) {\n      volume_opacity.value = Number(opacity);\n    }\n\t\n\tfunction setVolumeIso(iso) {\n      volume_iso.value = Number(iso);\n    }\n\t\n\tasync function onVolumeIso(iso_value) {\n      const {renderWindow} = context.value\n      marchingCube.setContourValue(iso_value)\n      renderWindow.render()\n\t}\n\t\n\t// provide data to vtk pipelines ------------------------------------------\n\t\n\t// nodes\n\t\n\tfunction getNodes(args={}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/nodes', args)\n          .then((response_get) => {\n\t\t\tnodes = response_get.data\n            const pd = newPolyDataFromNodes(nodes)\n\t\t\tnode_mapper.setInputData(pd,0)\n\t\t\tnode_mapper.setInputData(node_glyph.getOutputData(),1)\n            resolve('nodes_data')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n\tfunction newPolyDataFromNodes(nodes) {\n      const nodes_data = nodes['data']\n      const points = vtkPoints.newInstance()\n      points.setNumberOfPoints(nodes_data.length)\n      const arr_alerts = new Float32Array(nodes_data.length)\n      const arr_verts = []\n      \n      nodes_data.forEach((node, index) => {\n        arr_alerts[index] = node.alert\n        arr_verts.push(1,index)\n        points.setPoint(index, node.x, node.y, node.z);\n      })\n      const alerts = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_alerts,\n        name: 'alerts',\n      })\n      const verts = vtkCellArray.newInstance({values: Uint16Array.from(arr_verts)})\n      const pd = vtkPolyData.newInstance()\n      pd.setPoints(points)\n      pd.setVerts(verts)\n      pd.getPointData().setScalars(alerts)\n      return pd\n    }\n\t\n\t// plan\n\t\n\tfunction getPlan(args={}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/plan_vtk', args)\n          .then((response_get) => {\n            plan_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data))\t\t  \n            resolve('plan')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n\t// volume\n\t\n\tfunction getVolume(args={}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/volume_vtk', args)\n          .then((response_get) => {\n            console.log('volume')\n\t\t\tconsole.log(typeof(response_get.data))\n            volume_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data))\t\n\t\t\t//console.log(typeof(volume_reader.getOutputDataObject(0)))\n            resolve('volume')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n\t// events\n\t\n\tfunction getEvents(args={}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/events', args)\n          .then((response_get) => {\n\t\t\tevents = response_get.data\n            const pd = newPolyDataFromEvents(events)\n\t\t\tevents_mapper.setInputData(pd)\n            resolve('events_data')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n\tfunction filterEventData(timestamp) {\n      const events_data = events.data.filter((event) => {\n        return event.timestamp > timestamp\n        }\n      )\n      const pd = newPolyDataFromEvents({'meta':events.meta, 'data':events_data})\n      events_mapper.setInputData(pd)\n    }\n\t\n\tfunction newPolyDataFromEvents(events) {\n      const events_data = events.data\n      const points = vtkPoints.newInstance()\n      points.setNumberOfPoints(events_data.length)\n      const arr_mags = new Float32Array(events_data.length)\n      const arr_timestamp = new Float32Array(events_data.length)\n      const arr_scale = new Float32Array(events_data.length)\n      const arr_verts = []\n      \n      const offset = 1.0\n      const min_mag = events['meta'].min_mag\n      const max_mag = events['meta'].max_mag\n      \n      events_data.forEach((event_data, index) => {\n        arr_mags[index] = event_data.mag\n        arr_scale[index] = (offset - min_mag + event_data.mag)/(offset - min_mag + max_mag)\n        arr_timestamp[index] = event_data.timestamp\n        arr_verts.push(1,index)\n        points.setPoint(index, event_data.x, event_data.y, event_data.z);\n      })\n      const mags = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_mags,\n        name: 'mags',\n      })\n      const scale = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_scale,\n        name: 'scale',\n      })\n      const timestamp = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_timestamp,\n        name: 'timestamp',\n      })\n      const verts = vtkCellArray.newInstance({values: Uint16Array.from(arr_verts)})\n      const pd = vtkPolyData.newInstance()\n      pd.setPoints(points)\n      pd.setVerts(verts)\n      pd.getPointData().addArray(mags)\n      pd.getPointData().addArray(scale)\n      pd.getPointData().addArray(timestamp)\n      pd.getPointData().setActiveAttributeByName('timestamp', 0) // scalars\n      return pd   \t\n    }\n\t\n\t// all --------------------------------------------------------------------\n\t\n    async function getAllAndRender() {\n      const {renderWindow, renderer} = context.value\n      await getNodes({mine: session.mine})\n      console.log('nodes nPts: ' + String(node_mapper.getInputData().getNumberOfPoints()))\n      if (node_mapper.getInputData().getNumberOfPoints() > 0) {\n        bounds = node_mapper.getInputData().getBounds()\n        //console.log('nodes nPts: ' + String(node_mapper.getInputData().getNumberOfPoints()))\n        console.log(bounds)\n        const buffer = 1000.0\n        bounds[0] -= buffer\n        bounds[1] += buffer\n        bounds[2] -= buffer\n        bounds[3] += buffer\n        bounds[4] -= buffer\n        bounds[5] += buffer\n      } else {\n        bounds = null\n      }\n      await getVolume({mine: session.mine})\n      if (outline_mapper.getInputData().getNumberOfPoints() > 0 && node_mapper.getInputData().getNumberOfPoints() === 0) {\n        bounds = outline_mapper.getInputData().getBounds()\n        //console.log('nodes nPts: ' + String(node_mapper.getInputData().getNumberOfPoints()))\n        console.log(bounds)\n        const buffer = 1000.0\n        bounds[0] -= buffer\n        bounds[1] += buffer\n        bounds[2] -= buffer\n        bounds[3] += buffer\n        bounds[4] -= buffer\n        bounds[5] += buffer\n      }\t\t  \n      //\n      //Promise.allSettled([getPlan({bounds: bounds, mine: session.mine}), getEvents({bounds: bounds, mine: session.mine, timestamp: 0.0}), getVolume({mine: session.mine})]).then(() => {\n      Promise.allSettled([getPlan({bounds: bounds, mine: session.mine}), getEvents({bounds: bounds, mine: session.mine, timestamp: 0.0})]).then(() => {\n        const range = events_mapper.getInputData().getPointData().getScalars().getRange()\n        events_timestamp_min.value = range[0]\n        events_timestamp_max.value = range[1]\n\t\tevents_timestamp.value = range[0]\n\t\tevents_mapper.setScalarRange(range)\n\t\t//\n        const volume_range = volume_reader.getOutputData().getPointData().getScalars().getRange()\n        volume_min.value = volume_range[0]\n        volume_max.value = volume_range[1]\n        volume_iso.value = (volume_range[0]+volume_range[1])/2\n\t\tvolume_mapper.setScalarRange(volume_range)\n        //\t\t\n        renderer.resetCamera()\n        renderWindow.render()\n      })\n\t}\n\t\n    function checkModified(){\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/modified', {mine: session.mine})\n          .then((response_get) => {\n            console.log(response_get.data)\t\t  \n            resolve('plan')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n\twatch(events_timestamp, (newValue) => {\n      onEventFilter(newValue)\n\t})\n\t\n\twatch(volume_iso, (newValue) => {\n      onVolumeIso(newValue)\n\t})\n\n    watchEffect(() => {\n      if (context.value) {\n        const {renderWindow } = context.value;\n\t\tconsole.log(unref(node_representation))\n\t\tnode_mapper.setScaleMode(unref(node_representation));\n\t\tnode_mapper.update()\n\t\tplan_actor.getProperty().setOpacity(unref(plan_opacity)*0.01);\n        plan_actor.getProperty().setRepresentation(unref(plan_representation))\n\t\tevents_actor.getProperty().setOpacity(unref(events_opacity)*0.01)\n\t\tvolume_actor.getProperty().setOpacity(unref(volume_opacity)*0.01)\n\t\trenderWindow.render();\n      }\n    });\n\t\n    onMounted(() => {\n      console.log('onMounted')\n\t\n      if (!context.value) {\n        \n\t\tconst fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value,\n          });\n         \n        const renderer = fullScreenRenderer.getRenderer()\n        const renderWindow = fullScreenRenderer.getRenderWindow()\n\t\t//\n        renderer.setBackground(1.0, 1.0, 1.0)\n\t\trenderer.setUseDepthPeeling(true) // depth peeling\n        renderer.setMaximumNumberOfPeels(100) // depth peeling\n        renderer.setOcclusionRatio(0.01) // depth peeling\n\t\t//\n\t\trenderer.addActor(node_actor)\n\t\trenderer.addActor(plan_actor)\n\t\trenderer.addActor(events_actor)\n\t\trenderer.addActor(volume_actor)\n\t\trenderer.addActor(outline_actor)\n\t\t\n\t\tcontext.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          //\n          node_actor,\n          node_mapper,\n          node_glyph,\n          //\n          events_actor,\n          events_mapper,\n          //\n          plan_reader,\n          plan_mapper,\n          plan_actor,\n          //\n          volume_reader,\n          volume_mapper,\n          volume_actor,\n          outline,\n          outline_mapper,\n          outline_actor,\n        };\n\t\t\n\t\t// render all and start monitoring for changes to incoming datasets\n\t\tgetAllAndRender()\n        setInterval(checkModified, 30000)\n      }\n    });\n\t\n\n\tonBeforeUnmount(() => {\n      if (context.value) {\n        const { renderer, renderWindow, fullScreenRenderer, node_actor, node_mapper, node_glyph, plan_reader, plan_actor, plan_mapper, events_actor, events_mapper, volume_reader, volume_mapper, volume_actor} = context.value;\n        renderer.removeAllActors()\n        plan_actor.delete();\n        plan_mapper.delete();\n        plan_reader.delete();\n\t\tnode_actor.delete();\n        node_mapper.delete();\n\t\tnode_glyph.delete();\n        events_actor.delete();\n        events_mapper.delete();\n\t\tvolume_actor.delete();\n        volume_mapper.delete();\n        volume_reader.delete();\n\t\t\n        //\n\t\trenderer.delete()\n\t\trenderWindow.delete()\n        //\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n\n    return {\n      vtkContainer,\n      setNodeRepresentation,\n      setEventOpacity,\n      setEventTimeStamp,\n      setPlanOpacity,\n      setPlanRepresentation,\n      plan_opacity,\n      plan_representation,\n      events_timestamp,\n      events_timestamp_min,\n      events_timestamp_max,\n      events_opacity,\n      node_representation,\n      volume_opacity,\n      setVolumeOpacity,\n      volume_iso,\n      volume_min,\n      volume_max,\n      setVolumeIso,\n    };\n  }\n}\n</script>\n\n<style scoped>\n.controls {\n  position: absolute;\n  top: 25px;\n  left: 25px;\n  background: white;\n  padding: 12px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}