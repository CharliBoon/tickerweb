{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nimport _imports_0 from '../assets/logo.png';\nconst _hoisted_1 = {\n  class: \"navbar navbar-light bg-white text-dark px-4\"\n};\nconst _hoisted_2 = {\n  class: \"container mt-4 position-relative\"\n};\nconst _hoisted_3 = {\n  ref: \"vtkContainer\",\n  class: \"vtk-container mb-4\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"controls p-4 bg-light shadow-sm rounded\",\n  style: {\n    \"position\": \"absolute\",\n    \"top\": \"64px\",\n    \"left\": \"16px\",\n    \"width\": \"300px\"\n  }\n};\nconst _hoisted_5 = {\n  class: \"table table-borderless align-middle\"\n};\nconst _hoisted_6 = [\"value\"];\nconst _hoisted_7 = [\"min\", \"max\", \"value\"];\nconst _hoisted_8 = [\"value\"];\nconst _hoisted_9 = [\"value\"];\nconst _hoisted_10 = [\"value\"];\nconst _hoisted_11 = [\"min\", \"max\", \"value\"];\nconst _hoisted_12 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" Top Bar \"), _createElementVNode(\"nav\", _hoisted_1, [_cache[10] || (_cache[10] = _createElementVNode(\"div\", {\n    class: \"d-flex align-items-center\"\n  }, [_createElementVNode(\"img\", {\n    src: _imports_0,\n    alt: \"Logo\",\n    height: \"40\",\n    class: \"d-inline-block align-middle\"\n  }), _createElementVNode(\"span\", {\n    class: \"navbar-brand mb-0 h1 ms-3\"\n  }, \"Nexus Wannabe\")], -1 /* HOISTED */)), _createCommentVNode(\" Settings Button \"), _createElementVNode(\"button\", {\n    class: \"btn btn-primary rounded-circle ms-auto\",\n    style: {\n      \"width\": \"40px\",\n      \"height\": \"40px\"\n    },\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.toggleSettings && $setup.toggleSettings(...args))\n  }, _cache[9] || (_cache[9] = [_createElementVNode(\"span\", {\n    class: \"material-icons\",\n    style: {\n      \"font-size\": \"24px\",\n      \"line-height\": \"40px\"\n    }\n  }, \" settings \", -1 /* HOISTED */)]))]), _createCommentVNode(\" Main Container \"), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" vtkContainer \"), _createElementVNode(\"div\", _hoisted_3, null, 512 /* NEED_PATCH */), _createCommentVNode(\" Floating Action Button \"), _createElementVNode(\"button\", {\n    class: \"btn btn-primary position-fixed bottom-0 end-0 m-4 rounded-circle shadow-lg\",\n    style: {\n      \"width\": \"60px\",\n      \"height\": \"60px\"\n    },\n    onClick: _cache[1] || (_cache[1] = (...args) => $setup.toggleSettings && $setup.toggleSettings(...args))\n  }, _cache[11] || (_cache[11] = [_createElementVNode(\"span\", {\n    class: \"material-icons\",\n    style: {\n      \"font-size\": \"30px\",\n      \"line-height\": \"60px\"\n    }\n  }, \" settings \", -1 /* HOISTED */)])), _createCommentVNode(\" Settings Panel \"), _createVNode(_Transition, {\n    name: \"fade\"\n  }, {\n    default: _withCtx(() => [$setup.showSettings ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_cache[25] || (_cache[25] = _createElementVNode(\"h5\", {\n      class: \"mb-3\"\n    }, \"Settings\", -1 /* HOISTED */)), _createElementVNode(\"table\", _hoisted_5, [_createElementVNode(\"tbody\", null, [_createCommentVNode(\" Nodes Section \"), _cache[21] || (_cache[21] = _createElementVNode(\"tr\", null, [_createElementVNode(\"td\", {\n      colspan: \"2\"\n    }, [_createElementVNode(\"h6\", {\n      class: \"text-primary mb-2\"\n    }, \"Nodes\")])], -1 /* HOISTED */)), _createElementVNode(\"tr\", null, [_cache[13] || (_cache[13] = _createElementVNode(\"td\", {\n      class: \"fw-bold\"\n    }, \"Representation\", -1 /* HOISTED */)), _createElementVNode(\"td\", null, [_createElementVNode(\"select\", {\n      class: \"form-select\",\n      value: $setup.node_representation,\n      onChange: _cache[2] || (_cache[2] = $event => $setup.setNodeRepresentation($event.target.value))\n    }, _cache[12] || (_cache[12] = [_createElementVNode(\"option\", {\n      value: \"0\"\n    }, \"Unscaled\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n      value: \"1\"\n    }, \"Scaled\", -1 /* HOISTED */)]), 40 /* PROPS, NEED_HYDRATION */, _hoisted_6)])]), _createCommentVNode(\" Events Section \"), _cache[22] || (_cache[22] = _createElementVNode(\"tr\", null, [_createElementVNode(\"td\", {\n      colspan: \"2\"\n    }, [_createElementVNode(\"h6\", {\n      class: \"text-primary mt-3 mb-2\"\n    }, \"Events\")])], -1 /* HOISTED */)), _createElementVNode(\"tr\", null, [_cache[14] || (_cache[14] = _createElementVNode(\"td\", {\n      class: \"fw-bold\"\n    }, \"TimeStamp\", -1 /* HOISTED */)), _createElementVNode(\"td\", null, [_createElementVNode(\"input\", {\n      type: \"range\",\n      class: \"form-range\",\n      min: $setup.events_timestamp_min,\n      max: $setup.events_timestamp_max,\n      value: $setup.events_timestamp,\n      onInput: _cache[3] || (_cache[3] = $event => $setup.setEventTimeStamp($event.target.value))\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_7)])]), _createElementVNode(\"tr\", null, [_cache[15] || (_cache[15] = _createElementVNode(\"td\", {\n      class: \"fw-bold\"\n    }, \"Opacity\", -1 /* HOISTED */)), _createElementVNode(\"td\", null, [_createElementVNode(\"input\", {\n      type: \"range\",\n      class: \"form-range\",\n      min: \"0\",\n      max: \"100\",\n      value: $setup.events_opacity,\n      onInput: _cache[4] || (_cache[4] = $event => $setup.setEventOpacity($event.target.value))\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_8)])]), _createCommentVNode(\" Plan Section \"), _cache[23] || (_cache[23] = _createElementVNode(\"tr\", null, [_createElementVNode(\"td\", {\n      colspan: \"2\"\n    }, [_createElementVNode(\"h6\", {\n      class: \"text-primary mt-3 mb-2\"\n    }, \"Plan\")])], -1 /* HOISTED */)), _createElementVNode(\"tr\", null, [_cache[16] || (_cache[16] = _createElementVNode(\"td\", {\n      class: \"fw-bold\"\n    }, \"Opacity\", -1 /* HOISTED */)), _createElementVNode(\"td\", null, [_createElementVNode(\"input\", {\n      type: \"range\",\n      class: \"form-range\",\n      min: \"0\",\n      max: \"100\",\n      value: $setup.plan_opacity,\n      onInput: _cache[5] || (_cache[5] = $event => $setup.setPlanOpacity($event.target.value))\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_9)])]), _createElementVNode(\"tr\", null, [_cache[18] || (_cache[18] = _createElementVNode(\"td\", {\n      class: \"fw-bold\"\n    }, \"Representation\", -1 /* HOISTED */)), _createElementVNode(\"td\", null, [_createElementVNode(\"select\", {\n      class: \"form-select\",\n      value: $setup.plan_representation,\n      onChange: _cache[6] || (_cache[6] = $event => $setup.setPlanRepresentation($event.target.value))\n    }, _cache[17] || (_cache[17] = [_createElementVNode(\"option\", {\n      value: \"0\"\n    }, \"Points\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n      value: \"1\"\n    }, \"Wireframe\", -1 /* HOISTED */)]), 40 /* PROPS, NEED_HYDRATION */, _hoisted_10)])]), _createCommentVNode(\" Volume Section \"), _cache[24] || (_cache[24] = _createElementVNode(\"tr\", null, [_createElementVNode(\"td\", {\n      colspan: \"2\"\n    }, [_createElementVNode(\"h6\", {\n      class: \"text-primary mt-3 mb-2\"\n    }, \"Volume\")])], -1 /* HOISTED */)), _createElementVNode(\"tr\", null, [_cache[19] || (_cache[19] = _createElementVNode(\"td\", {\n      class: \"fw-bold\"\n    }, \"Iso Value\", -1 /* HOISTED */)), _createElementVNode(\"td\", null, [_createElementVNode(\"input\", {\n      type: \"range\",\n      class: \"form-range\",\n      min: $setup.volume_min,\n      max: $setup.volume_max,\n      value: $setup.volume_iso,\n      onInput: _cache[7] || (_cache[7] = $event => $setup.setVolumeIso($event.target.value))\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_11)])]), _createElementVNode(\"tr\", null, [_cache[20] || (_cache[20] = _createElementVNode(\"td\", {\n      class: \"fw-bold\"\n    }, \"Opacity\", -1 /* HOISTED */)), _createElementVNode(\"td\", null, [_createElementVNode(\"input\", {\n      type: \"range\",\n      class: \"form-range\",\n      min: \"0\",\n      max: \"100\",\n      value: $setup.volume_opacity,\n      onInput: _cache[8] || (_cache[8] = $event => $setup.setVolumeOpacity($event.target.value))\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_12)])])])])])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  })])]);\n}","map":{"version":3,"names":["_imports_0","class","ref","key","style","_createElementBlock","_createCommentVNode","_createElementVNode","_hoisted_1","src","alt","height","onClick","_cache","args","$setup","toggleSettings","_hoisted_2","_hoisted_3","_createVNode","_Transition","name","default","_withCtx","showSettings","_hoisted_4","_hoisted_5","colspan","value","node_representation","onChange","$event","setNodeRepresentation","target","_hoisted_6","type","min","events_timestamp_min","max","events_timestamp_max","events_timestamp","onInput","setEventTimeStamp","_hoisted_7","events_opacity","setEventOpacity","_hoisted_8","plan_opacity","setPlanOpacity","_hoisted_9","plan_representation","setPlanRepresentation","_hoisted_10","volume_min","volume_max","volume_iso","setVolumeIso","_hoisted_11","volume_opacity","setVolumeOpacity","_hoisted_12","_"],"sources":["/home/ims/VSCodeProjects/TickerWeb/TickerWeb_Vue/src/components/TickerVTK.vue"],"sourcesContent":["<head>\n  <link\n    href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css\"\n    rel=\"stylesheet\"\n  />\n  <link\n    href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n    rel=\"stylesheet\"\n  />\n</head>\n\n<template>\n  <div>\n    <!-- Top Bar -->\n    <nav class=\"navbar navbar-light bg-white text-dark px-4\">\n      <div class=\"d-flex align-items-center\">\n        <img src=\"../assets/logo.png\" alt=\"Logo\" height=\"40\" class=\"d-inline-block align-middle\" />\n        <span class=\"navbar-brand mb-0 h1 ms-3\">Nexus Wannabe</span>\n      </div>\n      <!-- Settings Button -->\n      <button class=\"btn btn-primary rounded-circle ms-auto\" style=\"width: 40px; height: 40px;\" @click=\"toggleSettings\">\n        <span class=\"material-icons\" style=\"font-size: 24px; line-height: 40px;\">\n          settings\n        </span>\n      </button>\n    </nav>\n\n    <!-- Main Container -->\n    <div class=\"container mt-4 position-relative\">\n      <!-- vtkContainer -->\n      <div ref=\"vtkContainer\" class=\"vtk-container mb-4\" />\n\n      <!-- Floating Action Button -->\n      <button class=\"btn btn-primary position-fixed bottom-0 end-0 m-4 rounded-circle shadow-lg\"\n        style=\"width: 60px; height: 60px;\" @click=\"toggleSettings\">\n        <span class=\"material-icons\" style=\"font-size: 30px; line-height: 60px;\">\n          settings\n        </span>\n      </button>\n\n      <!-- Settings Panel -->\n      <transition name=\"fade\">\n        <div v-if=\"showSettings\" class=\"controls p-4 bg-light shadow-sm rounded\"\n          style=\"position: absolute; top: 64px; left: 16px; width: 300px;\">\n          <h5 class=\"mb-3\">Settings</h5>\n          <table class=\"table table-borderless align-middle\">\n            <tbody>\n              <!-- Nodes Section -->\n              <tr>\n                <td colspan=\"2\">\n                  <h6 class=\"text-primary mb-2\">Nodes</h6>\n                </td>\n              </tr>\n              <tr>\n                <td class=\"fw-bold\">Representation</td>\n                <td>\n                  <select class=\"form-select\" :value=\"node_representation\"\n                    @change=\"setNodeRepresentation($event.target.value)\">\n                    <option value=\"0\">Unscaled</option>\n                    <option value=\"1\">Scaled</option>\n                  </select>\n                </td>\n              </tr>\n\n              <!-- Events Section -->\n              <tr>\n                <td colspan=\"2\">\n                  <h6 class=\"text-primary mt-3 mb-2\">Events</h6>\n                </td>\n              </tr>\n              <tr>\n                <td class=\"fw-bold\">TimeStamp</td>\n                <td>\n                  <input type=\"range\" class=\"form-range\" :min=\"events_timestamp_min\" :max=\"events_timestamp_max\"\n                    :value=\"events_timestamp\" @input=\"setEventTimeStamp($event.target.value)\" />\n                </td>\n              </tr>\n              <tr>\n                <td class=\"fw-bold\">Opacity</td>\n                <td>\n                  <input type=\"range\" class=\"form-range\" min=\"0\" max=\"100\" :value=\"events_opacity\"\n                    @input=\"setEventOpacity($event.target.value)\" />\n                </td>\n              </tr>\n\n              <!-- Plan Section -->\n              <tr>\n                <td colspan=\"2\">\n                  <h6 class=\"text-primary mt-3 mb-2\">Plan</h6>\n                </td>\n              </tr>\n              <tr>\n                <td class=\"fw-bold\">Opacity</td>\n                <td>\n                  <input type=\"range\" class=\"form-range\" min=\"0\" max=\"100\" :value=\"plan_opacity\"\n                    @input=\"setPlanOpacity($event.target.value)\" />\n                </td>\n              </tr>\n              <tr>\n                <td class=\"fw-bold\">Representation</td>\n                <td>\n                  <select class=\"form-select\" :value=\"plan_representation\"\n                    @change=\"setPlanRepresentation($event.target.value)\">\n                    <option value=\"0\">Points</option>\n                    <option value=\"1\">Wireframe</option>\n                  </select>\n                </td>\n              </tr>\n\n              <!-- Volume Section -->\n              <tr>\n                <td colspan=\"2\">\n                  <h6 class=\"text-primary mt-3 mb-2\">Volume</h6>\n                </td>\n              </tr>\n              <tr>\n                <td class=\"fw-bold\">Iso Value</td>\n                <td>\n                  <input type=\"range\" class=\"form-range\" :min=\"volume_min\" :max=\"volume_max\" :value=\"volume_iso\"\n                    @input=\"setVolumeIso($event.target.value)\" />\n                </td>\n              </tr>\n              <tr>\n                <td class=\"fw-bold\">Opacity</td>\n                <td>\n                  <input type=\"range\" class=\"form-range\" min=\"0\" max=\"100\" :value=\"volume_opacity\"\n                    @input=\"setVolumeOpacity($event.target.value)\" />\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ref, unref, onMounted, onBeforeUnmount, watchEffect, watch } from 'vue';\n// vtk\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry'; // geometry rendering for WebGL, WebGPU\nimport '@kitware/vtk.js/Rendering/Profiles/Glyph';    // vtkGlyph3DMapper\nimport '@kitware/vtk.js/Rendering/Profiles/Molecule'; // vtkSphereMapper\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\n//\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkXMLImageDataReader from '@kitware/vtk.js/IO/XML/XMLImageDataReader';\nimport vtkGlyph3DMapper from '@kitware/vtk.js/Rendering/Core/Glyph3DMapper';\nimport vtkCubeSource from '@kitware/vtk.js/Filters/Sources/CubeSource';\nimport vtkSphereMapper from '@kitware/vtk.js/Rendering/Core/SphereMapper';\nimport vtkImageMarchingCubes from '@kitware/vtk.js/Filters/General/ImageMarchingCubes';\nimport vtkOutlineFilter from '@kitware/vtk.js/Filters/General/OutlineFilter';\n//\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkPoints from '@kitware/vtk.js/Common/Core/Points';\nimport vtkCellArray from '@kitware/vtk.js/Common/Core/CellArray'\nimport vtkLookupTable from '@kitware/vtk.js/Common/Core/LookupTable';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\n\nexport default {\n\n  setup() {\n\n    //const session = {user: 'malcolm', mine:'Bambanani'}\n    const session = { user: 'user', mine: 'Bambanani' }\n    let urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.has('mine')) {\n      session.mine = urlParams.get('mine')\n    }\n    window.history.replaceState({}, document.title, window.location.pathname);\n\n    let nodes = { 'data': [], 'meta': {} } // node data - response getNodes - for table, polydata\n    let events = { 'data': [], 'meta': {} } // event data - response getEvents - for table, polydata\n\n    let bounds = null // new Array(6).fill(0.0)\n\n    const vtkContainer = ref(null);\n    const context = ref(null);\n    const showSettings = ref(false);\n    const node_representation = ref(0);\n    const events_opacity = ref(50);\n    const events_timestamp = ref(0);\n    const events_timestamp_min = ref(0);\n    const events_timestamp_max = ref(0);\n    const plan_opacity = ref(100);\n    const plan_representation = ref(1);\n    const volume_opacity = ref(15);\n    const volume_iso = ref(2500);\n    const volume_min = ref(0);\n    const volume_max = ref(0);\n\n    const textEncoder = new TextEncoder();\n    const path = 'http://localhost:5000';\n    //const path = 'http://192.168.0.2:5000';\n\n    // nodes\n    const node_lut = vtkLookupTable.newInstance(); // make custom LUT\n    const data = new Uint8Array([0, 255, 0, 255, 255, 165, 80, 255, 255, 0, 0, 255]); // RGBA: green, orange, red\n    const table = vtkDataArray.newInstance({ values: data, numberOfComponents: 4 }); // to VTK\n    node_lut.setTable(table); // LUT = green, orange, red\n\n    const node_glyph = vtkCubeSource.newInstance();\n    const node_mapper = vtkGlyph3DMapper.newInstance();\n    const node_actor = vtkActor.newInstance();\n    //\n    node_mapper.setScalarModeToUsePointData()\n    node_mapper.setScalarVisibility(true)\n    node_mapper.setScalarRange(1, 3)\n    node_mapper.setLookupTable(node_lut)\n    node_mapper.setScaleFactor(10.0)\n    node_actor.setMapper(node_mapper)\n    //node_actor.getProperty().setAmbient(0.5)\n\n    // plan\n    const plan_reader = vtkXMLPolyDataReader.newInstance();\n    const plan_mapper = vtkMapper.newInstance();\n    const plan_actor = vtkActor.newInstance();\n    //\n    plan_mapper.setInputConnection(plan_reader.getOutputPort());\n    plan_actor.setMapper(plan_mapper)\n    plan_actor.getProperty().setOpacity(0.25)\n    plan_actor.getProperty().setColor(0.5, 0.5, 0.5)\n\n    // volume\n    const volume_reader = vtkXMLImageDataReader.newInstance();\n    const volume_mapper = vtkMapper.newInstance();\n    const volume_actor = vtkActor.newInstance();\n    //\n    const volume_surface = vtkImageMarchingCubes.newInstance({\n      contourValue: 2500.0,\n      computeNormals: false,\n      mergePoints: false,\n    });\n    //volume_mapper.setInputConnection(volume_reader.getOutputPort());\n    volume_surface.setInputConnection(volume_reader.getOutputPort())\n    volume_mapper.setInputConnection(volume_surface.getOutputPort());\n    volume_actor.setMapper(volume_mapper)\n    //volume_actor.getProperty().setOpacity(0.25)\n    //volume_actor.getProperty().setRepresentationToWireframe()\n    volume_actor.getProperty().setColor(0.5, 1.0, 1.0)\n\n    const outline = vtkOutlineFilter.newInstance()\n    const outline_mapper = vtkMapper.newInstance();\n    const outline_actor = vtkActor.newInstance();\n\n    outline.setInputConnection(volume_reader.getOutputPort())\n    outline_mapper.setInputConnection(outline.getOutputPort());\n    outline_actor.setMapper(outline_mapper)\n    outline_actor.getProperty().setColor(0.0, 0.0, 0.0)\n\n\n    // events\n    const events_reader = vtkXMLPolyDataReader.newInstance();\n    const events_mapper = vtkSphereMapper.newInstance();\n    const events_actor = vtkActor.newInstance();\n    //\n    events_mapper.setInputConnection(events_reader.getOutputPort())\n    events_mapper.setScaleFactor(100.0);\n    events_mapper.setScaleArray('scale');\n    events_mapper.setScalarVisibility(true);\n    events_mapper.setScalarModeToUsePointData()\n    events_actor.setMapper(events_mapper)\n    events_actor.getProperty().setOpacity(0.5)\n\n    function toggleSettings() {\n      this.showSettings = !this.showSettings;\n    }\n\n    function setNodeRepresentation(rep) {\n      node_representation.value = Number(rep);\n    }\n\n    function setEventOpacity(opacity) {\n      events_opacity.value = Number(opacity);\n    }\n\n    function setEventTimeStamp(res) {\n      events_timestamp.value = Number(res);\n    }\n\n    function setPlanOpacity(opacity) {\n      plan_opacity.value = Number(opacity);\n    }\n\n    function setPlanRepresentation(rep) {\n      plan_representation.value = Number(rep);\n    }\n\n    async function onEventFilter(timestamp) {\n      const { renderWindow } = context.value\n      filterEventData(timestamp)\n      renderWindow.render()\n    }\n\n    function setVolumeOpacity(opacity) {\n      volume_opacity.value = Number(opacity);\n    }\n\n    function setVolumeIso(iso) {\n      volume_iso.value = Number(iso);\n    }\n\n    async function onVolumeIso(iso_value) {\n      const { renderWindow } = context.value\n      volume_surface.setContourValue(iso_value)\n      renderWindow.render()\n    }\n\n    // provide data to vtk pipelines ------------------------------------------\n\n    // nodes\n\n    function getNodes(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/nodes', args)\n          .then((response_get) => {\n            nodes = response_get.data\n            const pd = newPolyDataFromNodes(nodes)\n            node_mapper.setInputData(pd, 0)\n            node_mapper.setInputData(node_glyph.getOutputData(), 1)\n            resolve('nodes_data')\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    }\n\n    function newPolyDataFromNodes(nodes) {\n      const nodes_data = nodes['data']\n      const points = vtkPoints.newInstance()\n      points.setNumberOfPoints(nodes_data.length)\n      const arr_alerts = new Float32Array(nodes_data.length)\n      const arr_verts = []\n\n      nodes_data.forEach((node, index) => {\n        arr_alerts[index] = node.alert\n        arr_verts.push(1, index)\n        points.setPoint(index, node.x, node.y, node.z);\n      })\n      const alerts = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_alerts,\n        name: 'alerts',\n      })\n      const verts = vtkCellArray.newInstance({ values: Uint16Array.from(arr_verts) })\n      const pd = vtkPolyData.newInstance()\n      pd.setPoints(points)\n      pd.setVerts(verts)\n      pd.getPointData().setScalars(alerts)\n      return pd\n    }\n\n    // plan\n\n    function getPlan(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/plan_vtk', args)\n          .then((response_get) => {\n            plan_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data))\n            resolve('plan')\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    }\n\n    // volume\n\n    function getVolume(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/volume_vtk', args)\n          .then((response_get) => {\n            volume_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data))\n            resolve('volume')\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    }\n\n    // events\n\n    function getEvents(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/events', args)\n          .then((response_get) => {\n            events = response_get.data\n            const pd = newPolyDataFromEvents(events)\n            events_mapper.setInputData(pd)\n            resolve('events_data')\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    }\n\n    function filterEventData(timestamp) {\n      const events_data = events.data.filter((event) => {\n        return event.timestamp > timestamp\n      }\n      )\n      const pd = newPolyDataFromEvents({ 'meta': events.meta, 'data': events_data })\n      events_mapper.setInputData(pd)\n    }\n\n    function newPolyDataFromEvents(events) {\n      const events_data = events.data\n      const points = vtkPoints.newInstance()\n      points.setNumberOfPoints(events_data.length)\n      const arr_mags = new Float32Array(events_data.length)\n      const arr_timestamp = new Float32Array(events_data.length)\n      const arr_scale = new Float32Array(events_data.length)\n      const arr_verts = []\n\n      const offset = 1.0\n      const min_mag = events['meta'].min_mag\n      const max_mag = events['meta'].max_mag\n\n      events_data.forEach((event_data, index) => {\n        arr_mags[index] = event_data.mag\n        arr_scale[index] = (offset - min_mag + event_data.mag) / (offset - min_mag + max_mag)\n        arr_timestamp[index] = event_data.timestamp\n        arr_verts.push(1, index)\n        points.setPoint(index, event_data.x, event_data.y, event_data.z);\n      })\n      const mags = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_mags,\n        name: 'mags',\n      })\n      const scale = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_scale,\n        name: 'scale',\n      })\n      const timestamp = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_timestamp,\n        name: 'timestamp',\n      })\n      const verts = vtkCellArray.newInstance({ values: Uint16Array.from(arr_verts) })\n      const pd = vtkPolyData.newInstance()\n      pd.setPoints(points)\n      pd.setVerts(verts)\n      pd.getPointData().addArray(mags)\n      pd.getPointData().addArray(scale)\n      pd.getPointData().addArray(timestamp)\n      pd.getPointData().setActiveAttributeByName('timestamp', 0) // scalars\n      return pd\n    }\n\n    // all --------------------------------------------------------------------\n\n    async function getAllAndRender() {\n      const { renderWindow, renderer } = context.value\n      await getNodes({ mine: session.mine })\n      console.log('nodes nPts: ' + String(node_mapper.getInputData().getNumberOfPoints()))\n      if (node_mapper.getInputData().getNumberOfPoints() > 0) {\n        bounds = node_mapper.getInputData().getBounds()\n        //console.log('nodes nPts: ' + String(node_mapper.getInputData().getNumberOfPoints()))\n        console.log(bounds)\n        const buffer = 1000.0\n        bounds[0] -= buffer\n        bounds[1] += buffer\n        bounds[2] -= buffer\n        bounds[3] += buffer\n        bounds[4] -= buffer\n        bounds[5] += buffer\n      } else {\n        bounds = null\n      }\n      await getVolume({ mine: session.mine })\n      if (outline_mapper.getInputData().getNumberOfPoints() > 0 && node_mapper.getInputData().getNumberOfPoints() === 0) {\n        bounds = outline_mapper.getInputData().getBounds()\n        //console.log('nodes nPts: ' + String(node_mapper.getInputData().getNumberOfPoints()))\n        console.log(bounds)\n        const buffer = 1000.0\n        bounds[0] -= buffer\n        bounds[1] += buffer\n        bounds[2] -= buffer\n        bounds[3] += buffer\n        bounds[4] -= buffer\n        bounds[5] += buffer\n      }\n      //\n      //Promise.allSettled([getPlan({bounds: bounds, mine: session.mine}), getEvents({bounds: bounds, mine: session.mine, timestamp: 0.0}), getVolume({mine: session.mine})]).then(() => {\n      Promise.allSettled([getPlan({ bounds: bounds, mine: session.mine }), getEvents({ bounds: bounds, mine: session.mine, timestamp: 0.0 })]).then(() => {\n        const range = events_mapper.getInputData().getPointData().getScalars().getRange()\n        events_timestamp_min.value = range[0]\n        events_timestamp_max.value = range[1]\n        events_timestamp.value = range[0]\n        events_mapper.setScalarRange(range)\n        //\n        const volume_range = volume_reader.getOutputData().getPointData().getScalars().getRange()\n        volume_min.value = volume_range[0]\n        volume_max.value = volume_range[1]\n        volume_iso.value = (volume_range[0] + volume_range[1]) / 2\n        volume_mapper.setScalarRange(volume_range)\n        //\t\t\n        renderer.resetCamera()\n        renderWindow.render()\n      })\n    }\n\n    function checkModified() {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/modified', { mine: session.mine })\n          .then((response_get) => {\n            console.log(response_get.data)\n            resolve('plan')\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    }\n\n    watch(events_timestamp, (newValue) => {\n      onEventFilter(newValue)\n    })\n\n    watch(volume_iso, (newValue) => {\n      onVolumeIso(newValue)\n    })\n\n    watchEffect(() => {\n      if (context.value) {\n        const { renderWindow } = context.value;\n        console.log(unref(node_representation))\n        node_mapper.setScaleMode(unref(node_representation));\n        node_mapper.update()\n        plan_actor.getProperty().setOpacity(unref(plan_opacity) * 0.01);\n        plan_actor.getProperty().setRepresentation(unref(plan_representation))\n        events_actor.getProperty().setOpacity(unref(events_opacity) * 0.01)\n        volume_actor.getProperty().setOpacity(unref(volume_opacity) * 0.01)\n        renderWindow.render();\n      }\n    });\n\n    onMounted(() => {\n      console.log('onMounted');\n\n      if (!context.value) {\n        const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value,\n        });\n\n        const renderer = fullScreenRenderer.getRenderer();\n        const renderWindow = fullScreenRenderer.getRenderWindow();\n\n        // Set background and enable depth peeling\n        renderer.setBackground(1.0, 1.0, 1.0);\n        renderer.setUseDepthPeeling(true);\n        renderer.setMaximumNumberOfPeels(100);\n        renderer.setOcclusionRatio(0.01);\n\n        // Add actors\n        renderer.addActor(node_actor);\n        renderer.addActor(plan_actor);\n        renderer.addActor(events_actor);\n        renderer.addActor(volume_actor);\n        renderer.addActor(outline_actor);\n\n        // Store context for later access\n        context.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          node_actor,\n          node_mapper,\n          node_glyph,\n          events_actor,\n          events_mapper,\n          plan_reader,\n          plan_mapper,\n          plan_actor,\n          volume_reader,\n          volume_surface,\n          volume_mapper,\n          volume_actor,\n          outline,\n          outline_mapper,\n          outline_actor,\n        };\n\n        // Render all and start monitoring for changes\n        getAllAndRender();\n\n        // Start the interval for checking modifications\n        context.value.checkModifiedInterval = setInterval(checkModified, 30000);\n      }\n    });\n\n\n    onBeforeUnmount(() => {\n      if (context.value) {\n        const { renderer, renderWindow, fullScreenRenderer, node_actor, node_mapper, node_glyph, plan_reader, plan_actor, plan_mapper, events_actor, events_mapper, volume_reader, volume_mapper, volume_actor } = context.value;\n        renderer.removeAllActors()\n        plan_actor.delete();\n        plan_mapper.delete();\n        plan_reader.delete();\n        node_actor.delete();\n        node_mapper.delete();\n        node_glyph.delete();\n        events_actor.delete();\n        events_mapper.delete();\n        volume_actor.delete();\n        volume_mapper.delete();\n        volume_reader.delete();\n        volume_surface.delete();\n        //\n        renderer.delete()\n        renderWindow.delete()\n        //\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n\n    return {\n      vtkContainer,\n      showSettings,\n      toggleSettings,\n      setNodeRepresentation,\n      setEventOpacity,\n      setEventTimeStamp,\n      setPlanOpacity,\n      setPlanRepresentation,\n      plan_opacity,\n      plan_representation,\n      events_timestamp,\n      events_timestamp_min,\n      events_timestamp_max,\n      events_opacity,\n      node_representation,\n      volume_opacity,\n      setVolumeOpacity,\n      volume_iso,\n      volume_min,\n      volume_max,\n      setVolumeIso,\n    };\n  }\n}\n</script>\n\n<style>\n.app-container {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  overflow: hidden;\n}\n\n.navbar {\n  position: sticky;\n  top: 0;\n  z-index: 1000;\n}\n\n.main-content {\n  display: flex;\n  flex-grow: 1;\n  overflow: hidden;\n}\n\n.settings-panel {\n  width: 300px;\n  overflow-y: auto;\n  height: calc(100vh - 64px); /* Full height minus navbar */\n  border-right: 1px solid #ddd;\n}\n\n.map-container {\n  flex-grow: 1;\n  position: relative;\n  overflow: hidden;\n}\n\n.vtk-container {\n  width: 100%;\n  height: 100%;\n}\n</style>\n"],"mappings":";OAgBaA,UAAwB;;EAF5BC,KAAK,EAAC;AAA6C;;EAcnDA,KAAK,EAAC;AAAkC;;EAEtCC,GAAG,EAAC,cAAc;EAACD,KAAK,EAAC;;;EA9BpCE,GAAA;EA0CiCF,KAAK,EAAC,yCAAyC;EACtEG,KAAgE,EAAhE;IAAA;IAAA;IAAA;IAAA;EAAA;;;EAEOH,KAAK,EAAC;AAAqC;mBA7C5D;mBAAA;mBAAA;mBAAA;oBAAA;oBAAA;oBAAA;;uBAYEI,mBAAA,CA0HM,cAzHJC,mBAAA,aAAgB,EAChBC,mBAAA,CAWM,OAXNC,UAWM,G,4BAVJD,mBAAA,CAGM;IAHDN,KAAK,EAAC;EAA2B,IACpCM,mBAAA,CAA2F;IAAtFE,GAAwB,EAAxBT,UAAwB;IAACU,GAAG,EAAC,MAAM;IAACC,MAAM,EAAC,IAAI;IAACV,KAAK,EAAC;MAC3DM,mBAAA,CAA4D;IAAtDN,KAAK,EAAC;EAA2B,GAAC,eAAa,E,sBAEvDK,mBAAA,qBAAwB,EACxBC,mBAAA,CAIS;IAJDN,KAAK,EAAC,wCAAwC;IAACG,KAAkC,EAAlC;MAAA;MAAA;IAAA,CAAkC;IAAEQ,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAC,cAAA,IAAAF,IAAA,CAAc;gCAC9GP,mBAAA,CAEO;IAFDN,KAAK,EAAC,gBAAgB;IAACG,KAA2C,EAA3C;MAAA;MAAA;IAAA;KAA4C,YAEzE,oB,MAIJE,mBAAA,oBAAuB,EACvBC,mBAAA,CAyGM,OAzGNU,UAyGM,GAxGJX,mBAAA,kBAAqB,EACrBC,mBAAA,CAAqD,OAArDW,UAAqD,+BAErDZ,mBAAA,4BAA+B,EAC/BC,mBAAA,CAKS;IALDN,KAAK,EAAC,4EAA4E;IACxFG,KAAkC,EAAlC;MAAA;MAAA;IAAA,CAAkC;IAAEQ,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAC,cAAA,IAAAF,IAAA,CAAc;kCACzDP,mBAAA,CAEO;IAFDN,KAAK,EAAC,gBAAgB;IAACG,KAA2C,EAA3C;MAAA;MAAA;IAAA;KAA4C,YAEzE,oB,IAGFE,mBAAA,oBAAuB,EACvBa,YAAA,CA2FaC,WAAA;IA3FDC,IAAI,EAAC;EAAM;IAzC7BC,OAAA,EAAAC,QAAA,CA0CQ,MAyFM,CAzFKR,MAAA,CAAAS,YAAY,I,cAAvBnB,mBAAA,CAyFM,OAzFNoB,UAyFM,G,4BAvFJlB,mBAAA,CAA8B;MAA1BN,KAAK,EAAC;IAAM,GAAC,UAAQ,sBACzBM,mBAAA,CAqFQ,SArFRmB,UAqFQ,GApFNnB,mBAAA,CAmFQ,gBAlFND,mBAAA,mBAAsB,E,4BACtBC,mBAAA,CAIK,aAHHA,mBAAA,CAEK;MAFDoB,OAAO,EAAC;IAAG,IACbpB,mBAAA,CAAwC;MAApCN,KAAK,EAAC;IAAmB,GAAC,OAAK,E,wBAGvCM,mBAAA,CASK,a,4BARHA,mBAAA,CAAuC;MAAnCN,KAAK,EAAC;IAAS,GAAC,gBAAc,sBAClCM,mBAAA,CAMK,aALHA,mBAAA,CAIS;MAJDN,KAAK,EAAC,aAAa;MAAE2B,KAAK,EAAEb,MAAA,CAAAc,mBAAmB;MACpDC,QAAM,EAAAjB,MAAA,QAAAA,MAAA,MAAAkB,MAAA,IAAEhB,MAAA,CAAAiB,qBAAqB,CAACD,MAAM,CAACE,MAAM,CAACL,KAAK;oCAClDrB,mBAAA,CAAmC;MAA3BqB,KAAK,EAAC;IAAG,GAAC,UAAQ,qBAC1BrB,mBAAA,CAAiC;MAAzBqB,KAAK,EAAC;IAAG,GAAC,QAAM,oB,mCA3D5CM,UAAA,E,KAgEc5B,mBAAA,oBAAuB,E,4BACvBC,mBAAA,CAIK,aAHHA,mBAAA,CAEK;MAFDoB,OAAO,EAAC;IAAG,IACbpB,mBAAA,CAA8C;MAA1CN,KAAK,EAAC;IAAwB,GAAC,QAAM,E,wBAG7CM,mBAAA,CAMK,a,4BALHA,mBAAA,CAAkC;MAA9BN,KAAK,EAAC;IAAS,GAAC,WAAS,sBAC7BM,mBAAA,CAGK,aAFHA,mBAAA,CAC8E;MADvE4B,IAAI,EAAC,OAAO;MAAClC,KAAK,EAAC,YAAY;MAAEmC,GAAG,EAAErB,MAAA,CAAAsB,oBAAoB;MAAGC,GAAG,EAAEvB,MAAA,CAAAwB,oBAAoB;MAC1FX,KAAK,EAAEb,MAAA,CAAAyB,gBAAgB;MAAGC,OAAK,EAAA5B,MAAA,QAAAA,MAAA,MAAAkB,MAAA,IAAEhB,MAAA,CAAA2B,iBAAiB,CAACX,MAAM,CAACE,MAAM,CAACL,KAAK;6CA1E3Fe,UAAA,E,KA6EcpC,mBAAA,CAMK,a,4BALHA,mBAAA,CAAgC;MAA5BN,KAAK,EAAC;IAAS,GAAC,SAAO,sBAC3BM,mBAAA,CAGK,aAFHA,mBAAA,CACkD;MAD3C4B,IAAI,EAAC,OAAO;MAAClC,KAAK,EAAC,YAAY;MAACmC,GAAG,EAAC,GAAG;MAACE,GAAG,EAAC,KAAK;MAAEV,KAAK,EAAEb,MAAA,CAAA6B,cAAc;MAC5EH,OAAK,EAAA5B,MAAA,QAAAA,MAAA,MAAAkB,MAAA,IAAEhB,MAAA,CAAA8B,eAAe,CAACd,MAAM,CAACE,MAAM,CAACL,KAAK;6CAjF/DkB,UAAA,E,KAqFcxC,mBAAA,kBAAqB,E,4BACrBC,mBAAA,CAIK,aAHHA,mBAAA,CAEK;MAFDoB,OAAO,EAAC;IAAG,IACbpB,mBAAA,CAA4C;MAAxCN,KAAK,EAAC;IAAwB,GAAC,MAAI,E,wBAG3CM,mBAAA,CAMK,a,4BALHA,mBAAA,CAAgC;MAA5BN,KAAK,EAAC;IAAS,GAAC,SAAO,sBAC3BM,mBAAA,CAGK,aAFHA,mBAAA,CACiD;MAD1C4B,IAAI,EAAC,OAAO;MAAClC,KAAK,EAAC,YAAY;MAACmC,GAAG,EAAC,GAAG;MAACE,GAAG,EAAC,KAAK;MAAEV,KAAK,EAAEb,MAAA,CAAAgC,YAAY;MAC1EN,OAAK,EAAA5B,MAAA,QAAAA,MAAA,MAAAkB,MAAA,IAAEhB,MAAA,CAAAiC,cAAc,CAACjB,MAAM,CAACE,MAAM,CAACL,KAAK;6CA/F9DqB,UAAA,E,KAkGc1C,mBAAA,CASK,a,4BARHA,mBAAA,CAAuC;MAAnCN,KAAK,EAAC;IAAS,GAAC,gBAAc,sBAClCM,mBAAA,CAMK,aALHA,mBAAA,CAIS;MAJDN,KAAK,EAAC,aAAa;MAAE2B,KAAK,EAAEb,MAAA,CAAAmC,mBAAmB;MACpDpB,QAAM,EAAAjB,MAAA,QAAAA,MAAA,MAAAkB,MAAA,IAAEhB,MAAA,CAAAoC,qBAAqB,CAACpB,MAAM,CAACE,MAAM,CAACL,KAAK;oCAClDrB,mBAAA,CAAiC;MAAzBqB,KAAK,EAAC;IAAG,GAAC,QAAM,qBACxBrB,mBAAA,CAAoC;MAA5BqB,KAAK,EAAC;IAAG,GAAC,WAAS,oB,mCAxG/CwB,WAAA,E,KA6Gc9C,mBAAA,oBAAuB,E,4BACvBC,mBAAA,CAIK,aAHHA,mBAAA,CAEK;MAFDoB,OAAO,EAAC;IAAG,IACbpB,mBAAA,CAA8C;MAA1CN,KAAK,EAAC;IAAwB,GAAC,QAAM,E,wBAG7CM,mBAAA,CAMK,a,4BALHA,mBAAA,CAAkC;MAA9BN,KAAK,EAAC;IAAS,GAAC,WAAS,sBAC7BM,mBAAA,CAGK,aAFHA,mBAAA,CAC+C;MADxC4B,IAAI,EAAC,OAAO;MAAClC,KAAK,EAAC,YAAY;MAAEmC,GAAG,EAAErB,MAAA,CAAAsC,UAAU;MAAGf,GAAG,EAAEvB,MAAA,CAAAuC,UAAU;MAAG1B,KAAK,EAAEb,MAAA,CAAAwC,UAAU;MAC1Fd,OAAK,EAAA5B,MAAA,QAAAA,MAAA,MAAAkB,MAAA,IAAEhB,MAAA,CAAAyC,YAAY,CAACzB,MAAM,CAACE,MAAM,CAACL,KAAK;6CAvH5D6B,WAAA,E,KA0HclD,mBAAA,CAMK,a,4BALHA,mBAAA,CAAgC;MAA5BN,KAAK,EAAC;IAAS,GAAC,SAAO,sBAC3BM,mBAAA,CAGK,aAFHA,mBAAA,CACmD;MAD5C4B,IAAI,EAAC,OAAO;MAAClC,KAAK,EAAC,YAAY;MAACmC,GAAG,EAAC,GAAG;MAACE,GAAG,EAAC,KAAK;MAAEV,KAAK,EAAEb,MAAA,CAAA2C,cAAc;MAC5EjB,OAAK,EAAA5B,MAAA,QAAAA,MAAA,MAAAkB,MAAA,IAAEhB,MAAA,CAAA4C,gBAAgB,CAAC5B,MAAM,CAACE,MAAM,CAACL,KAAK;6CA9HhEgC,WAAA,E,aAAAtD,mBAAA,e;IAAAuD,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}