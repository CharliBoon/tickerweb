{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { m as macro } from '../../macros2.js';\nimport vtkInteractorStyle from '../../Rendering/Core/InteractorStyle.js';\nconst {\n  vtkDebugMacro\n} = macro;\nconst {\n  States\n} = vtkInteractorStyle;\n\n// ----------------------------------------------------------------------------\n// Event Types\n// ----------------------------------------------------------------------------\n\nconst START_INTERACTION_EVENT = {\n  type: 'StartInteractionEvent'\n};\nconst INTERACTION_EVENT = {\n  type: 'InteractionEvent'\n};\nconst END_INTERACTION_EVENT = {\n  type: 'EndInteractionEvent'\n};\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nfunction translateCamera(renderer, rwi, toX, toY, fromX, fromY) {\n  const cam = renderer.getActiveCamera();\n  let viewFocus = cam.getFocalPoint();\n  viewFocus = rwi.getInteractorStyle().computeWorldToDisplay(renderer, viewFocus[0], viewFocus[1], viewFocus[2]);\n  const focalDepth = viewFocus[2];\n  const newPickPoint = rwi.getInteractorStyle().computeDisplayToWorld(renderer, toX, toY, focalDepth);\n  const oldPickPoint = rwi.getInteractorStyle().computeDisplayToWorld(renderer, fromX, fromY, focalDepth);\n\n  // camera motion is reversed\n  const motionVector = [oldPickPoint[0] - newPickPoint[0], oldPickPoint[1] - newPickPoint[1], oldPickPoint[2] - newPickPoint[2]];\n  viewFocus = cam.getFocalPoint();\n  const viewPoint = cam.getPosition();\n  cam.setFocalPoint(motionVector[0] + viewFocus[0], motionVector[1] + viewFocus[1], motionVector[2] + viewFocus[2]);\n  cam.setPosition(motionVector[0] + viewPoint[0], motionVector[1] + viewPoint[1], motionVector[2] + viewPoint[2]);\n}\nfunction dollyToPosition(fact, position, renderer, rwi) {\n  const cam = renderer.getActiveCamera();\n  if (cam.getParallelProjection()) {\n    // Zoom relatively to the cursor\n    const view = rwi.getView();\n    const aSize = view.getViewportSize(renderer);\n    const viewport = renderer.getViewport();\n    const viewSize = view.getSize();\n    const w = aSize[0];\n    const h = aSize[1];\n    const x0 = w / 2;\n    const y0 = h / 2;\n    const x1 = position.x - viewport[0] * viewSize[0];\n    const y1 = position.y - viewport[1] * viewSize[1];\n    translateCamera(renderer, rwi, x0, y0, x1, y1);\n    cam.setParallelScale(cam.getParallelScale() / fact);\n    translateCamera(renderer, rwi, x1, y1, x0, y0);\n  } else {\n    // Zoom relatively to the cursor position\n\n    // Move focal point to cursor position\n    let viewFocus = cam.getFocalPoint();\n    const norm = cam.getViewPlaneNormal();\n    viewFocus = rwi.getInteractorStyle().computeWorldToDisplay(renderer, viewFocus[0], viewFocus[1], viewFocus[2]);\n    const newFp = rwi.getInteractorStyle().computeDisplayToWorld(renderer, position.x, position.y, viewFocus[2]);\n    cam.setFocalPoint(newFp[0], newFp[1], newFp[2]);\n\n    // Move camera in/out along projection direction\n    cam.dolly(fact);\n    renderer.resetCameraClippingRange();\n\n    // Find new focal point\n    const newCameraPos = cam.getPosition();\n    viewFocus = cam.getFocalPoint();\n    const newPoint = [0, 0, 0];\n    let t = norm[0] * (viewFocus[0] - newCameraPos[0]) + norm[1] * (viewFocus[1] - newCameraPos[1]) + norm[2] * (viewFocus[2] - newCameraPos[2]);\n    t /= norm[0] ** 2 + norm[1] ** 2 + norm[2] ** 2;\n    newPoint[0] = newCameraPos[0] + norm[0] * t;\n    newPoint[1] = newCameraPos[1] + norm[1] * t;\n    newPoint[2] = newCameraPos[2] + norm[2] * t;\n    cam.setFocalPoint(newPoint[0], newPoint[1], newPoint[2]);\n    renderer.resetCameraClippingRange();\n  }\n}\nfunction dollyByFactor(interactor, renderer, factor) {\n  if (Number.isNaN(factor)) {\n    return;\n  }\n  const camera = renderer.getActiveCamera();\n  if (camera.getParallelProjection()) {\n    camera.setParallelScale(camera.getParallelScale() / factor);\n  } else {\n    camera.dolly(factor);\n    renderer.resetCameraClippingRange();\n  }\n  if (interactor.getLightFollowCamera()) {\n    renderer.updateLightsGeometryToFollowCamera();\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {\n  dollyToPosition,\n  translateCamera,\n  dollyByFactor\n};\n\n// ----------------------------------------------------------------------------\n// vtkInteractorStyleManipulator methods\n// ----------------------------------------------------------------------------\n\nfunction vtkInteractorStyleManipulator(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkInteractorStyleManipulator');\n  model.currentVRManipulators = new Map();\n  model.mouseManipulators = [];\n  model.keyboardManipulators = [];\n  model.vrManipulators = [];\n  model.gestureManipulators = [];\n  model.currentManipulator = null;\n  model.currentWheelManipulator = null;\n  model.centerOfRotation = [0, 0, 0];\n  model.rotationFactor = 1;\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeAllManipulators = () => {\n    publicAPI.removeAllMouseManipulators();\n    publicAPI.removeAllKeyboardManipulators();\n    publicAPI.removeAllVRManipulators();\n    publicAPI.removeAllGestureManipulators();\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeAllMouseManipulators = () => {\n    model.mouseManipulators = [];\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeAllKeyboardManipulators = () => {\n    model.keyboardManipulators = [];\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeAllVRManipulators = () => {\n    model.vrManipulators = [];\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeAllGestureManipulators = () => {\n    model.gestureManipulators = [];\n  };\n\n  //-------------------------------------------------------------------------\n  const removeManipulator = (manipulator, list) => {\n    const index = list.indexOf(manipulator);\n    if (index === -1) {\n      return false;\n    }\n    list.splice(index, 1);\n    publicAPI.modified();\n    return true;\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeMouseManipulator = manipulator => removeManipulator(manipulator, model.mouseManipulators);\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeKeyboardManipulator = manipulator => removeManipulator(manipulator, model.keyboardManipulators);\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeVRManipulator = manipulator => removeManipulator(manipulator, model.vrManipulators);\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeGestureManipulator = manipulator => removeManipulator(manipulator, model.gestureManipulators);\n\n  //-------------------------------------------------------------------------\n  const addManipulator = (manipulator, list) => {\n    const index = list.indexOf(manipulator);\n    if (index !== -1) {\n      return false;\n    }\n    list.push(manipulator);\n    publicAPI.modified();\n    return true;\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.addMouseManipulator = manipulator => addManipulator(manipulator, model.mouseManipulators);\n\n  //-------------------------------------------------------------------------\n  publicAPI.addKeyboardManipulator = manipulator => addManipulator(manipulator, model.keyboardManipulators);\n\n  //-------------------------------------------------------------------------\n  publicAPI.addVRManipulator = manipulator => addManipulator(manipulator, model.vrManipulators);\n\n  //-------------------------------------------------------------------------\n  publicAPI.addGestureManipulator = manipulator => addManipulator(manipulator, model.gestureManipulators);\n\n  //-------------------------------------------------------------------------\n  publicAPI.getNumberOfMouseManipulators = () => model.mouseManipulators.length;\n\n  //-------------------------------------------------------------------------\n  publicAPI.getNumberOfKeyboardManipulators = () => model.keyboardManipulators.length;\n\n  //-------------------------------------------------------------------------\n  publicAPI.getNumberOfVRManipulators = () => model.vrManipulators.length;\n\n  //-------------------------------------------------------------------------\n  publicAPI.getNumberOfGestureManipulators = () => model.gestureManipulators.length;\n\n  //-------------------------------------------------------------------------\n  publicAPI.resetCurrentManipulator = () => {\n    model.currentManipulator = null;\n    model.currentWheelManipulator = null;\n  };\n\n  //-------------------------------------------------------------------------\n  // Mouse\n  //-------------------------------------------------------------------------\n  publicAPI.handleLeftButtonPress = callData => {\n    model.previousPosition = callData.position;\n    publicAPI.onButtonDown(1, callData);\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleMiddleButtonPress = callData => {\n    model.previousPosition = callData.position;\n    publicAPI.onButtonDown(2, callData);\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleRightButtonPress = callData => {\n    model.previousPosition = callData.position;\n    publicAPI.onButtonDown(3, callData);\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleButton3D = ed => {\n    if (!ed) {\n      return;\n    }\n\n    // Look for a matching 3D camera interactor.\n    const manipulator = publicAPI.findVRManipulator(ed.device, ed.input, ed.pressed);\n    if (manipulator) {\n      // register the manipulator for this device\n      model.currentVRManipulators.set(ed.device, manipulator);\n      manipulator.onButton3D(publicAPI, model.getRenderer(ed), model.state, ed);\n      if (ed.pressed) {\n        publicAPI.startCameraPose();\n      } else {\n        model.currentVRManipulators.delete(ed.device);\n\n        // make sure we don't end camera pose if other VR manipulators are currently interacting\n        if (model.currentVRManipulators.size === 0) {\n          publicAPI.endCameraPose();\n        }\n      }\n    } else {\n      vtkDebugMacro('No manipulator found');\n    }\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleMove3D = ed => {\n    const manipulator = model.currentVRManipulators.get(ed.device);\n    if (manipulator && model.state === States.IS_CAMERA_POSE) {\n      manipulator.onMove3D(publicAPI, model.getRenderer(ed), model.state, ed);\n    }\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.onButtonDown = (button, callData) => {\n    // Must not be processing an interaction to start another.\n    if (model.currentManipulator) {\n      return;\n    }\n\n    // Look for a matching camera interactor.\n    model.currentManipulator = publicAPI.findMouseManipulator(button, callData.shiftKey, callData.controlKey, callData.altKey);\n    if (model.currentManipulator) {\n      if (model.currentManipulator.setCenter) {\n        model.currentManipulator.setCenter(model.centerOfRotation);\n      }\n      if (model.currentManipulator.setRotationFactor) {\n        model.currentManipulator.setRotationFactor(model.rotationFactor);\n      }\n      model.currentManipulator.startInteraction();\n      model.currentManipulator.onButtonDown(model._interactor, model.getRenderer(callData), callData.position);\n      model._interactor.requestAnimation(publicAPI.onButtonDown);\n      publicAPI.invokeStartInteractionEvent(START_INTERACTION_EVENT);\n    } else {\n      vtkDebugMacro('No manipulator found');\n    }\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.findMouseManipulator = (button, shift, control, alt) => {\n    // Look for a matching camera manipulator\n    let manipulator = null;\n    let count = model.mouseManipulators.length;\n    while (count--) {\n      const manip = model.mouseManipulators[count];\n      if (manip && manip.getButton() === button && manip.getShift() === shift && manip.getControl() === control && manip.getAlt() === alt && manip.isDragEnabled()) {\n        manipulator = manip;\n      }\n    }\n    return manipulator;\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.findVRManipulator = (device, input) => {\n    // Look for a matching camera manipulator\n    let manipulator = null;\n    let count = model.vrManipulators.length;\n    while (count--) {\n      const manip = model.vrManipulators[count];\n      if (manip && manip.getDevice() === device && manip.getInput() === input) {\n        manipulator = manip;\n      }\n    }\n    return manipulator;\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleLeftButtonRelease = () => {\n    publicAPI.onButtonUp(1);\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleMiddleButtonRelease = () => {\n    publicAPI.onButtonUp(2);\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleRightButtonRelease = () => {\n    publicAPI.onButtonUp(3);\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.onButtonUp = button => {\n    if (!model.currentManipulator) {\n      return;\n    }\n    if (model.currentManipulator.getButton && model.currentManipulator.getButton() === button) {\n      model.currentManipulator.onButtonUp(model._interactor);\n      model.currentManipulator.endInteraction();\n      model.currentManipulator = null;\n      model._interactor.cancelAnimation(publicAPI.onButtonDown);\n      publicAPI.invokeEndInteractionEvent(END_INTERACTION_EVENT);\n    }\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleStartMouseWheel = callData => {\n    // Must not be processing a wheel interaction to start another.\n    if (model.currentWheelManipulator) {\n      return;\n    }\n    let manipulator = null;\n    let count = model.mouseManipulators.length;\n    while (count--) {\n      const manip = model.mouseManipulators[count];\n      if (manip && manip.isScrollEnabled() && manip.getShift() === callData.shiftKey && manip.getControl() === callData.controlKey && manip.getAlt() === callData.altKey) {\n        manipulator = manip;\n      }\n    }\n    if (manipulator) {\n      model.currentWheelManipulator = manipulator;\n      model.currentWheelManipulator.onStartScroll(model._interactor, model.getRenderer(callData), callData.spinY);\n      model.currentWheelManipulator.startInteraction();\n      model._interactor.requestAnimation(publicAPI.handleStartMouseWheel);\n      publicAPI.invokeStartInteractionEvent(START_INTERACTION_EVENT);\n    } else {\n      vtkDebugMacro('No manipulator found');\n    }\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleEndMouseWheel = () => {\n    if (!model.currentWheelManipulator) {\n      return;\n    }\n    if (model.currentWheelManipulator.onEndScroll) {\n      model.currentWheelManipulator.onEndScroll(model._interactor);\n      model.currentWheelManipulator.endInteraction();\n      model.currentWheelManipulator = null;\n      model._interactor.cancelAnimation(publicAPI.handleStartMouseWheel);\n      publicAPI.invokeEndInteractionEvent(END_INTERACTION_EVENT);\n    }\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleMouseWheel = callData => {\n    if (model.currentWheelManipulator && model.currentWheelManipulator.onScroll) {\n      model.currentWheelManipulator.onScroll(model._interactor, model.getRenderer(callData), callData.spinY, model.cachedMousePosition);\n      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);\n    }\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleMouseMove = callData => {\n    model.cachedMousePosition = callData.position;\n    if (model.currentManipulator && model.currentManipulator.onMouseMove) {\n      model.currentManipulator.onMouseMove(model._interactor, model.getRenderer(callData), callData.position);\n      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);\n    }\n  };\n\n  //-------------------------------------------------------------------------\n  // Keyboard\n  //-------------------------------------------------------------------------\n  publicAPI.handleKeyPress = callData => {\n    model.keyboardManipulators.filter(m => m.onKeyPress).forEach(manipulator => {\n      manipulator.onKeyPress(model._interactor, model.getRenderer(callData), callData.key);\n      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);\n    });\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleKeyDown = callData => {\n    model.keyboardManipulators.filter(m => m.onKeyDown).forEach(manipulator => {\n      manipulator.onKeyDown(model._interactor, model.getRenderer(callData), callData.key);\n      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);\n    });\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleKeyUp = callData => {\n    model.keyboardManipulators.filter(m => m.onKeyUp).forEach(manipulator => {\n      manipulator.onKeyUp(model._interactor, model.getRenderer(callData), callData.key);\n      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);\n    });\n  };\n\n  //-------------------------------------------------------------------------\n  // Gesture\n  //-------------------------------------------------------------------------\n\n  publicAPI.handleStartPinch = callData => {\n    publicAPI.startDolly();\n    let count = model.gestureManipulators.length;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isPinchEnabled()) {\n        manipulator.onStartPinch(model._interactor, callData.scale);\n        manipulator.startInteraction();\n      }\n    }\n    model._interactor.requestAnimation(publicAPI.handleStartPinch);\n    publicAPI.invokeStartInteractionEvent(START_INTERACTION_EVENT);\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndPinch = () => {\n    publicAPI.endDolly();\n    let count = model.gestureManipulators.length;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isPinchEnabled()) {\n        manipulator.onEndPinch(model._interactor);\n        manipulator.endInteraction();\n      }\n    }\n    model._interactor.cancelAnimation(publicAPI.handleStartPinch);\n    publicAPI.invokeEndInteractionEvent(END_INTERACTION_EVENT);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleStartRotate = callData => {\n    publicAPI.startRotate();\n    let count = model.gestureManipulators.length;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isRotateEnabled()) {\n        manipulator.onStartRotate(model._interactor, callData.rotation);\n        manipulator.startInteraction();\n      }\n    }\n    model._interactor.requestAnimation(publicAPI.handleStartRotate);\n    publicAPI.invokeStartInteractionEvent(START_INTERACTION_EVENT);\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndRotate = () => {\n    publicAPI.endRotate();\n    let count = model.gestureManipulators.length;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isRotateEnabled()) {\n        manipulator.onEndRotate(model._interactor);\n        manipulator.endInteraction();\n      }\n    }\n    model._interactor.cancelAnimation(publicAPI.handleStartRotate);\n    publicAPI.invokeEndInteractionEvent(END_INTERACTION_EVENT);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleStartPan = callData => {\n    publicAPI.startPan();\n    let count = model.gestureManipulators.length;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isPanEnabled()) {\n        manipulator.onStartPan(model._interactor, callData.translation);\n        manipulator.startInteraction();\n      }\n    }\n    model._interactor.requestAnimation(publicAPI.handleStartPan);\n    publicAPI.invokeStartInteractionEvent(START_INTERACTION_EVENT);\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndPan = () => {\n    publicAPI.endPan();\n    let count = model.gestureManipulators.length;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isPanEnabled()) {\n        manipulator.onEndPan(model._interactor);\n        manipulator.endInteraction();\n      }\n    }\n    model._interactor.cancelAnimation(publicAPI.handleStartPan);\n    publicAPI.invokeEndInteractionEvent(END_INTERACTION_EVENT);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handlePinch = callData => {\n    let count = model.gestureManipulators.length;\n    let actionCount = 0;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isPinchEnabled()) {\n        manipulator.onPinch(model._interactor, model.getRenderer(callData), callData.scale);\n        actionCount++;\n      }\n    }\n    if (actionCount) {\n      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handlePan = callData => {\n    let count = model.gestureManipulators.length;\n    let actionCount = 0;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isPanEnabled()) {\n        manipulator.onPan(model._interactor, model.getRenderer(callData), callData.translation);\n        actionCount++;\n      }\n    }\n    if (actionCount) {\n      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleRotate = callData => {\n    let count = model.gestureManipulators.length;\n    let actionCount = 0;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isRotateEnabled()) {\n        manipulator.onRotate(model._interactor, model.getRenderer(callData), callData.rotation);\n        actionCount++;\n      }\n    }\n    if (actionCount) {\n      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst defaultValues = initialValues => ({\n  cachedMousePosition: null,\n  currentManipulator: null,\n  currentWheelManipulator: null,\n  // mouseManipulators: null,\n  // keyboardManipulators: null,\n  // vrManipulators: null,\n  // gestureManipulators: null,\n  centerOfRotation: [0, 0, 0],\n  rotationFactor: 1,\n  ...initialValues\n});\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues));\n\n  // Inheritance\n  vtkInteractorStyle.extend(publicAPI, model, initialValues);\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, ['rotationFactor']);\n  macro.get(publicAPI, model, ['mouseManipulators', 'keyboardManipulators', 'vrManipulators', 'gestureManipulators']);\n  macro.setGetArray(publicAPI, model, ['centerOfRotation'], 3);\n\n  // Object specific methods\n  vtkInteractorStyleManipulator(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkInteractorStyleManipulator');\n\n// ----------------------------------------------------------------------------\n\nvar vtkInteractorStyleManipulator$1 = {\n  newInstance,\n  extend,\n  ...STATIC\n};\nexport { STATIC, vtkInteractorStyleManipulator$1 as default, extend, newInstance };","map":{"version":3,"names":["m","macro","vtkInteractorStyle","vtkDebugMacro","States","START_INTERACTION_EVENT","type","INTERACTION_EVENT","END_INTERACTION_EVENT","translateCamera","renderer","rwi","toX","toY","fromX","fromY","cam","getActiveCamera","viewFocus","getFocalPoint","getInteractorStyle","computeWorldToDisplay","focalDepth","newPickPoint","computeDisplayToWorld","oldPickPoint","motionVector","viewPoint","getPosition","setFocalPoint","setPosition","dollyToPosition","fact","position","getParallelProjection","view","getView","aSize","getViewportSize","viewport","getViewport","viewSize","getSize","w","h","x0","y0","x1","x","y1","y","setParallelScale","getParallelScale","norm","getViewPlaneNormal","newFp","dolly","resetCameraClippingRange","newCameraPos","newPoint","t","dollyByFactor","interactor","factor","Number","isNaN","camera","getLightFollowCamera","updateLightsGeometryToFollowCamera","STATIC","vtkInteractorStyleManipulator","publicAPI","model","classHierarchy","push","currentVRManipulators","Map","mouseManipulators","keyboardManipulators","vrManipulators","gestureManipulators","currentManipulator","currentWheelManipulator","centerOfRotation","rotationFactor","removeAllManipulators","removeAllMouseManipulators","removeAllKeyboardManipulators","removeAllVRManipulators","removeAllGestureManipulators","removeManipulator","manipulator","list","index","indexOf","splice","modified","removeMouseManipulator","removeKeyboardManipulator","removeVRManipulator","removeGestureManipulator","addManipulator","addMouseManipulator","addKeyboardManipulator","addVRManipulator","addGestureManipulator","getNumberOfMouseManipulators","length","getNumberOfKeyboardManipulators","getNumberOfVRManipulators","getNumberOfGestureManipulators","resetCurrentManipulator","handleLeftButtonPress","callData","previousPosition","onButtonDown","handleMiddleButtonPress","handleRightButtonPress","handleButton3D","ed","findVRManipulator","device","input","pressed","set","onButton3D","getRenderer","state","startCameraPose","delete","size","endCameraPose","handleMove3D","get","IS_CAMERA_POSE","onMove3D","button","findMouseManipulator","shiftKey","controlKey","altKey","setCenter","setRotationFactor","startInteraction","_interactor","requestAnimation","invokeStartInteractionEvent","shift","control","alt","count","manip","getButton","getShift","getControl","getAlt","isDragEnabled","getDevice","getInput","handleLeftButtonRelease","onButtonUp","handleMiddleButtonRelease","handleRightButtonRelease","endInteraction","cancelAnimation","invokeEndInteractionEvent","handleStartMouseWheel","isScrollEnabled","onStartScroll","spinY","handleEndMouseWheel","onEndScroll","handleMouseWheel","onScroll","cachedMousePosition","invokeInteractionEvent","handleMouseMove","onMouseMove","handleKeyPress","filter","onKeyPress","forEach","key","handleKeyDown","onKeyDown","handleKeyUp","onKeyUp","handleStartPinch","startDolly","isPinchEnabled","onStartPinch","scale","handleEndPinch","endDolly","onEndPinch","handleStartRotate","startRotate","isRotateEnabled","onStartRotate","rotation","handleEndRotate","endRotate","onEndRotate","handleStartPan","startPan","isPanEnabled","onStartPan","translation","handleEndPan","endPan","onEndPan","handlePinch","actionCount","onPinch","handlePan","onPan","handleRotate","onRotate","defaultValues","initialValues","extend","arguments","undefined","Object","assign","setGet","setGetArray","newInstance","vtkInteractorStyleManipulator$1","default"],"sources":["/home/ims/VSCodeProjects/TickerWeb/TickerWeb_Vue/node_modules/@kitware/vtk.js/Interaction/Style/InteractorStyleManipulator.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport vtkInteractorStyle from '../../Rendering/Core/InteractorStyle.js';\n\nconst {\n  vtkDebugMacro\n} = macro;\nconst {\n  States\n} = vtkInteractorStyle;\n\n// ----------------------------------------------------------------------------\n// Event Types\n// ----------------------------------------------------------------------------\n\nconst START_INTERACTION_EVENT = {\n  type: 'StartInteractionEvent'\n};\nconst INTERACTION_EVENT = {\n  type: 'InteractionEvent'\n};\nconst END_INTERACTION_EVENT = {\n  type: 'EndInteractionEvent'\n};\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nfunction translateCamera(renderer, rwi, toX, toY, fromX, fromY) {\n  const cam = renderer.getActiveCamera();\n  let viewFocus = cam.getFocalPoint();\n  viewFocus = rwi.getInteractorStyle().computeWorldToDisplay(renderer, viewFocus[0], viewFocus[1], viewFocus[2]);\n  const focalDepth = viewFocus[2];\n  const newPickPoint = rwi.getInteractorStyle().computeDisplayToWorld(renderer, toX, toY, focalDepth);\n  const oldPickPoint = rwi.getInteractorStyle().computeDisplayToWorld(renderer, fromX, fromY, focalDepth);\n\n  // camera motion is reversed\n  const motionVector = [oldPickPoint[0] - newPickPoint[0], oldPickPoint[1] - newPickPoint[1], oldPickPoint[2] - newPickPoint[2]];\n  viewFocus = cam.getFocalPoint();\n  const viewPoint = cam.getPosition();\n  cam.setFocalPoint(motionVector[0] + viewFocus[0], motionVector[1] + viewFocus[1], motionVector[2] + viewFocus[2]);\n  cam.setPosition(motionVector[0] + viewPoint[0], motionVector[1] + viewPoint[1], motionVector[2] + viewPoint[2]);\n}\nfunction dollyToPosition(fact, position, renderer, rwi) {\n  const cam = renderer.getActiveCamera();\n  if (cam.getParallelProjection()) {\n    // Zoom relatively to the cursor\n    const view = rwi.getView();\n    const aSize = view.getViewportSize(renderer);\n    const viewport = renderer.getViewport();\n    const viewSize = view.getSize();\n    const w = aSize[0];\n    const h = aSize[1];\n    const x0 = w / 2;\n    const y0 = h / 2;\n    const x1 = position.x - viewport[0] * viewSize[0];\n    const y1 = position.y - viewport[1] * viewSize[1];\n    translateCamera(renderer, rwi, x0, y0, x1, y1);\n    cam.setParallelScale(cam.getParallelScale() / fact);\n    translateCamera(renderer, rwi, x1, y1, x0, y0);\n  } else {\n    // Zoom relatively to the cursor position\n\n    // Move focal point to cursor position\n    let viewFocus = cam.getFocalPoint();\n    const norm = cam.getViewPlaneNormal();\n    viewFocus = rwi.getInteractorStyle().computeWorldToDisplay(renderer, viewFocus[0], viewFocus[1], viewFocus[2]);\n    const newFp = rwi.getInteractorStyle().computeDisplayToWorld(renderer, position.x, position.y, viewFocus[2]);\n    cam.setFocalPoint(newFp[0], newFp[1], newFp[2]);\n\n    // Move camera in/out along projection direction\n    cam.dolly(fact);\n    renderer.resetCameraClippingRange();\n\n    // Find new focal point\n    const newCameraPos = cam.getPosition();\n    viewFocus = cam.getFocalPoint();\n    const newPoint = [0, 0, 0];\n    let t = norm[0] * (viewFocus[0] - newCameraPos[0]) + norm[1] * (viewFocus[1] - newCameraPos[1]) + norm[2] * (viewFocus[2] - newCameraPos[2]);\n    t /= norm[0] ** 2 + norm[1] ** 2 + norm[2] ** 2;\n    newPoint[0] = newCameraPos[0] + norm[0] * t;\n    newPoint[1] = newCameraPos[1] + norm[1] * t;\n    newPoint[2] = newCameraPos[2] + norm[2] * t;\n    cam.setFocalPoint(newPoint[0], newPoint[1], newPoint[2]);\n    renderer.resetCameraClippingRange();\n  }\n}\nfunction dollyByFactor(interactor, renderer, factor) {\n  if (Number.isNaN(factor)) {\n    return;\n  }\n  const camera = renderer.getActiveCamera();\n  if (camera.getParallelProjection()) {\n    camera.setParallelScale(camera.getParallelScale() / factor);\n  } else {\n    camera.dolly(factor);\n    renderer.resetCameraClippingRange();\n  }\n  if (interactor.getLightFollowCamera()) {\n    renderer.updateLightsGeometryToFollowCamera();\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {\n  dollyToPosition,\n  translateCamera,\n  dollyByFactor\n};\n\n// ----------------------------------------------------------------------------\n// vtkInteractorStyleManipulator methods\n// ----------------------------------------------------------------------------\n\nfunction vtkInteractorStyleManipulator(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkInteractorStyleManipulator');\n  model.currentVRManipulators = new Map();\n  model.mouseManipulators = [];\n  model.keyboardManipulators = [];\n  model.vrManipulators = [];\n  model.gestureManipulators = [];\n  model.currentManipulator = null;\n  model.currentWheelManipulator = null;\n  model.centerOfRotation = [0, 0, 0];\n  model.rotationFactor = 1;\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeAllManipulators = () => {\n    publicAPI.removeAllMouseManipulators();\n    publicAPI.removeAllKeyboardManipulators();\n    publicAPI.removeAllVRManipulators();\n    publicAPI.removeAllGestureManipulators();\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeAllMouseManipulators = () => {\n    model.mouseManipulators = [];\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeAllKeyboardManipulators = () => {\n    model.keyboardManipulators = [];\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeAllVRManipulators = () => {\n    model.vrManipulators = [];\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeAllGestureManipulators = () => {\n    model.gestureManipulators = [];\n  };\n\n  //-------------------------------------------------------------------------\n  const removeManipulator = (manipulator, list) => {\n    const index = list.indexOf(manipulator);\n    if (index === -1) {\n      return false;\n    }\n    list.splice(index, 1);\n    publicAPI.modified();\n    return true;\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeMouseManipulator = manipulator => removeManipulator(manipulator, model.mouseManipulators);\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeKeyboardManipulator = manipulator => removeManipulator(manipulator, model.keyboardManipulators);\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeVRManipulator = manipulator => removeManipulator(manipulator, model.vrManipulators);\n\n  //-------------------------------------------------------------------------\n  publicAPI.removeGestureManipulator = manipulator => removeManipulator(manipulator, model.gestureManipulators);\n\n  //-------------------------------------------------------------------------\n  const addManipulator = (manipulator, list) => {\n    const index = list.indexOf(manipulator);\n    if (index !== -1) {\n      return false;\n    }\n    list.push(manipulator);\n    publicAPI.modified();\n    return true;\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.addMouseManipulator = manipulator => addManipulator(manipulator, model.mouseManipulators);\n\n  //-------------------------------------------------------------------------\n  publicAPI.addKeyboardManipulator = manipulator => addManipulator(manipulator, model.keyboardManipulators);\n\n  //-------------------------------------------------------------------------\n  publicAPI.addVRManipulator = manipulator => addManipulator(manipulator, model.vrManipulators);\n\n  //-------------------------------------------------------------------------\n  publicAPI.addGestureManipulator = manipulator => addManipulator(manipulator, model.gestureManipulators);\n\n  //-------------------------------------------------------------------------\n  publicAPI.getNumberOfMouseManipulators = () => model.mouseManipulators.length;\n\n  //-------------------------------------------------------------------------\n  publicAPI.getNumberOfKeyboardManipulators = () => model.keyboardManipulators.length;\n\n  //-------------------------------------------------------------------------\n  publicAPI.getNumberOfVRManipulators = () => model.vrManipulators.length;\n\n  //-------------------------------------------------------------------------\n  publicAPI.getNumberOfGestureManipulators = () => model.gestureManipulators.length;\n\n  //-------------------------------------------------------------------------\n  publicAPI.resetCurrentManipulator = () => {\n    model.currentManipulator = null;\n    model.currentWheelManipulator = null;\n  };\n\n  //-------------------------------------------------------------------------\n  // Mouse\n  //-------------------------------------------------------------------------\n  publicAPI.handleLeftButtonPress = callData => {\n    model.previousPosition = callData.position;\n    publicAPI.onButtonDown(1, callData);\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleMiddleButtonPress = callData => {\n    model.previousPosition = callData.position;\n    publicAPI.onButtonDown(2, callData);\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleRightButtonPress = callData => {\n    model.previousPosition = callData.position;\n    publicAPI.onButtonDown(3, callData);\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleButton3D = ed => {\n    if (!ed) {\n      return;\n    }\n\n    // Look for a matching 3D camera interactor.\n    const manipulator = publicAPI.findVRManipulator(ed.device, ed.input, ed.pressed);\n    if (manipulator) {\n      // register the manipulator for this device\n      model.currentVRManipulators.set(ed.device, manipulator);\n      manipulator.onButton3D(publicAPI, model.getRenderer(ed), model.state, ed);\n      if (ed.pressed) {\n        publicAPI.startCameraPose();\n      } else {\n        model.currentVRManipulators.delete(ed.device);\n\n        // make sure we don't end camera pose if other VR manipulators are currently interacting\n        if (model.currentVRManipulators.size === 0) {\n          publicAPI.endCameraPose();\n        }\n      }\n    } else {\n      vtkDebugMacro('No manipulator found');\n    }\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleMove3D = ed => {\n    const manipulator = model.currentVRManipulators.get(ed.device);\n    if (manipulator && model.state === States.IS_CAMERA_POSE) {\n      manipulator.onMove3D(publicAPI, model.getRenderer(ed), model.state, ed);\n    }\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.onButtonDown = (button, callData) => {\n    // Must not be processing an interaction to start another.\n    if (model.currentManipulator) {\n      return;\n    }\n\n    // Look for a matching camera interactor.\n    model.currentManipulator = publicAPI.findMouseManipulator(button, callData.shiftKey, callData.controlKey, callData.altKey);\n    if (model.currentManipulator) {\n      if (model.currentManipulator.setCenter) {\n        model.currentManipulator.setCenter(model.centerOfRotation);\n      }\n      if (model.currentManipulator.setRotationFactor) {\n        model.currentManipulator.setRotationFactor(model.rotationFactor);\n      }\n      model.currentManipulator.startInteraction();\n      model.currentManipulator.onButtonDown(model._interactor, model.getRenderer(callData), callData.position);\n      model._interactor.requestAnimation(publicAPI.onButtonDown);\n      publicAPI.invokeStartInteractionEvent(START_INTERACTION_EVENT);\n    } else {\n      vtkDebugMacro('No manipulator found');\n    }\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.findMouseManipulator = (button, shift, control, alt) => {\n    // Look for a matching camera manipulator\n    let manipulator = null;\n    let count = model.mouseManipulators.length;\n    while (count--) {\n      const manip = model.mouseManipulators[count];\n      if (manip && manip.getButton() === button && manip.getShift() === shift && manip.getControl() === control && manip.getAlt() === alt && manip.isDragEnabled()) {\n        manipulator = manip;\n      }\n    }\n    return manipulator;\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.findVRManipulator = (device, input) => {\n    // Look for a matching camera manipulator\n    let manipulator = null;\n    let count = model.vrManipulators.length;\n    while (count--) {\n      const manip = model.vrManipulators[count];\n      if (manip && manip.getDevice() === device && manip.getInput() === input) {\n        manipulator = manip;\n      }\n    }\n    return manipulator;\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleLeftButtonRelease = () => {\n    publicAPI.onButtonUp(1);\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleMiddleButtonRelease = () => {\n    publicAPI.onButtonUp(2);\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleRightButtonRelease = () => {\n    publicAPI.onButtonUp(3);\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.onButtonUp = button => {\n    if (!model.currentManipulator) {\n      return;\n    }\n    if (model.currentManipulator.getButton && model.currentManipulator.getButton() === button) {\n      model.currentManipulator.onButtonUp(model._interactor);\n      model.currentManipulator.endInteraction();\n      model.currentManipulator = null;\n      model._interactor.cancelAnimation(publicAPI.onButtonDown);\n      publicAPI.invokeEndInteractionEvent(END_INTERACTION_EVENT);\n    }\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleStartMouseWheel = callData => {\n    // Must not be processing a wheel interaction to start another.\n    if (model.currentWheelManipulator) {\n      return;\n    }\n    let manipulator = null;\n    let count = model.mouseManipulators.length;\n    while (count--) {\n      const manip = model.mouseManipulators[count];\n      if (manip && manip.isScrollEnabled() && manip.getShift() === callData.shiftKey && manip.getControl() === callData.controlKey && manip.getAlt() === callData.altKey) {\n        manipulator = manip;\n      }\n    }\n    if (manipulator) {\n      model.currentWheelManipulator = manipulator;\n      model.currentWheelManipulator.onStartScroll(model._interactor, model.getRenderer(callData), callData.spinY);\n      model.currentWheelManipulator.startInteraction();\n      model._interactor.requestAnimation(publicAPI.handleStartMouseWheel);\n      publicAPI.invokeStartInteractionEvent(START_INTERACTION_EVENT);\n    } else {\n      vtkDebugMacro('No manipulator found');\n    }\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleEndMouseWheel = () => {\n    if (!model.currentWheelManipulator) {\n      return;\n    }\n    if (model.currentWheelManipulator.onEndScroll) {\n      model.currentWheelManipulator.onEndScroll(model._interactor);\n      model.currentWheelManipulator.endInteraction();\n      model.currentWheelManipulator = null;\n      model._interactor.cancelAnimation(publicAPI.handleStartMouseWheel);\n      publicAPI.invokeEndInteractionEvent(END_INTERACTION_EVENT);\n    }\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleMouseWheel = callData => {\n    if (model.currentWheelManipulator && model.currentWheelManipulator.onScroll) {\n      model.currentWheelManipulator.onScroll(model._interactor, model.getRenderer(callData), callData.spinY, model.cachedMousePosition);\n      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);\n    }\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleMouseMove = callData => {\n    model.cachedMousePosition = callData.position;\n    if (model.currentManipulator && model.currentManipulator.onMouseMove) {\n      model.currentManipulator.onMouseMove(model._interactor, model.getRenderer(callData), callData.position);\n      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);\n    }\n  };\n\n  //-------------------------------------------------------------------------\n  // Keyboard\n  //-------------------------------------------------------------------------\n  publicAPI.handleKeyPress = callData => {\n    model.keyboardManipulators.filter(m => m.onKeyPress).forEach(manipulator => {\n      manipulator.onKeyPress(model._interactor, model.getRenderer(callData), callData.key);\n      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);\n    });\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleKeyDown = callData => {\n    model.keyboardManipulators.filter(m => m.onKeyDown).forEach(manipulator => {\n      manipulator.onKeyDown(model._interactor, model.getRenderer(callData), callData.key);\n      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);\n    });\n  };\n\n  //-------------------------------------------------------------------------\n  publicAPI.handleKeyUp = callData => {\n    model.keyboardManipulators.filter(m => m.onKeyUp).forEach(manipulator => {\n      manipulator.onKeyUp(model._interactor, model.getRenderer(callData), callData.key);\n      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);\n    });\n  };\n\n  //-------------------------------------------------------------------------\n  // Gesture\n  //-------------------------------------------------------------------------\n\n  publicAPI.handleStartPinch = callData => {\n    publicAPI.startDolly();\n    let count = model.gestureManipulators.length;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isPinchEnabled()) {\n        manipulator.onStartPinch(model._interactor, callData.scale);\n        manipulator.startInteraction();\n      }\n    }\n    model._interactor.requestAnimation(publicAPI.handleStartPinch);\n    publicAPI.invokeStartInteractionEvent(START_INTERACTION_EVENT);\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndPinch = () => {\n    publicAPI.endDolly();\n    let count = model.gestureManipulators.length;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isPinchEnabled()) {\n        manipulator.onEndPinch(model._interactor);\n        manipulator.endInteraction();\n      }\n    }\n    model._interactor.cancelAnimation(publicAPI.handleStartPinch);\n    publicAPI.invokeEndInteractionEvent(END_INTERACTION_EVENT);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleStartRotate = callData => {\n    publicAPI.startRotate();\n    let count = model.gestureManipulators.length;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isRotateEnabled()) {\n        manipulator.onStartRotate(model._interactor, callData.rotation);\n        manipulator.startInteraction();\n      }\n    }\n    model._interactor.requestAnimation(publicAPI.handleStartRotate);\n    publicAPI.invokeStartInteractionEvent(START_INTERACTION_EVENT);\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndRotate = () => {\n    publicAPI.endRotate();\n    let count = model.gestureManipulators.length;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isRotateEnabled()) {\n        manipulator.onEndRotate(model._interactor);\n        manipulator.endInteraction();\n      }\n    }\n    model._interactor.cancelAnimation(publicAPI.handleStartRotate);\n    publicAPI.invokeEndInteractionEvent(END_INTERACTION_EVENT);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleStartPan = callData => {\n    publicAPI.startPan();\n    let count = model.gestureManipulators.length;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isPanEnabled()) {\n        manipulator.onStartPan(model._interactor, callData.translation);\n        manipulator.startInteraction();\n      }\n    }\n    model._interactor.requestAnimation(publicAPI.handleStartPan);\n    publicAPI.invokeStartInteractionEvent(START_INTERACTION_EVENT);\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndPan = () => {\n    publicAPI.endPan();\n    let count = model.gestureManipulators.length;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isPanEnabled()) {\n        manipulator.onEndPan(model._interactor);\n        manipulator.endInteraction();\n      }\n    }\n    model._interactor.cancelAnimation(publicAPI.handleStartPan);\n    publicAPI.invokeEndInteractionEvent(END_INTERACTION_EVENT);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handlePinch = callData => {\n    let count = model.gestureManipulators.length;\n    let actionCount = 0;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isPinchEnabled()) {\n        manipulator.onPinch(model._interactor, model.getRenderer(callData), callData.scale);\n        actionCount++;\n      }\n    }\n    if (actionCount) {\n      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handlePan = callData => {\n    let count = model.gestureManipulators.length;\n    let actionCount = 0;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isPanEnabled()) {\n        manipulator.onPan(model._interactor, model.getRenderer(callData), callData.translation);\n        actionCount++;\n      }\n    }\n    if (actionCount) {\n      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleRotate = callData => {\n    let count = model.gestureManipulators.length;\n    let actionCount = 0;\n    while (count--) {\n      const manipulator = model.gestureManipulators[count];\n      if (manipulator && manipulator.isRotateEnabled()) {\n        manipulator.onRotate(model._interactor, model.getRenderer(callData), callData.rotation);\n        actionCount++;\n      }\n    }\n    if (actionCount) {\n      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst defaultValues = initialValues => ({\n  cachedMousePosition: null,\n  currentManipulator: null,\n  currentWheelManipulator: null,\n  // mouseManipulators: null,\n  // keyboardManipulators: null,\n  // vrManipulators: null,\n  // gestureManipulators: null,\n  centerOfRotation: [0, 0, 0],\n  rotationFactor: 1,\n  ...initialValues\n});\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues));\n\n  // Inheritance\n  vtkInteractorStyle.extend(publicAPI, model, initialValues);\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, ['rotationFactor']);\n  macro.get(publicAPI, model, ['mouseManipulators', 'keyboardManipulators', 'vrManipulators', 'gestureManipulators']);\n  macro.setGetArray(publicAPI, model, ['centerOfRotation'], 3);\n\n  // Object specific methods\n  vtkInteractorStyleManipulator(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkInteractorStyleManipulator');\n\n// ----------------------------------------------------------------------------\n\nvar vtkInteractorStyleManipulator$1 = {\n  newInstance,\n  extend,\n  ...STATIC\n};\n\nexport { STATIC, vtkInteractorStyleManipulator$1 as default, extend, newInstance };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}