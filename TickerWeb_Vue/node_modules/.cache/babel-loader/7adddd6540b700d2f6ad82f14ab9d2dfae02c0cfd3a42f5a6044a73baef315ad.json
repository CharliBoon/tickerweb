{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nimport { ref, reactive, unref, onMounted, onBeforeUnmount, watchEffect, watch, computed } from 'vue';\n// vtk\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry'; // geometry rendering for WebGL, WebGPU\nimport '@kitware/vtk.js/Rendering/Profiles/Glyph'; // vtkGlyph3DMapper\nimport '@kitware/vtk.js/Rendering/Profiles/Molecule'; // vtkSphereMapper\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\n//\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkXMLImageDataReader from '@kitware/vtk.js/IO/XML/XMLImageDataReader';\nimport vtkGlyph3DMapper from '@kitware/vtk.js/Rendering/Core/Glyph3DMapper';\nimport vtkCubeSource from '@kitware/vtk.js/Filters/Sources/CubeSource';\nimport vtkSphereMapper from '@kitware/vtk.js/Rendering/Core/SphereMapper';\nimport vtkImageMarchingCubes from '@kitware/vtk.js/Filters/General/ImageMarchingCubes';\nimport vtkOutlineFilter from '@kitware/vtk.js/Filters/General/OutlineFilter';\n//\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkPoints from '@kitware/vtk.js/Common/Core/Points';\nimport vtkCellArray from '@kitware/vtk.js/Common/Core/CellArray';\nimport vtkLookupTable from '@kitware/vtk.js/Common/Core/LookupTable';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkPicker from '@kitware/vtk.js/Rendering/Core/Picker';\nexport default {\n  setup() {\n    const selectedMine = ref('Bambanani'); // Default mine\n    const session = reactive({\n      user: 'user',\n      mine: selectedMine.value\n    });\n    let urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.has('mine')) {\n      selectedMine.value = urlParams.get('mine'); // Update the value of selectedMine\n      session.mine = selectedMine.value; // Update session.mine to match selectedMine\n    }\n\n    // Update the URL to remove query parameters\n    window.history.replaceState({}, document.title, window.location.pathname);\n\n    //const session = {user: 'malcolm', mine:'Bambanani'}\n\n    let nodes = {\n      'data': [],\n      'meta': {}\n    }; // node data - response getNodes - for table, polydata\n    let events = {\n      'data': [],\n      'meta': {}\n    }; // event data - response getEvents - for table, polydata\n\n    let bounds = null; // new Array(6).fill(0.0)\n\n    const vtkContainer = ref(null);\n    const context = ref(null);\n    const showSettings = ref(false);\n    const node_representation = ref(0);\n    const events_opacity = ref(50);\n    const events_timestamp = ref(0);\n    const events_timestamp_min = ref(0);\n    const events_timestamp_max = ref(0);\n    const plan_opacity = ref(100);\n    const plan_representation = ref(1);\n    const volume_opacity = ref(15);\n    const volume_iso = ref(2500);\n    const volume_min = ref(0);\n    const volume_max = ref(0);\n    const mines = ref([]);\n    const formattedTimestamp = computed(() => {\n      if (!events_timestamp.value) return 'Loading...'; // Check if it's defined\n      const date = new Date(events_timestamp.value); // Use .value to access the actual value\n      const yyyy = date.getFullYear();\n      const MM = String(date.getMonth() + 1).padStart(2, '0');\n      const dd = String(date.getDate()).padStart(2, '0');\n      const HH = String(date.getHours()).padStart(2, '0');\n      const mm = String(date.getMinutes()).padStart(2, '0');\n      const ss = String(date.getSeconds()).padStart(2, '0');\n      return `${yyyy}/${MM}/${dd} ${HH}:${mm}:${ss}`;\n    });\n    const textEncoder = new TextEncoder();\n    const path = 'http://localhost:5000';\n    //const path = 'http://192.168.0.2:5000';\n\n    // nodes\n    const node_lut = vtkLookupTable.newInstance(); // make custom LUT\n    const data = new Uint8Array([0, 255, 0, 255, 255, 165, 80, 255, 255, 0, 0, 255]); // RGBA: green, orange, red\n    const table = vtkDataArray.newInstance({\n      values: data,\n      numberOfComponents: 4\n    }); // to VTK\n    node_lut.setTable(table); // LUT = green, orange, red\n\n    const node_glyph = vtkCubeSource.newInstance();\n    const node_mapper = vtkGlyph3DMapper.newInstance();\n    const node_actor = vtkActor.newInstance();\n    //\n    node_mapper.setScalarModeToUsePointData();\n    node_mapper.setScalarVisibility(true);\n    node_mapper.setScalarRange(1, 3);\n    node_mapper.setLookupTable(node_lut);\n    node_mapper.setScaleFactor(10.0);\n    node_actor.setMapper(node_mapper);\n    //node_actor.getProperty().setAmbient(0.5)\n\n    // plan\n    const plan_reader = vtkXMLPolyDataReader.newInstance();\n    const plan_mapper = vtkMapper.newInstance();\n    const plan_actor = vtkActor.newInstance();\n    //\n    plan_mapper.setInputConnection(plan_reader.getOutputPort());\n    plan_actor.setMapper(plan_mapper);\n    plan_actor.getProperty().setOpacity(0.25);\n    plan_actor.getProperty().setColor(0.5, 0.5, 0.5);\n\n    // volume\n    const volume_reader = vtkXMLImageDataReader.newInstance();\n    const volume_mapper = vtkMapper.newInstance();\n    const volume_actor = vtkActor.newInstance();\n    //\n    const volume_surface = vtkImageMarchingCubes.newInstance({\n      contourValue: 2500.0,\n      computeNormals: false,\n      mergePoints: false\n    });\n    //volume_mapper.setInputConnection(volume_reader.getOutputPort());\n    volume_surface.setInputConnection(volume_reader.getOutputPort());\n    volume_mapper.setInputConnection(volume_surface.getOutputPort());\n    volume_actor.setMapper(volume_mapper);\n    //volume_actor.getProperty().setOpacity(0.25)\n    //volume_actor.getProperty().setRepresentationToWireframe()\n    volume_actor.getProperty().setColor(0.5, 1.0, 1.0);\n    const outline = vtkOutlineFilter.newInstance();\n    const outline_mapper = vtkMapper.newInstance();\n    const outline_actor = vtkActor.newInstance();\n    outline.setInputConnection(volume_reader.getOutputPort());\n    outline_mapper.setInputConnection(outline.getOutputPort());\n    outline_actor.setMapper(outline_mapper);\n    outline_actor.getProperty().setColor(0.0, 0.0, 0.0);\n\n    // events\n    const events_reader = vtkXMLPolyDataReader.newInstance();\n    const events_mapper = vtkSphereMapper.newInstance();\n    const events_actor = vtkActor.newInstance();\n    //\n    events_mapper.setInputConnection(events_reader.getOutputPort());\n    events_mapper.setScaleFactor(100.0);\n    events_mapper.setScaleArray('scale');\n    events_mapper.setScalarVisibility(true);\n    events_mapper.setScalarModeToUsePointData();\n    events_actor.setMapper(events_mapper);\n    events_actor.getProperty().setOpacity(0.5);\n\n    // Initialize Picker and Renderer\n    const picker = vtkPicker.newInstance();\n\n    // Event handler for picking\n    const handlePick = event => {\n      if (!context.value) {\n        const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value,\n          containerStyle: {\n            position: 'relative',\n            width: '100%',\n            height: '100%'\n          }\n        });\n      }\n      ;\n      const {\n        clientX,\n        clientY\n      } = event;\n      const renderer = fullScreenRenderer.getRenderer();\n      const renderWindow = fullScreenRenderer.getRenderWindow();\n      const [width, height] = renderWindow.getSize(); // replace with your renderWindow instance\n      const x = clientX / window.innerWidth * width;\n      const y = height - clientY / window.innerHeight * height;\n\n      // Perform picking\n      const pickedActor = picker.pick([x, y, 0], renderer); // replace with your renderer\n      if (pickedActor) {\n        console.log('Picked actor:', pickedActor);\n        // Add interaction logic\n      } else {\n        console.log('No actor picked');\n      }\n    };\n    function toggleSettings() {\n      this.showSettings = !this.showSettings;\n    }\n    function setNodeRepresentation(rep) {\n      node_representation.value = Number(rep);\n    }\n    function setEventOpacity(opacity) {\n      events_opacity.value = Number(opacity);\n    }\n    function setEventTimeStamp(res) {\n      events_timestamp.value = Number(res);\n    }\n    function setPlanOpacity(opacity) {\n      plan_opacity.value = Number(opacity);\n    }\n    function setPlanRepresentation(rep) {\n      plan_representation.value = Number(rep);\n    }\n    async function onEventFilter(timestamp) {\n      const {\n        renderWindow\n      } = context.value;\n      filterEventData(timestamp);\n      renderWindow.render();\n    }\n    function setVolumeOpacity(opacity) {\n      volume_opacity.value = Number(opacity);\n    }\n    function setVolumeIso(iso) {\n      volume_iso.value = Number(iso);\n    }\n    async function onVolumeIso(iso_value) {\n      const {\n        renderWindow\n      } = context.value;\n      volume_surface.setContourValue(iso_value);\n      renderWindow.render();\n    }\n    async function fetchMines() {\n      try {\n        const response = await fetch(path + '/mines');\n        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n        const data = await response.json();\n        mines.value = data.map(mine => ({\n          value: mine.id || mine,\n          label: mine.name || mine\n        }));\n      } catch (error) {\n        console.error('Error fetching mines:', error);\n      }\n    }\n\n    // Watch for changes in selectedMine and trigger updates\n    watch(selectedMine, async newMine => {\n      session.mine = newMine; // Update session with new mine\n      console.log(`Mine changed to: ${newMine}`);\n      await getAllAndRender(); // Re-fetch and re-render data for the new mine\n    });\n\n    // provide data to vtk pipelines ------------------------------------------\n\n    // nodes\n\n    function getNodes(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/nodes', args).then(response_get => {\n          nodes = response_get.data;\n          const pd = newPolyDataFromNodes(nodes);\n          node_mapper.setInputData(pd, 0);\n          node_mapper.setInputData(node_glyph.getOutputData(), 1);\n          resolve('nodes_data');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    function newPolyDataFromNodes(nodes) {\n      const nodes_data = nodes['data'];\n      const points = vtkPoints.newInstance();\n      points.setNumberOfPoints(nodes_data.length);\n      const arr_alerts = new Float32Array(nodes_data.length);\n      const arr_verts = [];\n      nodes_data.forEach((node, index) => {\n        arr_alerts[index] = node.alert;\n        arr_verts.push(1, index);\n        points.setPoint(index, node.x, node.y, node.z);\n      });\n      const alerts = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_alerts,\n        name: 'alerts'\n      });\n      const verts = vtkCellArray.newInstance({\n        values: Uint16Array.from(arr_verts)\n      });\n      const pd = vtkPolyData.newInstance();\n      pd.setPoints(points);\n      pd.setVerts(verts);\n      pd.getPointData().setScalars(alerts);\n      return pd;\n    }\n\n    // plan\n\n    function getPlan(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/plan_vtk', args).then(response_get => {\n          plan_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n          resolve('plan');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n\n    // volume\n\n    function getVolume(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/volume_vtk', args).then(response_get => {\n          volume_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n          resolve('volume');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n\n    // events\n\n    function getEvents(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/events', args).then(response_get => {\n          events = response_get.data;\n          const pd = newPolyDataFromEvents(events);\n          events_mapper.setInputData(pd);\n          resolve('events_data');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    function filterEventData(timestamp) {\n      const events_data = events.data.filter(event => {\n        return event.timestamp > timestamp;\n      });\n      const pd = newPolyDataFromEvents({\n        'meta': events.meta,\n        'data': events_data\n      });\n      events_mapper.setInputData(pd);\n    }\n    function newPolyDataFromEvents(events) {\n      const events_data = events.data;\n      const points = vtkPoints.newInstance();\n      points.setNumberOfPoints(events_data.length);\n      const arr_mags = new Float32Array(events_data.length);\n      const arr_timestamp = new Float32Array(events_data.length);\n      const arr_scale = new Float32Array(events_data.length);\n      const arr_verts = [];\n      const offset = 1.0;\n      const min_mag = events['meta'].min_mag;\n      const max_mag = events['meta'].max_mag;\n      events_data.forEach((event_data, index) => {\n        arr_mags[index] = event_data.mag;\n        arr_scale[index] = (offset - min_mag + event_data.mag) / (offset - min_mag + max_mag);\n        arr_timestamp[index] = event_data.timestamp;\n        arr_verts.push(1, index);\n        points.setPoint(index, event_data.x, event_data.y, event_data.z);\n      });\n      const mags = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_mags,\n        name: 'mags'\n      });\n      const scale = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_scale,\n        name: 'scale'\n      });\n      const timestamp = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_timestamp,\n        name: 'timestamp'\n      });\n      const verts = vtkCellArray.newInstance({\n        values: Uint16Array.from(arr_verts)\n      });\n      const pd = vtkPolyData.newInstance();\n      pd.setPoints(points);\n      pd.setVerts(verts);\n      pd.getPointData().addArray(mags);\n      pd.getPointData().addArray(scale);\n      pd.getPointData().addArray(timestamp);\n      pd.getPointData().setActiveAttributeByName('timestamp', 0); // scalars\n      return pd;\n    }\n\n    // all --------------------------------------------------------------------\n\n    async function getAllAndRender() {\n      const {\n        renderWindow,\n        renderer\n      } = context.value;\n      await getNodes({\n        mine: session.mine\n      });\n      console.log('nodes nPts: ' + String(node_mapper.getInputData().getNumberOfPoints()));\n      if (node_mapper.getInputData().getNumberOfPoints() > 0) {\n        bounds = node_mapper.getInputData().getBounds();\n        //console.log('nodes nPts: ' + String(node_mapper.getInputData().getNumberOfPoints()))\n        console.log(bounds);\n        const buffer = 1000.0;\n        bounds[0] -= buffer;\n        bounds[1] += buffer;\n        bounds[2] -= buffer;\n        bounds[3] += buffer;\n        bounds[4] -= buffer;\n        bounds[5] += buffer;\n      } else {\n        bounds = null;\n      }\n      await getVolume({\n        mine: session.mine\n      });\n      if (outline_mapper.getInputData().getNumberOfPoints() > 0 && node_mapper.getInputData().getNumberOfPoints() === 0) {\n        bounds = outline_mapper.getInputData().getBounds();\n        //console.log('nodes nPts: ' + String(node_mapper.getInputData().getNumberOfPoints()))\n        console.log(bounds);\n        const buffer = 1000.0;\n        bounds[0] -= buffer;\n        bounds[1] += buffer;\n        bounds[2] -= buffer;\n        bounds[3] += buffer;\n        bounds[4] -= buffer;\n        bounds[5] += buffer;\n      }\n      //\n      //Promise.allSettled([getPlan({bounds: bounds, mine: session.mine}), getEvents({bounds: bounds, mine: session.mine, timestamp: 0.0}), getVolume({mine: session.mine})]).then(() => {\n      Promise.allSettled([getPlan({\n        bounds: bounds,\n        mine: session.mine\n      }), getEvents({\n        bounds: bounds,\n        mine: session.mine,\n        timestamp: 0.0\n      })]).then(() => {\n        const range = events_mapper.getInputData().getPointData().getScalars().getRange();\n        events_timestamp_min.value = range[0];\n        events_timestamp_max.value = range[1];\n        events_timestamp.value = range[0];\n        events_mapper.setScalarRange(range);\n        //\n        const volume_range = volume_reader.getOutputData().getPointData().getScalars().getRange();\n        volume_min.value = volume_range[0];\n        volume_max.value = volume_range[1];\n        volume_iso.value = (volume_range[0] + volume_range[1]) / 2;\n        volume_mapper.setScalarRange(volume_range);\n        renderer.resetCamera();\n        const camera = renderer.getActiveCamera();\n\n        // Reduce the field of view to zoom in\n        const currentFoV = camera.getViewAngle();\n        const newFoV = currentFoV * 0.2; // Decrease FoV to zoom in (you can adjust this factor)\n\n        camera.setViewAngle(newFoV);\n        renderWindow.render();\n      });\n    }\n    function checkModified() {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/modified', {\n          mine: session.mine\n        }).then(response_get => {\n          console.log(response_get.data);\n          resolve('plan');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    watch(events_timestamp, newValue => {\n      onEventFilter(newValue);\n    });\n    watch(volume_iso, newValue => {\n      onVolumeIso(newValue);\n    });\n    watchEffect(() => {\n      if (context.value) {\n        const {\n          renderWindow\n        } = context.value;\n        console.log(unref(node_representation));\n        node_mapper.setScaleMode(unref(node_representation));\n        node_mapper.update();\n        plan_actor.getProperty().setOpacity(unref(plan_opacity) * 0.01);\n        plan_actor.getProperty().setRepresentation(unref(plan_representation));\n        events_actor.getProperty().setOpacity(unref(events_opacity) * 0.01);\n        volume_actor.getProperty().setOpacity(unref(volume_opacity) * 0.01);\n        renderWindow.render();\n      }\n    });\n    onMounted(() => {\n      console.log('onMounted');\n      fetchMines();\n      if (!context.value) {\n        const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value,\n          containerStyle: {\n            position: 'relative',\n            width: '100%',\n            height: '100%'\n          }\n        });\n        const renderer = fullScreenRenderer.getRenderer();\n        const renderWindow = fullScreenRenderer.getRenderWindow();\n\n        // Set background and enable depth \n        renderer.setBackground(1.0, 1.0, 1.0);\n        renderer.setUseDepthPeeling(false);\n        renderer.setMaximumNumberOfPeels(100);\n        renderer.setOcclusionRatio(0.01);\n        renderer.setInteractive(true);\n\n        // Add actors\n        renderer.addActor(node_actor);\n        renderer.addActor(plan_actor);\n        renderer.addActor(events_actor);\n        renderer.addActor(volume_actor);\n        renderer.addActor(outline_actor);\n\n        // Store context for later access\n        context.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          node_actor,\n          node_mapper,\n          node_glyph,\n          events_actor,\n          events_mapper,\n          plan_reader,\n          plan_mapper,\n          plan_actor,\n          volume_reader,\n          volume_surface,\n          volume_mapper,\n          volume_actor,\n          outline,\n          outline_mapper,\n          outline_actor\n        };\n        renderWindow.render();\n\n        // Render all and start monitoring for changes\n        getAllAndRender();\n\n        // Start the interval for checking modifications\n        context.value.checkModifiedInterval = setInterval(checkModified, 30000);\n      }\n    });\n    onBeforeUnmount(() => {\n      if (context.value) {\n        const {\n          renderer,\n          renderWindow,\n          fullScreenRenderer,\n          node_actor,\n          node_mapper,\n          node_glyph,\n          plan_reader,\n          plan_actor,\n          plan_mapper,\n          events_actor,\n          events_mapper,\n          volume_reader,\n          volume_mapper,\n          volume_actor\n        } = context.value;\n        renderer.removeAllActors();\n        plan_actor.delete();\n        plan_mapper.delete();\n        plan_reader.delete();\n        node_actor.delete();\n        node_mapper.delete();\n        node_glyph.delete();\n        events_actor.delete();\n        events_mapper.delete();\n        volume_actor.delete();\n        volume_mapper.delete();\n        volume_reader.delete();\n        volume_surface.delete();\n        //\n        renderer.delete();\n        renderWindow.delete();\n        //\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n    return {\n      vtkContainer,\n      showSettings,\n      toggleSettings,\n      setNodeRepresentation,\n      setEventOpacity,\n      setEventTimeStamp,\n      setPlanOpacity,\n      setPlanRepresentation,\n      plan_opacity,\n      plan_representation,\n      events_timestamp,\n      events_timestamp_min,\n      events_timestamp_max,\n      events_opacity,\n      node_representation,\n      volume_opacity,\n      setVolumeOpacity,\n      volume_iso,\n      volume_min,\n      volume_max,\n      setVolumeIso,\n      formattedTimestamp,\n      mines,\n      selectedMine\n    };\n  }\n};","map":{"version":3,"names":["axios","ref","reactive","unref","onMounted","onBeforeUnmount","watchEffect","watch","computed","vtkFullScreenRenderWindow","vtkActor","vtkMapper","vtkXMLPolyDataReader","vtkXMLImageDataReader","vtkGlyph3DMapper","vtkCubeSource","vtkSphereMapper","vtkImageMarchingCubes","vtkOutlineFilter","vtkPolyData","vtkPoints","vtkCellArray","vtkLookupTable","vtkDataArray","vtkPicker","setup","selectedMine","session","user","mine","value","urlParams","URLSearchParams","window","location","search","has","get","history","replaceState","document","title","pathname","nodes","events","bounds","vtkContainer","context","showSettings","node_representation","events_opacity","events_timestamp","events_timestamp_min","events_timestamp_max","plan_opacity","plan_representation","volume_opacity","volume_iso","volume_min","volume_max","mines","formattedTimestamp","date","Date","yyyy","getFullYear","MM","String","getMonth","padStart","dd","getDate","HH","getHours","mm","getMinutes","ss","getSeconds","textEncoder","TextEncoder","path","node_lut","newInstance","data","Uint8Array","table","values","numberOfComponents","setTable","node_glyph","node_mapper","node_actor","setScalarModeToUsePointData","setScalarVisibility","setScalarRange","setLookupTable","setScaleFactor","setMapper","plan_reader","plan_mapper","plan_actor","setInputConnection","getOutputPort","getProperty","setOpacity","setColor","volume_reader","volume_mapper","volume_actor","volume_surface","contourValue","computeNormals","mergePoints","outline","outline_mapper","outline_actor","events_reader","events_mapper","events_actor","setScaleArray","picker","handlePick","event","fullScreenRenderer","rootContainer","containerStyle","position","width","height","clientX","clientY","renderer","getRenderer","renderWindow","getRenderWindow","getSize","x","innerWidth","y","innerHeight","pickedActor","pick","console","log","toggleSettings","setNodeRepresentation","rep","Number","setEventOpacity","opacity","setEventTimeStamp","res","setPlanOpacity","setPlanRepresentation","onEventFilter","timestamp","filterEventData","render","setVolumeOpacity","setVolumeIso","iso","onVolumeIso","iso_value","setContourValue","fetchMines","response","fetch","ok","Error","status","json","map","id","label","name","error","newMine","getAllAndRender","getNodes","args","Promise","resolve","reject","put","then","response_get","pd","newPolyDataFromNodes","setInputData","getOutputData","catch","nodes_data","points","setNumberOfPoints","length","arr_alerts","Float32Array","arr_verts","forEach","node","index","alert","push","setPoint","z","alerts","verts","Uint16Array","from","setPoints","setVerts","getPointData","setScalars","getPlan","parseAsArrayBuffer","encode","getVolume","getEvents","newPolyDataFromEvents","events_data","filter","meta","arr_mags","arr_timestamp","arr_scale","offset","min_mag","max_mag","event_data","mag","mags","scale","addArray","setActiveAttributeByName","getInputData","getNumberOfPoints","getBounds","buffer","allSettled","range","getScalars","getRange","volume_range","resetCamera","camera","getActiveCamera","currentFoV","getViewAngle","newFoV","setViewAngle","checkModified","newValue","setScaleMode","update","setRepresentation","setBackground","setUseDepthPeeling","setMaximumNumberOfPeels","setOcclusionRatio","setInteractive","addActor","checkModifiedInterval","setInterval","removeAllActors","delete"],"sources":["/home/ims/VSCodeProjects/TickerWeb/TickerWeb_Vue/src/components/TickerVTK.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <!-- Navbar -->\n    <nav class=\"navbar\">\n      <div class=\"navbar-content\">\n        <button class=\"settings-btn\" @click=\"toggleSettings\">\n          <span class=\"material-icons\">settings</span>\n        </button>\n\n        <div class=\"brand\">\n          <h1 class=\"title\">I Wannabe Nexus</h1>\n          <img src=\"../assets/logo.png\" alt=\"IMS Logo\" class=\"logo\" />\n        </div>\n      </div>\n    </nav>\n\n    <!-- Main Content -->\n    <div class=\"main-content\">\n      <!-- Sidebar Settings Panel -->\n      <transition name=\"fade\">\n        <aside v-if=\"showSettings\" class=\"settings-panel\">\n          <h3>Settings</h3>\n          <table class=\"settings-table\">\n            <tbody>\n              <tr>\n                <td> <span class=\"me-2\">Mines</span></td>\n                <td>\n                  <select class=\"form-select\" v-model=\"selectedMine\" @change=\"updateMine\">\n                    <option v-for=\"mine in mines\" :key=\"mine.value\" :value=\"mine.value\">\n                      {{ mine.label }}\n                    </option>\n                  </select>\n                </td>\n              </tr>\n              <!-- Nodes Section -->\n              <tr>\n                <td colspan=\"2\">\n                  <h5>Nodes</h5>\n                </td>\n              </tr>\n              <tr>\n                <td>Representation</td>\n                <td>\n                  <select class=\"form-select\" :value=\"node_representation\"\n                    @change=\"setNodeRepresentation($event.target.value)\">\n                    <option value=\"0\">Unscaled</option>\n                    <option value=\"1\">Scaled</option>\n                  </select>\n                </td>\n              </tr>\n              <!-- Events Section -->\n              <tr>\n                <td colspan=\"2\">\n                  <h5 class=\"text-primary mt-3 mb-2\">Events</h5>\n                </td>\n              </tr>\n              <tr>\n                <td> <span class=\"me-2\">{{ formattedTimestamp }}</span></td>\n                <td>\n                  <input type=\"range\" class=\"form-range\" :min=\"events_timestamp_min\" :max=\"events_timestamp_max\"\n                    :value=\"events_timestamp\" @input=\"setEventTimeStamp($event.target.value)\" />\n                </td>\n              </tr>\n              <tr>\n                <td class=\"fw-bold\">Opacity</td>\n                <td>\n                  <input type=\"range\" class=\"form-range\" min=\"0\" max=\"100\" :value=\"events_opacity\"\n                    @input=\"setEventOpacity($event.target.value)\" />\n                </td>\n              </tr>\n\n              <!-- Plan Section -->\n              <tr>\n                <td colspan=\"2\">\n                  <h5 class=\"text-primary mt-3 mb-2\">Plan</h5>\n                </td>\n              </tr>\n              <tr>\n                <td class=\"fw-bold\">Opacity</td>\n                <td>\n                  <input type=\"range\" class=\"form-range\" min=\"0\" max=\"100\" :value=\"plan_opacity\"\n                    @input=\"setPlanOpacity($event.target.value)\" />\n                </td>\n              </tr>\n              <tr>\n                <td class=\"fw-bold\">Representation</td>\n                <td>\n                  <select class=\"form-select\" :value=\"plan_representation\"\n                    @change=\"setPlanRepresentation($event.target.value)\">\n                    <option value=\"0\">Points</option>\n                    <option value=\"1\">Wireframe</option>\n                  </select>\n                </td>\n              </tr>\n\n              <!-- Volume Section -->\n              <tr>\n                <td colspan=\"2\">\n                  <h5 class=\"text-primary mt-3 mb-2\">Volume</h5>\n                </td>\n              </tr>\n              <tr>\n                <td class=\"fw-bold\">Iso&nbsp;&nbsp;<span class=\"me-2\">{{ Math.round(volume_iso) }} mm/s</span>\n                  <!-- Display rounded value --></td>\n                <td>\n\n                  <input type=\"range\" class=\"form-range\" :min=\"volume_min\" :max=\"volume_max\" :value=\"volume_iso\"\n                    @input=\"setVolumeIso($event.target.value)\" />\n                </td>\n              </tr>\n              <tr>\n                <td class=\"fw-bold\">Opacity</td>\n                <td>\n                  <input type=\"range\" class=\"form-range\" min=\"0\" max=\"100\" :value=\"volume_opacity\"\n                    @input=\"setVolumeOpacity($event.target.value)\" />\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </aside>\n      </transition>\n\n      <!-- Map Container -->\n      <section class=\"map-container\">\n        <div ref=\"vtkContainer\" class=\"vtk-container\"></div>\n      </section>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ref, reactive, unref, onMounted, onBeforeUnmount, watchEffect, watch, computed } from 'vue';\n// vtk\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry'; // geometry rendering for WebGL, WebGPU\nimport '@kitware/vtk.js/Rendering/Profiles/Glyph';    // vtkGlyph3DMapper\nimport '@kitware/vtk.js/Rendering/Profiles/Molecule'; // vtkSphereMapper\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\n//\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkXMLImageDataReader from '@kitware/vtk.js/IO/XML/XMLImageDataReader';\nimport vtkGlyph3DMapper from '@kitware/vtk.js/Rendering/Core/Glyph3DMapper';\nimport vtkCubeSource from '@kitware/vtk.js/Filters/Sources/CubeSource';\nimport vtkSphereMapper from '@kitware/vtk.js/Rendering/Core/SphereMapper';\nimport vtkImageMarchingCubes from '@kitware/vtk.js/Filters/General/ImageMarchingCubes';\nimport vtkOutlineFilter from '@kitware/vtk.js/Filters/General/OutlineFilter';\n//\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkPoints from '@kitware/vtk.js/Common/Core/Points';\nimport vtkCellArray from '@kitware/vtk.js/Common/Core/CellArray'\nimport vtkLookupTable from '@kitware/vtk.js/Common/Core/LookupTable';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\n\nimport vtkPicker from '@kitware/vtk.js/Rendering/Core/Picker';\n\n\nexport default {\n\n  setup() {\n    const selectedMine = ref('Bambanani'); // Default mine\n    const session = reactive({ user: 'user', mine: selectedMine.value });\n\n    let urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.has('mine')) {\n      selectedMine.value = urlParams.get('mine'); // Update the value of selectedMine\n      session.mine = selectedMine.value; // Update session.mine to match selectedMine\n    }\n\n    // Update the URL to remove query parameters\n    window.history.replaceState({}, document.title, window.location.pathname);\n\n    //const session = {user: 'malcolm', mine:'Bambanani'}\n\n    let nodes = { 'data': [], 'meta': {} } // node data - response getNodes - for table, polydata\n    let events = { 'data': [], 'meta': {} } // event data - response getEvents - for table, polydata\n\n    let bounds = null // new Array(6).fill(0.0)\n\n    const vtkContainer = ref(null);\n    const context = ref(null);\n    const showSettings = ref(false);\n    const node_representation = ref(0);\n    const events_opacity = ref(50);\n    const events_timestamp = ref(0);\n    const events_timestamp_min = ref(0);\n    const events_timestamp_max = ref(0);\n    const plan_opacity = ref(100);\n    const plan_representation = ref(1);\n    const volume_opacity = ref(15);\n    const volume_iso = ref(2500);\n    const volume_min = ref(0);\n    const volume_max = ref(0);\n    const mines = ref([]);\n\n\n    const formattedTimestamp = computed(() => {\n      if (!events_timestamp.value) return 'Loading...'; // Check if it's defined\n      const date = new Date(events_timestamp.value); // Use .value to access the actual value\n      const yyyy = date.getFullYear();\n      const MM = String(date.getMonth() + 1).padStart(2, '0');\n      const dd = String(date.getDate()).padStart(2, '0');\n      const HH = String(date.getHours()).padStart(2, '0');\n      const mm = String(date.getMinutes()).padStart(2, '0');\n      const ss = String(date.getSeconds()).padStart(2, '0');\n      return `${yyyy}/${MM}/${dd} ${HH}:${mm}:${ss}`;\n    });\n    const textEncoder = new TextEncoder();\n    const path = 'http://localhost:5000';\n    //const path = 'http://192.168.0.2:5000';\n\n    // nodes\n    const node_lut = vtkLookupTable.newInstance(); // make custom LUT\n    const data = new Uint8Array([0, 255, 0, 255, 255, 165, 80, 255, 255, 0, 0, 255]); // RGBA: green, orange, red\n    const table = vtkDataArray.newInstance({ values: data, numberOfComponents: 4 }); // to VTK\n    node_lut.setTable(table); // LUT = green, orange, red\n\n    const node_glyph = vtkCubeSource.newInstance();\n    const node_mapper = vtkGlyph3DMapper.newInstance();\n    const node_actor = vtkActor.newInstance();\n    //\n    node_mapper.setScalarModeToUsePointData()\n    node_mapper.setScalarVisibility(true)\n    node_mapper.setScalarRange(1, 3)\n    node_mapper.setLookupTable(node_lut)\n    node_mapper.setScaleFactor(10.0)\n    node_actor.setMapper(node_mapper)\n    //node_actor.getProperty().setAmbient(0.5)\n\n    // plan\n    const plan_reader = vtkXMLPolyDataReader.newInstance();\n    const plan_mapper = vtkMapper.newInstance();\n    const plan_actor = vtkActor.newInstance();\n    //\n    plan_mapper.setInputConnection(plan_reader.getOutputPort());\n    plan_actor.setMapper(plan_mapper)\n    plan_actor.getProperty().setOpacity(0.25)\n    plan_actor.getProperty().setColor(0.5, 0.5, 0.5)\n\n    // volume\n    const volume_reader = vtkXMLImageDataReader.newInstance();\n    const volume_mapper = vtkMapper.newInstance();\n    const volume_actor = vtkActor.newInstance();\n    //\n    const volume_surface = vtkImageMarchingCubes.newInstance({\n      contourValue: 2500.0,\n      computeNormals: false,\n      mergePoints: false,\n    });\n    //volume_mapper.setInputConnection(volume_reader.getOutputPort());\n    volume_surface.setInputConnection(volume_reader.getOutputPort())\n    volume_mapper.setInputConnection(volume_surface.getOutputPort());\n    volume_actor.setMapper(volume_mapper)\n    //volume_actor.getProperty().setOpacity(0.25)\n    //volume_actor.getProperty().setRepresentationToWireframe()\n    volume_actor.getProperty().setColor(0.5, 1.0, 1.0)\n\n    const outline = vtkOutlineFilter.newInstance()\n    const outline_mapper = vtkMapper.newInstance();\n    const outline_actor = vtkActor.newInstance();\n\n    outline.setInputConnection(volume_reader.getOutputPort())\n    outline_mapper.setInputConnection(outline.getOutputPort());\n    outline_actor.setMapper(outline_mapper)\n    outline_actor.getProperty().setColor(0.0, 0.0, 0.0)\n\n\n    // events\n    const events_reader = vtkXMLPolyDataReader.newInstance();\n    const events_mapper = vtkSphereMapper.newInstance();\n    const events_actor = vtkActor.newInstance();\n    //\n    events_mapper.setInputConnection(events_reader.getOutputPort())\n    events_mapper.setScaleFactor(100.0);\n    events_mapper.setScaleArray('scale');\n    events_mapper.setScalarVisibility(true);\n    events_mapper.setScalarModeToUsePointData()\n    events_actor.setMapper(events_mapper)\n    events_actor.getProperty().setOpacity(0.5)\n\n    // Initialize Picker and Renderer\n    const picker = vtkPicker.newInstance();\n\n    // Event handler for picking\n    const handlePick = (event) => {\n\n      if (!context.value) {\n        const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value,\n          containerStyle: {\n            position: 'relative',\n            width: '100%',\n            height: '100%',\n          }})};\n       \n      const { clientX, clientY } = event;\n      const renderer = fullScreenRenderer.getRenderer();\n        const renderWindow = fullScreenRenderer.getRenderWindow();\n      const [width, height] = renderWindow.getSize(); // replace with your renderWindow instance\n      const x = (clientX / window.innerWidth) * width;\n      const y = height - (clientY / window.innerHeight) * height;\n\n      // Perform picking\n      const pickedActor = picker.pick([x, y, 0], renderer); // replace with your renderer\n      if (pickedActor) {\n        console.log('Picked actor:', pickedActor);\n        // Add interaction logic\n      } else {\n        console.log('No actor picked');\n      }\n    };\n\n\n    function toggleSettings() {\n      this.showSettings = !this.showSettings;\n    }\n\n    function setNodeRepresentation(rep) {\n      node_representation.value = Number(rep);\n    }\n\n    function setEventOpacity(opacity) {\n      events_opacity.value = Number(opacity);\n    }\n\n    function setEventTimeStamp(res) {\n      events_timestamp.value = Number(res);\n    }\n\n    function setPlanOpacity(opacity) {\n      plan_opacity.value = Number(opacity);\n    }\n\n    function setPlanRepresentation(rep) {\n      plan_representation.value = Number(rep);\n    }\n\n    async function onEventFilter(timestamp) {\n      const { renderWindow } = context.value\n      filterEventData(timestamp)\n      renderWindow.render()\n    }\n\n    function setVolumeOpacity(opacity) {\n      volume_opacity.value = Number(opacity);\n    }\n\n    function setVolumeIso(iso) {\n      volume_iso.value = Number(iso);\n    }\n\n    async function onVolumeIso(iso_value) {\n      const { renderWindow } = context.value\n      volume_surface.setContourValue(iso_value)\n      renderWindow.render()\n    }\n\n    async function fetchMines() {\n      try {\n        const response = await fetch(path + '/mines');\n        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n        const data = await response.json();\n        mines.value = data.map((mine) => ({\n          value: mine.id || mine,\n          label: mine.name || mine,\n        }));\n      } catch (error) {\n        console.error('Error fetching mines:', error);\n      }\n    }\n\n    // Watch for changes in selectedMine and trigger updates\n    watch(selectedMine, async (newMine) => {\n      session.mine = newMine; // Update session with new mine\n      console.log(`Mine changed to: ${newMine}`);\n      await getAllAndRender(); // Re-fetch and re-render data for the new mine\n    });\n\n\n\n    // provide data to vtk pipelines ------------------------------------------\n\n    // nodes\n\n    function getNodes(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/nodes', args)\n          .then((response_get) => {\n            nodes = response_get.data\n            const pd = newPolyDataFromNodes(nodes)\n            node_mapper.setInputData(pd, 0)\n            node_mapper.setInputData(node_glyph.getOutputData(), 1)\n            resolve('nodes_data')\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    }\n\n    function newPolyDataFromNodes(nodes) {\n      const nodes_data = nodes['data']\n      const points = vtkPoints.newInstance()\n      points.setNumberOfPoints(nodes_data.length)\n      const arr_alerts = new Float32Array(nodes_data.length)\n      const arr_verts = []\n\n      nodes_data.forEach((node, index) => {\n        arr_alerts[index] = node.alert\n        arr_verts.push(1, index)\n        points.setPoint(index, node.x, node.y, node.z);\n      })\n      const alerts = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_alerts,\n        name: 'alerts',\n      })\n      const verts = vtkCellArray.newInstance({ values: Uint16Array.from(arr_verts) })\n      const pd = vtkPolyData.newInstance()\n      pd.setPoints(points)\n      pd.setVerts(verts)\n      pd.getPointData().setScalars(alerts)\n      return pd\n    }\n\n    // plan\n\n    function getPlan(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/plan_vtk', args)\n          .then((response_get) => {\n            plan_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data))\n            resolve('plan')\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    }\n\n    // volume\n\n    function getVolume(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/volume_vtk', args)\n          .then((response_get) => {\n            volume_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data))\n            resolve('volume')\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    }\n\n    // events\n\n    function getEvents(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/events', args)\n          .then((response_get) => {\n            events = response_get.data\n            const pd = newPolyDataFromEvents(events)\n            events_mapper.setInputData(pd)\n            resolve('events_data')\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    }\n\n    function filterEventData(timestamp) {\n      const events_data = events.data.filter((event) => {\n        return event.timestamp > timestamp\n      }\n      )\n      const pd = newPolyDataFromEvents({ 'meta': events.meta, 'data': events_data })\n      events_mapper.setInputData(pd)\n    }\n\n    function newPolyDataFromEvents(events) {\n      const events_data = events.data\n      const points = vtkPoints.newInstance()\n      points.setNumberOfPoints(events_data.length)\n      const arr_mags = new Float32Array(events_data.length)\n      const arr_timestamp = new Float32Array(events_data.length)\n      const arr_scale = new Float32Array(events_data.length)\n      const arr_verts = []\n\n      const offset = 1.0\n      const min_mag = events['meta'].min_mag\n      const max_mag = events['meta'].max_mag\n\n      events_data.forEach((event_data, index) => {\n        arr_mags[index] = event_data.mag\n        arr_scale[index] = (offset - min_mag + event_data.mag) / (offset - min_mag + max_mag)\n        arr_timestamp[index] = event_data.timestamp\n        arr_verts.push(1, index)\n        points.setPoint(index, event_data.x, event_data.y, event_data.z);\n      })\n      const mags = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_mags,\n        name: 'mags',\n      })\n      const scale = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_scale,\n        name: 'scale',\n      })\n      const timestamp = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: arr_timestamp,\n        name: 'timestamp',\n      })\n      const verts = vtkCellArray.newInstance({ values: Uint16Array.from(arr_verts) })\n      const pd = vtkPolyData.newInstance()\n      pd.setPoints(points)\n      pd.setVerts(verts)\n      pd.getPointData().addArray(mags)\n      pd.getPointData().addArray(scale)\n      pd.getPointData().addArray(timestamp)\n      pd.getPointData().setActiveAttributeByName('timestamp', 0) // scalars\n      return pd\n    }\n\n    // all --------------------------------------------------------------------\n\n    async function getAllAndRender() {\n      const { renderWindow, renderer } = context.value\n      await getNodes({ mine: session.mine })\n      console.log('nodes nPts: ' + String(node_mapper.getInputData().getNumberOfPoints()))\n      if (node_mapper.getInputData().getNumberOfPoints() > 0) {\n        bounds = node_mapper.getInputData().getBounds()\n        //console.log('nodes nPts: ' + String(node_mapper.getInputData().getNumberOfPoints()))\n        console.log(bounds)\n        const buffer = 1000.0\n        bounds[0] -= buffer\n        bounds[1] += buffer\n        bounds[2] -= buffer\n        bounds[3] += buffer\n        bounds[4] -= buffer\n        bounds[5] += buffer\n      } else {\n        bounds = null\n      }\n      await getVolume({ mine: session.mine })\n      if (outline_mapper.getInputData().getNumberOfPoints() > 0 && node_mapper.getInputData().getNumberOfPoints() === 0) {\n        bounds = outline_mapper.getInputData().getBounds()\n        //console.log('nodes nPts: ' + String(node_mapper.getInputData().getNumberOfPoints()))\n        console.log(bounds)\n        const buffer = 1000.0\n        bounds[0] -= buffer\n        bounds[1] += buffer\n        bounds[2] -= buffer\n        bounds[3] += buffer\n        bounds[4] -= buffer\n        bounds[5] += buffer\n      }\n      //\n      //Promise.allSettled([getPlan({bounds: bounds, mine: session.mine}), getEvents({bounds: bounds, mine: session.mine, timestamp: 0.0}), getVolume({mine: session.mine})]).then(() => {\n      Promise.allSettled([getPlan({ bounds: bounds, mine: session.mine }), getEvents({ bounds: bounds, mine: session.mine, timestamp: 0.0 })]).then(() => {\n        const range = events_mapper.getInputData().getPointData().getScalars().getRange()\n        events_timestamp_min.value = range[0]\n        events_timestamp_max.value = range[1]\n        events_timestamp.value = range[0]\n        events_mapper.setScalarRange(range)\n        //\n        const volume_range = volume_reader.getOutputData().getPointData().getScalars().getRange()\n        volume_min.value = volume_range[0]\n        volume_max.value = volume_range[1]\n        volume_iso.value = (volume_range[0] + volume_range[1]) / 2\n        volume_mapper.setScalarRange(volume_range)\n\n        renderer.resetCamera()\n\n        const camera = renderer.getActiveCamera();\n\n        // Reduce the field of view to zoom in\n        const currentFoV = camera.getViewAngle();\n        const newFoV = currentFoV * 0.2;  // Decrease FoV to zoom in (you can adjust this factor)\n\n        camera.setViewAngle(newFoV);\n        renderWindow.render()\n      })\n    }\n\n    function checkModified() {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/modified', { mine: session.mine })\n          .then((response_get) => {\n            console.log(response_get.data)\n            resolve('plan')\n          })\n          .catch((error) => {\n            reject(error)\n          })\n      })\n    }\n\n\n    watch(events_timestamp, (newValue) => {\n      onEventFilter(newValue)\n    })\n\n    watch(volume_iso, (newValue) => {\n      onVolumeIso(newValue)\n    })\n\n    watchEffect(() => {\n      if (context.value) {\n        const { renderWindow } = context.value;\n        console.log(unref(node_representation))\n        node_mapper.setScaleMode(unref(node_representation));\n        node_mapper.update()\n        plan_actor.getProperty().setOpacity(unref(plan_opacity) * 0.01);\n        plan_actor.getProperty().setRepresentation(unref(plan_representation))\n        events_actor.getProperty().setOpacity(unref(events_opacity) * 0.01)\n        volume_actor.getProperty().setOpacity(unref(volume_opacity) * 0.01)\n        renderWindow.render();\n      }\n    });\n\n    onMounted(() => {\n      console.log('onMounted');\n\n      fetchMines();\n\n      if (!context.value) {\n        const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value,\n          containerStyle: {\n            position: 'relative',\n            width: '100%',\n            height: '100%',\n          },\n        });\n\n        const renderer = fullScreenRenderer.getRenderer();\n        const renderWindow = fullScreenRenderer.getRenderWindow();\n\n        // Set background and enable depth \n        renderer.setBackground(1.0, 1.0, 1.0);\n        renderer.setUseDepthPeeling(false);\n        renderer.setMaximumNumberOfPeels(100);\n        renderer.setOcclusionRatio(0.01);\n        renderer.setInteractive(true);\n\n        // Add actors\n        renderer.addActor(node_actor);\n        renderer.addActor(plan_actor);\n        renderer.addActor(events_actor);\n        renderer.addActor(volume_actor);\n        renderer.addActor(outline_actor);\n\n        // Store context for later access\n        context.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          node_actor,\n          node_mapper,\n          node_glyph,\n          events_actor,\n          events_mapper,\n          plan_reader,\n          plan_mapper,\n          plan_actor,\n          volume_reader,\n          volume_surface,\n          volume_mapper,\n          volume_actor,\n          outline,\n          outline_mapper,\n          outline_actor,\n        };\n\n        renderWindow.render();\n\n        // Render all and start monitoring for changes\n        getAllAndRender();\n\n        // Start the interval for checking modifications\n        context.value.checkModifiedInterval = setInterval(checkModified, 30000);\n      }\n    });\n\n    onBeforeUnmount(() => {\n      if (context.value) {\n        const { renderer, renderWindow, fullScreenRenderer, node_actor, node_mapper, node_glyph, plan_reader, plan_actor, plan_mapper, events_actor, events_mapper, volume_reader, volume_mapper, volume_actor } = context.value;\n        renderer.removeAllActors()\n        plan_actor.delete();\n        plan_mapper.delete();\n        plan_reader.delete();\n        node_actor.delete();\n        node_mapper.delete();\n        node_glyph.delete();\n        events_actor.delete();\n        events_mapper.delete();\n        volume_actor.delete();\n        volume_mapper.delete();\n        volume_reader.delete();\n        volume_surface.delete();\n        //\n        renderer.delete()\n        renderWindow.delete()\n        //\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n\n    return {\n      vtkContainer,\n      showSettings,\n      toggleSettings,\n      setNodeRepresentation,\n      setEventOpacity,\n      setEventTimeStamp,\n      setPlanOpacity,\n      setPlanRepresentation,\n      plan_opacity,\n      plan_representation,\n      events_timestamp,\n      events_timestamp_min,\n      events_timestamp_max,\n      events_opacity,\n      node_representation,\n      volume_opacity,\n      setVolumeOpacity,\n      volume_iso,\n      volume_min,\n      volume_max,\n      setVolumeIso,\n      formattedTimestamp,\n      mines,\n      selectedMine,\n    };\n  },\n}\n</script>\n\n<style>\n:root {\n  --primary-color: #0056b3;\n  --secondary-color: #f8f9fa;\n  --text-color: #212529;\n  --shadow-color: rgba(0, 0, 0, 0.1);\n}\n\nbody {\n  margin: 0;\n  font-family: 'Arial', sans-serif;\n  color: var(--text-color);\n}\n\n/* App Container */\n.app-container {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  overflow: hidden;\n}\n\n/* Navbar Styles */\n.navbar {\n  background-color: var(--secondary-color);\n  box-shadow: 0 2px 4px var(--shadow-color);\n  padding: 0 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 60px;\n  position: sticky;\n  top: 0;\n  z-index: 1000;\n}\n\n.navbar-content {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n}\n\n.brand {\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  margin-left: auto;\n  /* Push to the right */\n}\n\n.logo {\n  height: 40px;\n}\n\n.title {\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: var(--primary-color);\n  margin: 0;\n}\n\n.settings-btn {\n  background-color: var(--primary-color);\n  color: white;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  box-shadow: 0 2px 4px var(--shadow-color);\n  transition: transform 0.2s;\n}\n\n.settings-btn:hover {\n  transform: scale(1.1);\n  margin-right: auto;\n  /* Push to the left */\n}\n\n.material-icons {\n  font-size: 24px;\n  /* Adjust the icon size if needed */\n}\n\n/* Main Content Styles */\n.main-content {\n  display: flex;\n  flex-grow: 1;\n  overflow: hidden;\n  position: relative;\n  /* Ensure child elements are positioned relative to this container */\n}\n\n/* Settings Panel Styles */\n.settings-panel {\n  position: absolute;\n  /* Make it overlay on the map */\n  top: 20px;\n  left: 20px;\n  width: auto;\n  height: calc(100% - 60px);\n  /* Full height minus navbar */\n  background-color: var(--secondary-color);\n  padding: 20px;\n  box-shadow: 2px 0 5px var(--shadow-color);\n  overflow-y: auto;\n  z-index: 1000;\n  /* Ensure it appears on top of other elements */\n}\n\n.settings-panel h5 {\n  margin-bottom: 20px;\n  font-size: 1.2rem;\n  color: var(--primary-color);\n}\n\n.settings-panel h6 {\n  margin-top: 20px;\n  margin-bottom: 10px;\n  color: var(--primary-color);\n}\n\n.settings-table {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.settings-table td {\n  padding: 10px 5px;\n}\n\n.form-select {\n  width: 100%;\n  padding: 5px;\n  font-size: 1rem;\n  border: 1px solid #ced4da;\n  border-radius: 5px;\n  outline: none;\n  transition: border-color 0.2s;\n}\n\n.form-select:focus {\n  border-color: var(--primary-color);\n}\n\n/* Map Container */\n.map-container {\n  flex-grow: 1;\n  position: relative;\n}\n\n.vtk-container {\n  width: 100%;\n  height: 100%;\n}\n\n/* Fade Transition */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.3s;\n}\n\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}