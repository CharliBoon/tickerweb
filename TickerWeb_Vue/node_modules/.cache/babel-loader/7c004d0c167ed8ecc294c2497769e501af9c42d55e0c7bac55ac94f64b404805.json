{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { m as macro } from '../../macros2.js';\nimport vtkWebGPUFullScreenQuad from './FullScreenQuad.js';\nimport vtkWebGPUOpaquePass from './OpaquePass.js';\nimport vtkWebGPUOrderIndepenentTranslucentPass from './OrderIndependentTranslucentPass.js';\nimport vtkWebGPURenderEncoder from './RenderEncoder.js';\nimport vtkWebGPUVolumePass from './VolumePass.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkWebGPUSampler from './Sampler.js';\nimport vtkWebGPUTextureView from './TextureView.js';\nconst finalBlitFragTemplate = `\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var computedColor: vec4<f32> = clamp(textureSampleLevel(opaquePassColorTexture, finalPassSampler, input.tcoordVS, 0.0),vec4<f32>(0.0),vec4<f32>(1.0));\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\n\n// ----------------------------------------------------------------------------\n\nfunction vtkForwardPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkForwardPass');\n\n  // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n  publicAPI.traverse = function (viewNode) {\n    let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (model.deleted) {\n      return;\n    }\n\n    // we just render our delegates in order\n    model._currentParent = parent;\n\n    // build\n    publicAPI.setCurrentOperation('buildPass');\n    viewNode.traverse(publicAPI);\n    if (!model.opaquePass) {\n      model.opaquePass = vtkWebGPUOpaquePass.newInstance();\n    }\n    const numlayers = viewNode.getRenderable().getNumberOfLayers();\n\n    // iterate over renderers\n    const renderers = viewNode.getChildren();\n    for (let i = 0; i < numlayers; i++) {\n      for (let index = 0; index < renderers.length; index++) {\n        const renNode = renderers[index];\n        const ren = viewNode.getRenderable().getRenderers()[index];\n        if (ren.getDraw() && ren.getLayer() === i) {\n          // check for both opaque and volume actors\n          model.opaqueActorCount = 0;\n          model.translucentActorCount = 0;\n          model.volumes = [];\n          publicAPI.setCurrentOperation('queryPass');\n          renNode.traverse(publicAPI);\n          publicAPI.setCurrentOperation('cameraPass');\n          renNode.traverse(publicAPI);\n\n          // always do opaque pass to get a valid color and zbuffer, even if empty\n          model.opaquePass.traverse(renNode, viewNode);\n\n          // optional translucent pass\n          if (model.translucentActorCount > 0) {\n            if (!model.translucentPass) {\n              model.translucentPass = vtkWebGPUOrderIndepenentTranslucentPass.newInstance();\n            }\n            model.translucentPass.setColorTextureView(model.opaquePass.getColorTextureView());\n            model.translucentPass.setDepthTextureView(model.opaquePass.getDepthTextureView());\n            model.translucentPass.traverse(renNode, viewNode);\n          }\n\n          // optional volume pass\n          if (model.volumes.length > 0) {\n            if (!model.volumePass) {\n              model.volumePass = vtkWebGPUVolumePass.newInstance();\n            }\n            model.volumePass.setColorTextureView(model.opaquePass.getColorTextureView());\n            model.volumePass.setDepthTextureView(model.opaquePass.getDepthTextureView());\n            model.volumePass.setVolumes(model.volumes);\n            model.volumePass.traverse(renNode, viewNode);\n          }\n\n          // blit the result into the swap chain\n          publicAPI.finalPass(viewNode, renNode);\n        }\n      }\n    }\n  };\n  publicAPI.finalPass = (viewNode, renNode) => {\n    if (!model._finalBlitEncoder) {\n      publicAPI.createFinalBlitEncoder(viewNode);\n    }\n    model._finalBlitOutputTextureView.createFromTextureHandle(viewNode.getCurrentTexture(), {\n      depth: 1,\n      format: viewNode.getPresentationFormat()\n    });\n    model._finalBlitEncoder.attachTextureViews();\n    model._finalBlitEncoder.begin(viewNode.getCommandEncoder());\n    renNode.scissorAndViewport(model._finalBlitEncoder);\n    model._fullScreenQuad.prepareAndDraw(model._finalBlitEncoder);\n    model._finalBlitEncoder.end();\n  };\n  publicAPI.createFinalBlitEncoder = viewNode => {\n    model._finalBlitEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'forwardPassBlit'\n    });\n    model._finalBlitEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n    model._finalBlitEncoder.setPipelineHash('fpf');\n    model._finalBlitEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: viewNode.getPresentationFormat(),\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n    model._fsqSampler = vtkWebGPUSampler.newInstance({\n      label: 'finalPassSampler'\n    });\n    model._fsqSampler.create(viewNode.getDevice(), {\n      minFilter: 'linear',\n      magFilter: 'linear'\n    });\n    model._fullScreenQuad = vtkWebGPUFullScreenQuad.newInstance();\n    model._fullScreenQuad.setDevice(viewNode.getDevice());\n    model._fullScreenQuad.setPipelineHash('fpfsq');\n    model._fullScreenQuad.setTextureViews([model.opaquePass.getColorTextureView()]);\n    model._fullScreenQuad.setAdditionalBindables([model._fsqSampler]);\n    model._fullScreenQuad.setFragmentShaderTemplate(finalBlitFragTemplate);\n    model._finalBlitOutputTextureView = vtkWebGPUTextureView.newInstance();\n    model._finalBlitEncoder.setColorTextureView(0, model._finalBlitOutputTextureView);\n  };\n  publicAPI.incrementOpaqueActorCount = () => model.opaqueActorCount++;\n  publicAPI.incrementTranslucentActorCount = () => model.translucentActorCount++;\n  publicAPI.addVolume = volume => {\n    model.volumes.push(volume);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  opaqueActorCount: 0,\n  translucentActorCount: 0,\n  volumes: null,\n  opaqueRenderEncoder: null,\n  translucentPass: null,\n  volumePass: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['opaquePass', 'translucentPass', 'volumePass']);\n\n  // Object methods\n  vtkForwardPass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkForwardPass');\n\n// ----------------------------------------------------------------------------\n\nvar vtkForwardPass$1 = {\n  newInstance,\n  extend\n};\nexport { vtkForwardPass$1 as default, extend, newInstance };","map":{"version":3,"names":["m","macro","vtkWebGPUFullScreenQuad","vtkWebGPUOpaquePass","vtkWebGPUOrderIndepenentTranslucentPass","vtkWebGPURenderEncoder","vtkWebGPUVolumePass","vtkRenderPass","vtkWebGPUSampler","vtkWebGPUTextureView","finalBlitFragTemplate","vtkForwardPass","publicAPI","model","classHierarchy","push","traverse","viewNode","parent","arguments","length","undefined","deleted","_currentParent","setCurrentOperation","opaquePass","newInstance","numlayers","getRenderable","getNumberOfLayers","renderers","getChildren","i","index","renNode","ren","getRenderers","getDraw","getLayer","opaqueActorCount","translucentActorCount","volumes","translucentPass","setColorTextureView","getColorTextureView","setDepthTextureView","getDepthTextureView","volumePass","setVolumes","finalPass","_finalBlitEncoder","createFinalBlitEncoder","_finalBlitOutputTextureView","createFromTextureHandle","getCurrentTexture","depth","format","getPresentationFormat","attachTextureViews","begin","getCommandEncoder","scissorAndViewport","_fullScreenQuad","prepareAndDraw","end","label","setDescription","colorAttachments","view","loadOp","storeOp","setPipelineHash","setPipelineSettings","primitive","cullMode","fragment","targets","blend","color","srcFactor","dstFactor","alpha","srcfactor","_fsqSampler","create","getDevice","minFilter","magFilter","setDevice","setTextureViews","setAdditionalBindables","setFragmentShaderTemplate","incrementOpaqueActorCount","incrementTranslucentActorCount","addVolume","volume","DEFAULT_VALUES","opaqueRenderEncoder","extend","initialValues","Object","assign","setGet","vtkForwardPass$1","default"],"sources":["C:/Users/Malcolm/my-vtkjs-app/node_modules/@kitware/vtk.js/Rendering/WebGPU/ForwardPass.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport vtkWebGPUFullScreenQuad from './FullScreenQuad.js';\nimport vtkWebGPUOpaquePass from './OpaquePass.js';\nimport vtkWebGPUOrderIndepenentTranslucentPass from './OrderIndependentTranslucentPass.js';\nimport vtkWebGPURenderEncoder from './RenderEncoder.js';\nimport vtkWebGPUVolumePass from './VolumePass.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkWebGPUSampler from './Sampler.js';\nimport vtkWebGPUTextureView from './TextureView.js';\n\nconst finalBlitFragTemplate = `\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var computedColor: vec4<f32> = clamp(textureSampleLevel(opaquePassColorTexture, finalPassSampler, input.tcoordVS, 0.0),vec4<f32>(0.0),vec4<f32>(1.0));\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\n\n// ----------------------------------------------------------------------------\n\nfunction vtkForwardPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkForwardPass');\n\n  // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n  publicAPI.traverse = function (viewNode) {\n    let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (model.deleted) {\n      return;\n    }\n\n    // we just render our delegates in order\n    model._currentParent = parent;\n\n    // build\n    publicAPI.setCurrentOperation('buildPass');\n    viewNode.traverse(publicAPI);\n    if (!model.opaquePass) {\n      model.opaquePass = vtkWebGPUOpaquePass.newInstance();\n    }\n    const numlayers = viewNode.getRenderable().getNumberOfLayers();\n\n    // iterate over renderers\n    const renderers = viewNode.getChildren();\n    for (let i = 0; i < numlayers; i++) {\n      for (let index = 0; index < renderers.length; index++) {\n        const renNode = renderers[index];\n        const ren = viewNode.getRenderable().getRenderers()[index];\n        if (ren.getDraw() && ren.getLayer() === i) {\n          // check for both opaque and volume actors\n          model.opaqueActorCount = 0;\n          model.translucentActorCount = 0;\n          model.volumes = [];\n          publicAPI.setCurrentOperation('queryPass');\n          renNode.traverse(publicAPI);\n          publicAPI.setCurrentOperation('cameraPass');\n          renNode.traverse(publicAPI);\n\n          // always do opaque pass to get a valid color and zbuffer, even if empty\n          model.opaquePass.traverse(renNode, viewNode);\n\n          // optional translucent pass\n          if (model.translucentActorCount > 0) {\n            if (!model.translucentPass) {\n              model.translucentPass = vtkWebGPUOrderIndepenentTranslucentPass.newInstance();\n            }\n            model.translucentPass.setColorTextureView(model.opaquePass.getColorTextureView());\n            model.translucentPass.setDepthTextureView(model.opaquePass.getDepthTextureView());\n            model.translucentPass.traverse(renNode, viewNode);\n          }\n\n          // optional volume pass\n          if (model.volumes.length > 0) {\n            if (!model.volumePass) {\n              model.volumePass = vtkWebGPUVolumePass.newInstance();\n            }\n            model.volumePass.setColorTextureView(model.opaquePass.getColorTextureView());\n            model.volumePass.setDepthTextureView(model.opaquePass.getDepthTextureView());\n            model.volumePass.setVolumes(model.volumes);\n            model.volumePass.traverse(renNode, viewNode);\n          }\n\n          // blit the result into the swap chain\n          publicAPI.finalPass(viewNode, renNode);\n        }\n      }\n    }\n  };\n  publicAPI.finalPass = (viewNode, renNode) => {\n    if (!model._finalBlitEncoder) {\n      publicAPI.createFinalBlitEncoder(viewNode);\n    }\n    model._finalBlitOutputTextureView.createFromTextureHandle(viewNode.getCurrentTexture(), {\n      depth: 1,\n      format: viewNode.getPresentationFormat()\n    });\n    model._finalBlitEncoder.attachTextureViews();\n    model._finalBlitEncoder.begin(viewNode.getCommandEncoder());\n    renNode.scissorAndViewport(model._finalBlitEncoder);\n    model._fullScreenQuad.prepareAndDraw(model._finalBlitEncoder);\n    model._finalBlitEncoder.end();\n  };\n  publicAPI.createFinalBlitEncoder = viewNode => {\n    model._finalBlitEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'forwardPassBlit'\n    });\n    model._finalBlitEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n    model._finalBlitEncoder.setPipelineHash('fpf');\n    model._finalBlitEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: viewNode.getPresentationFormat(),\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n    model._fsqSampler = vtkWebGPUSampler.newInstance({\n      label: 'finalPassSampler'\n    });\n    model._fsqSampler.create(viewNode.getDevice(), {\n      minFilter: 'linear',\n      magFilter: 'linear'\n    });\n    model._fullScreenQuad = vtkWebGPUFullScreenQuad.newInstance();\n    model._fullScreenQuad.setDevice(viewNode.getDevice());\n    model._fullScreenQuad.setPipelineHash('fpfsq');\n    model._fullScreenQuad.setTextureViews([model.opaquePass.getColorTextureView()]);\n    model._fullScreenQuad.setAdditionalBindables([model._fsqSampler]);\n    model._fullScreenQuad.setFragmentShaderTemplate(finalBlitFragTemplate);\n    model._finalBlitOutputTextureView = vtkWebGPUTextureView.newInstance();\n    model._finalBlitEncoder.setColorTextureView(0, model._finalBlitOutputTextureView);\n  };\n  publicAPI.incrementOpaqueActorCount = () => model.opaqueActorCount++;\n  publicAPI.incrementTranslucentActorCount = () => model.translucentActorCount++;\n  publicAPI.addVolume = volume => {\n    model.volumes.push(volume);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  opaqueActorCount: 0,\n  translucentActorCount: 0,\n  volumes: null,\n  opaqueRenderEncoder: null,\n  translucentPass: null,\n  volumePass: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['opaquePass', 'translucentPass', 'volumePass']);\n\n  // Object methods\n  vtkForwardPass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkForwardPass');\n\n// ----------------------------------------------------------------------------\n\nvar vtkForwardPass$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkForwardPass$1 as default, extend, newInstance };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}