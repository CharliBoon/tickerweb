{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { n as newInstance$1, o as obj } from '../../macros2.js';\nimport vtkWebGPUCellArrayMapper from './CellArrayMapper.js';\nimport vtkWebGPUPolyDataMapper from './PolyDataMapper.js';\nimport vtkWebGPUStorageBuffer from './StorageBuffer.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\nimport { registerOverride } from './ViewNodeFactory.js';\nfunction vtkWebGPUGlyph3DCellArrayMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUGlyph3DCellArrayMapper');\n  const superClass = {\n    ...publicAPI\n  };\n  publicAPI.setGlyphInstances = val => {\n    model.glyphInstances = val;\n  };\n  publicAPI.updateBuffers = () => {\n    superClass.updateBuffers();\n    publicAPI.setNumberOfInstances(model.glyphInstances);\n  };\n  publicAPI.replaceShaderPosition = (hash, pipeline, vertexInput) => {\n    const vDesc = pipeline.getShaderDescription('vertex');\n    vDesc.addBuiltinInput('u32', '@builtin(instance_index) instanceIndex');\n    vDesc.addBuiltinOutput('vec4<f32>', '@builtin(position) Position');\n    if (!vDesc.hasOutput('vertexVC')) vDesc.addOutput('vec3<f32>', 'vertexVC');\n    let code = vDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', ['    var vertexSC: vec4<f32> = mapperUBO.BCSCMatrix*glyphSSBO.values[input.instanceIndex].matrix*vertexBC;', '    output.vertexVC = (rendererUBO.SCVCMatrix*vertexSC).xyz;', '    output.Position = rendererUBO.SCPCMatrix*vertexSC;']).result;\n    vDesc.setCode(code);\n  };\n  model.shaderReplacements.set('replaceShaderPosition', publicAPI.replaceShaderPosition);\n  publicAPI.replaceShaderNormal = (hash, pipeline, vertexInput) => {\n    if (vertexInput.hasAttribute('normalMC')) {\n      const vDesc = pipeline.getShaderDescription('vertex');\n      let code = vDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Normal::Impl', ['  output.normalVC = normalize((rendererUBO.WCVCNormals', ' * mapperUBO.MCWCNormals', ' * glyphSSBO.values[input.instanceIndex].normal*normalMC).xyz);']).result;\n      vDesc.setCode(code);\n    }\n    superClass.replaceShaderNormal(hash, pipeline, vertexInput);\n  };\n  model.shaderReplacements.set('replaceShaderNormal', publicAPI.replaceShaderNormal);\n  publicAPI.replaceShaderColor = (hash, pipeline, vertexInput) => {\n    if (!model.renderable.getColorArray()) {\n      superClass.replaceShaderColor(hash, pipeline, vertexInput);\n      return;\n    }\n    const vDesc = pipeline.getShaderDescription('vertex');\n    vDesc.addOutput('vec4<f32>', 'color');\n    let code = vDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Color::Impl', ['  output.color = glyphSSBO.values[input.instanceIndex].color;']).result;\n    vDesc.setCode(code);\n    const fDesc = pipeline.getShaderDescription('fragment');\n    code = fDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Color::Impl', ['ambientColor = input.color;', 'diffuseColor = input.color;', 'opacity = mapperUBO.Opacity * input.color.a;']).result;\n    fDesc.setCode(code);\n  };\n  model.shaderReplacements.set('replaceShaderColor', publicAPI.replaceShaderColor);\n  publicAPI.replaceShaderSelect = (hash, pipeline, vertexInput) => {\n    if (hash.includes('sel')) {\n      const vDesc = pipeline.getShaderDescription('vertex');\n      vDesc.addOutput('u32', 'compositeID', 'flat');\n      let code = vDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Select::Impl', ['  output.compositeID = input.instanceIndex;']).result;\n      vDesc.setCode(code);\n      const fDesc = pipeline.getShaderDescription('fragment');\n      code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Select::Impl', ['var compositeID: u32 = input.compositeID;']).result;\n      fDesc.setCode(code);\n    }\n  };\n  model.shaderReplacements.set('replaceShaderSelect', publicAPI.replaceShaderSelect);\n}\n\n// ----------------------------------------------------------------------------\nfunction caExtend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, {}, initialValues);\n\n  // Inheritance\n  vtkWebGPUCellArrayMapper.extend(publicAPI, model, initialValues);\n\n  // Object methods\n  vtkWebGPUGlyph3DCellArrayMapper(publicAPI, model);\n}\nconst caNewInstance = newInstance$1(caExtend, 'vtkWebGPUGlyph3DCellArrayMapper');\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUSphereMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUGlyph3DMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUGlyph3DMapper');\n  publicAPI.createCellArrayMapper = () => {\n    const mpr = caNewInstance();\n    mpr.setSSBO(model.SSBO);\n    mpr.setRenderable(model.renderable);\n    return mpr;\n  };\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.WebGPUActor = publicAPI.getFirstAncestorOfType('vtkWebGPUActor');\n      if (!model.renderable.getStatic()) {\n        model.renderable.update();\n      }\n      const gpoly = model.renderable.getInputData(1);\n      model.renderable.mapScalars(gpoly, 1.0);\n      publicAPI.updateSSBO();\n      publicAPI.updateCellArrayMappers(gpoly);\n      for (let i = 0; i < model.children.length; i++) {\n        const cellMapper = model.children[i];\n        cellMapper.setGlyphInstances(model.numInstances);\n      }\n    }\n  };\n  publicAPI.updateSSBO = () => {\n    model.currentInput = model.renderable.getInputData(1);\n    model.renderable.buildArrays();\n\n    // update the buffer objects if needed\n    const garray = model.renderable.getMatrixArray();\n    const narray = model.renderable.getNormalArray();\n    model.carray = model.renderable.getColorArray();\n    model.numInstances = garray.length / 16;\n    if (model.renderable.getBuildTime().getMTime() > model.glyphBOBuildTime.getMTime()) {\n      // In Core class all arrays are rebuilt when this happens\n      // but these arrays can be shared between all primType\n      model.WebGPURenderWindow = publicAPI.getFirstAncestorOfType('vtkWebGPURenderWindow');\n      const device = model.WebGPURenderWindow.getDevice();\n      model.SSBO.clearData();\n      model.SSBO.setNumberOfInstances(model.numInstances);\n      model.SSBO.addEntry('matrix', 'mat4x4<f32>');\n      model.SSBO.addEntry('normal', 'mat4x4<f32>');\n      if (model.carray) {\n        model.SSBO.addEntry('color', 'vec4<f32>');\n      }\n      model.SSBO.setAllInstancesFromArray('matrix', garray);\n      model.SSBO.setAllInstancesFromArray3x3To4x4('normal', narray);\n      if (model.carray) {\n        model.SSBO.setAllInstancesFromArrayColorToFloat('color', model.carray.getData());\n      }\n      model.SSBO.send(device);\n      model.glyphBOBuildTime.modified();\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkWebGPUPolyDataMapper.extend(publicAPI, model, initialValues);\n  model.glyphBOBuildTime = {};\n  obj(model.glyphBOBuildTime, {\n    mtime: 0\n  });\n  model.SSBO = vtkWebGPUStorageBuffer.newInstance({\n    label: 'glyphSSBO'\n  });\n\n  // Object methods\n  vtkWebGPUGlyph3DMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkWebGPUGlyph3DMapper');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkGlyph3DMapper', newInstance);\nexport { caExtend, index as default, extend, newInstance };","map":{"version":3,"names":["n","newInstance$1","o","obj","vtkWebGPUCellArrayMapper","vtkWebGPUPolyDataMapper","vtkWebGPUStorageBuffer","vtkWebGPUShaderCache","registerOverride","vtkWebGPUGlyph3DCellArrayMapper","publicAPI","model","classHierarchy","push","superClass","setGlyphInstances","val","glyphInstances","updateBuffers","setNumberOfInstances","replaceShaderPosition","hash","pipeline","vertexInput","vDesc","getShaderDescription","addBuiltinInput","addBuiltinOutput","hasOutput","addOutput","code","getCode","substitute","result","setCode","shaderReplacements","set","replaceShaderNormal","hasAttribute","replaceShaderColor","renderable","getColorArray","fDesc","replaceShaderSelect","includes","caExtend","initialValues","arguments","length","undefined","Object","assign","extend","caNewInstance","vtkWebGPUGlyph3DMapper","createCellArrayMapper","mpr","setSSBO","SSBO","setRenderable","buildPass","prepass","WebGPUActor","getFirstAncestorOfType","getStatic","update","gpoly","getInputData","mapScalars","updateSSBO","updateCellArrayMappers","i","children","cellMapper","numInstances","currentInput","buildArrays","garray","getMatrixArray","narray","getNormalArray","carray","getBuildTime","getMTime","glyphBOBuildTime","WebGPURenderWindow","device","getDevice","clearData","addEntry","setAllInstancesFromArray","setAllInstancesFromArray3x3To4x4","setAllInstancesFromArrayColorToFloat","getData","send","modified","DEFAULT_VALUES","mtime","newInstance","label","index","default"],"sources":["C:/Users/Malcolm/Projects/Web/TickerWeb/TickerWeb_Vue/node_modules/@kitware/vtk.js/Rendering/WebGPU/Glyph3DMapper.js"],"sourcesContent":["import { n as newInstance$1, o as obj } from '../../macros2.js';\nimport vtkWebGPUCellArrayMapper from './CellArrayMapper.js';\nimport vtkWebGPUPolyDataMapper from './PolyDataMapper.js';\nimport vtkWebGPUStorageBuffer from './StorageBuffer.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nfunction vtkWebGPUGlyph3DCellArrayMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUGlyph3DCellArrayMapper');\n  const superClass = {\n    ...publicAPI\n  };\n  publicAPI.setGlyphInstances = val => {\n    model.glyphInstances = val;\n  };\n  publicAPI.updateBuffers = () => {\n    superClass.updateBuffers();\n    publicAPI.setNumberOfInstances(model.glyphInstances);\n  };\n  publicAPI.replaceShaderPosition = (hash, pipeline, vertexInput) => {\n    const vDesc = pipeline.getShaderDescription('vertex');\n    vDesc.addBuiltinInput('u32', '@builtin(instance_index) instanceIndex');\n    vDesc.addBuiltinOutput('vec4<f32>', '@builtin(position) Position');\n    if (!vDesc.hasOutput('vertexVC')) vDesc.addOutput('vec3<f32>', 'vertexVC');\n    let code = vDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Position::Impl', ['    var vertexSC: vec4<f32> = mapperUBO.BCSCMatrix*glyphSSBO.values[input.instanceIndex].matrix*vertexBC;', '    output.vertexVC = (rendererUBO.SCVCMatrix*vertexSC).xyz;', '    output.Position = rendererUBO.SCPCMatrix*vertexSC;']).result;\n    vDesc.setCode(code);\n  };\n  model.shaderReplacements.set('replaceShaderPosition', publicAPI.replaceShaderPosition);\n  publicAPI.replaceShaderNormal = (hash, pipeline, vertexInput) => {\n    if (vertexInput.hasAttribute('normalMC')) {\n      const vDesc = pipeline.getShaderDescription('vertex');\n      let code = vDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Normal::Impl', ['  output.normalVC = normalize((rendererUBO.WCVCNormals', ' * mapperUBO.MCWCNormals', ' * glyphSSBO.values[input.instanceIndex].normal*normalMC).xyz);']).result;\n      vDesc.setCode(code);\n    }\n    superClass.replaceShaderNormal(hash, pipeline, vertexInput);\n  };\n  model.shaderReplacements.set('replaceShaderNormal', publicAPI.replaceShaderNormal);\n  publicAPI.replaceShaderColor = (hash, pipeline, vertexInput) => {\n    if (!model.renderable.getColorArray()) {\n      superClass.replaceShaderColor(hash, pipeline, vertexInput);\n      return;\n    }\n    const vDesc = pipeline.getShaderDescription('vertex');\n    vDesc.addOutput('vec4<f32>', 'color');\n    let code = vDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Color::Impl', ['  output.color = glyphSSBO.values[input.instanceIndex].color;']).result;\n    vDesc.setCode(code);\n    const fDesc = pipeline.getShaderDescription('fragment');\n    code = fDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::Color::Impl', ['ambientColor = input.color;', 'diffuseColor = input.color;', 'opacity = mapperUBO.Opacity * input.color.a;']).result;\n    fDesc.setCode(code);\n  };\n  model.shaderReplacements.set('replaceShaderColor', publicAPI.replaceShaderColor);\n  publicAPI.replaceShaderSelect = (hash, pipeline, vertexInput) => {\n    if (hash.includes('sel')) {\n      const vDesc = pipeline.getShaderDescription('vertex');\n      vDesc.addOutput('u32', 'compositeID', 'flat');\n      let code = vDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Select::Impl', ['  output.compositeID = input.instanceIndex;']).result;\n      vDesc.setCode(code);\n      const fDesc = pipeline.getShaderDescription('fragment');\n      code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::Select::Impl', ['var compositeID: u32 = input.compositeID;']).result;\n      fDesc.setCode(code);\n    }\n  };\n  model.shaderReplacements.set('replaceShaderSelect', publicAPI.replaceShaderSelect);\n}\n\n// ----------------------------------------------------------------------------\nfunction caExtend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, {}, initialValues);\n\n  // Inheritance\n  vtkWebGPUCellArrayMapper.extend(publicAPI, model, initialValues);\n\n  // Object methods\n  vtkWebGPUGlyph3DCellArrayMapper(publicAPI, model);\n}\nconst caNewInstance = newInstance$1(caExtend, 'vtkWebGPUGlyph3DCellArrayMapper');\n\n// ----------------------------------------------------------------------------\n// vtkWebGPUSphereMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUGlyph3DMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUGlyph3DMapper');\n  publicAPI.createCellArrayMapper = () => {\n    const mpr = caNewInstance();\n    mpr.setSSBO(model.SSBO);\n    mpr.setRenderable(model.renderable);\n    return mpr;\n  };\n  publicAPI.buildPass = prepass => {\n    if (prepass) {\n      model.WebGPUActor = publicAPI.getFirstAncestorOfType('vtkWebGPUActor');\n      if (!model.renderable.getStatic()) {\n        model.renderable.update();\n      }\n      const gpoly = model.renderable.getInputData(1);\n      model.renderable.mapScalars(gpoly, 1.0);\n      publicAPI.updateSSBO();\n      publicAPI.updateCellArrayMappers(gpoly);\n      for (let i = 0; i < model.children.length; i++) {\n        const cellMapper = model.children[i];\n        cellMapper.setGlyphInstances(model.numInstances);\n      }\n    }\n  };\n  publicAPI.updateSSBO = () => {\n    model.currentInput = model.renderable.getInputData(1);\n    model.renderable.buildArrays();\n\n    // update the buffer objects if needed\n    const garray = model.renderable.getMatrixArray();\n    const narray = model.renderable.getNormalArray();\n    model.carray = model.renderable.getColorArray();\n    model.numInstances = garray.length / 16;\n    if (model.renderable.getBuildTime().getMTime() > model.glyphBOBuildTime.getMTime()) {\n      // In Core class all arrays are rebuilt when this happens\n      // but these arrays can be shared between all primType\n      model.WebGPURenderWindow = publicAPI.getFirstAncestorOfType('vtkWebGPURenderWindow');\n      const device = model.WebGPURenderWindow.getDevice();\n      model.SSBO.clearData();\n      model.SSBO.setNumberOfInstances(model.numInstances);\n      model.SSBO.addEntry('matrix', 'mat4x4<f32>');\n      model.SSBO.addEntry('normal', 'mat4x4<f32>');\n      if (model.carray) {\n        model.SSBO.addEntry('color', 'vec4<f32>');\n      }\n      model.SSBO.setAllInstancesFromArray('matrix', garray);\n      model.SSBO.setAllInstancesFromArray3x3To4x4('normal', narray);\n      if (model.carray) {\n        model.SSBO.setAllInstancesFromArrayColorToFloat('color', model.carray.getData());\n      }\n      model.SSBO.send(device);\n      model.glyphBOBuildTime.modified();\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkWebGPUPolyDataMapper.extend(publicAPI, model, initialValues);\n  model.glyphBOBuildTime = {};\n  obj(model.glyphBOBuildTime, {\n    mtime: 0\n  });\n  model.SSBO = vtkWebGPUStorageBuffer.newInstance({\n    label: 'glyphSSBO'\n  });\n\n  // Object methods\n  vtkWebGPUGlyph3DMapper(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkWebGPUGlyph3DMapper');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\n// Register ourself to WebGPU backend if imported\nregisterOverride('vtkGlyph3DMapper', newInstance);\n\nexport { caExtend, index as default, extend, newInstance };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}