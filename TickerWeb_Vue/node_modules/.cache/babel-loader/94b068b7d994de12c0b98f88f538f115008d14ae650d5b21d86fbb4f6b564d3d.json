{"ast":null,"code":"const Resolve = {\n  Off: 0,\n  PolygonOffset: 1\n};\nlet resolveCoincidentTopologyPolygonOffsetFaces = Resolve.PolygonOffset;\nlet resolveCoincidentTopology = Resolve.Off;\nconst RESOLVE_COINCIDENT_TOPOLOGY_MODE = ['VTK_RESOLVE_OFF', 'VTK_RESOLVE_POLYGON_OFFSET'];\nfunction getResolveCoincidentTopologyPolygonOffsetFaces() {\n  return resolveCoincidentTopologyPolygonOffsetFaces;\n}\nfunction setResolveCoincidentTopologyPolygonOffsetFaces(value) {\n  const changed = resolveCoincidentTopologyPolygonOffsetFaces === value;\n  resolveCoincidentTopologyPolygonOffsetFaces = value;\n  return changed;\n}\nfunction getResolveCoincidentTopology() {\n  return resolveCoincidentTopology;\n}\nfunction setResolveCoincidentTopology() {\n  let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  const changed = resolveCoincidentTopology === mode;\n  resolveCoincidentTopology = mode;\n  return changed;\n}\nfunction setResolveCoincidentTopologyToDefault() {\n  return setResolveCoincidentTopology(Resolve.Off);\n}\nfunction setResolveCoincidentTopologyToOff() {\n  return setResolveCoincidentTopology(Resolve.Off);\n}\nfunction setResolveCoincidentTopologyToPolygonOffset() {\n  return setResolveCoincidentTopology(Resolve.PolygonOffset);\n}\nfunction getResolveCoincidentTopologyAsString() {\n  return RESOLVE_COINCIDENT_TOPOLOGY_MODE[resolveCoincidentTopology];\n}\nvar otherStaticMethods = {\n  Resolve,\n  getResolveCoincidentTopologyAsString,\n  getResolveCoincidentTopologyPolygonOffsetFaces,\n  getResolveCoincidentTopology,\n  setResolveCoincidentTopology,\n  setResolveCoincidentTopologyPolygonOffsetFaces,\n  setResolveCoincidentTopologyToDefault,\n  setResolveCoincidentTopologyToOff,\n  setResolveCoincidentTopologyToPolygonOffset\n};\nexport { RESOLVE_COINCIDENT_TOPOLOGY_MODE, Resolve, otherStaticMethods as default, getResolveCoincidentTopology, getResolveCoincidentTopologyAsString, getResolveCoincidentTopologyPolygonOffsetFaces, setResolveCoincidentTopology, setResolveCoincidentTopologyPolygonOffsetFaces, setResolveCoincidentTopologyToDefault, setResolveCoincidentTopologyToOff, setResolveCoincidentTopologyToPolygonOffset };","map":{"version":3,"names":["Resolve","Off","PolygonOffset","resolveCoincidentTopologyPolygonOffsetFaces","resolveCoincidentTopology","RESOLVE_COINCIDENT_TOPOLOGY_MODE","getResolveCoincidentTopologyPolygonOffsetFaces","setResolveCoincidentTopologyPolygonOffsetFaces","value","changed","getResolveCoincidentTopology","setResolveCoincidentTopology","mode","arguments","length","undefined","setResolveCoincidentTopologyToDefault","setResolveCoincidentTopologyToOff","setResolveCoincidentTopologyToPolygonOffset","getResolveCoincidentTopologyAsString","otherStaticMethods","default"],"sources":["C:/Users/Malcolm/Projects/Web/TickerWeb/node_modules/@kitware/vtk.js/Rendering/Core/Mapper/Static.js"],"sourcesContent":["const Resolve = {\n  Off: 0,\n  PolygonOffset: 1\n};\nlet resolveCoincidentTopologyPolygonOffsetFaces = Resolve.PolygonOffset;\nlet resolveCoincidentTopology = Resolve.Off;\nconst RESOLVE_COINCIDENT_TOPOLOGY_MODE = ['VTK_RESOLVE_OFF', 'VTK_RESOLVE_POLYGON_OFFSET'];\nfunction getResolveCoincidentTopologyPolygonOffsetFaces() {\n  return resolveCoincidentTopologyPolygonOffsetFaces;\n}\nfunction setResolveCoincidentTopologyPolygonOffsetFaces(value) {\n  const changed = resolveCoincidentTopologyPolygonOffsetFaces === value;\n  resolveCoincidentTopologyPolygonOffsetFaces = value;\n  return changed;\n}\nfunction getResolveCoincidentTopology() {\n  return resolveCoincidentTopology;\n}\nfunction setResolveCoincidentTopology() {\n  let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  const changed = resolveCoincidentTopology === mode;\n  resolveCoincidentTopology = mode;\n  return changed;\n}\nfunction setResolveCoincidentTopologyToDefault() {\n  return setResolveCoincidentTopology(Resolve.Off);\n}\nfunction setResolveCoincidentTopologyToOff() {\n  return setResolveCoincidentTopology(Resolve.Off);\n}\nfunction setResolveCoincidentTopologyToPolygonOffset() {\n  return setResolveCoincidentTopology(Resolve.PolygonOffset);\n}\nfunction getResolveCoincidentTopologyAsString() {\n  return RESOLVE_COINCIDENT_TOPOLOGY_MODE[resolveCoincidentTopology];\n}\nvar otherStaticMethods = {\n  Resolve,\n  getResolveCoincidentTopologyAsString,\n  getResolveCoincidentTopologyPolygonOffsetFaces,\n  getResolveCoincidentTopology,\n  setResolveCoincidentTopology,\n  setResolveCoincidentTopologyPolygonOffsetFaces,\n  setResolveCoincidentTopologyToDefault,\n  setResolveCoincidentTopologyToOff,\n  setResolveCoincidentTopologyToPolygonOffset\n};\n\nexport { RESOLVE_COINCIDENT_TOPOLOGY_MODE, Resolve, otherStaticMethods as default, getResolveCoincidentTopology, getResolveCoincidentTopologyAsString, getResolveCoincidentTopologyPolygonOffsetFaces, setResolveCoincidentTopology, setResolveCoincidentTopologyPolygonOffsetFaces, setResolveCoincidentTopologyToDefault, setResolveCoincidentTopologyToOff, setResolveCoincidentTopologyToPolygonOffset };\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG;EACdC,GAAG,EAAE,CAAC;EACNC,aAAa,EAAE;AACjB,CAAC;AACD,IAAIC,2CAA2C,GAAGH,OAAO,CAACE,aAAa;AACvE,IAAIE,yBAAyB,GAAGJ,OAAO,CAACC,GAAG;AAC3C,MAAMI,gCAAgC,GAAG,CAAC,iBAAiB,EAAE,4BAA4B,CAAC;AAC1F,SAASC,8CAA8CA,CAAA,EAAG;EACxD,OAAOH,2CAA2C;AACpD;AACA,SAASI,8CAA8CA,CAACC,KAAK,EAAE;EAC7D,MAAMC,OAAO,GAAGN,2CAA2C,KAAKK,KAAK;EACrEL,2CAA2C,GAAGK,KAAK;EACnD,OAAOC,OAAO;AAChB;AACA,SAASC,4BAA4BA,CAAA,EAAG;EACtC,OAAON,yBAAyB;AAClC;AACA,SAASO,4BAA4BA,CAAA,EAAG;EACtC,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;EAChF,MAAMJ,OAAO,GAAGL,yBAAyB,KAAKQ,IAAI;EAClDR,yBAAyB,GAAGQ,IAAI;EAChC,OAAOH,OAAO;AAChB;AACA,SAASO,qCAAqCA,CAAA,EAAG;EAC/C,OAAOL,4BAA4B,CAACX,OAAO,CAACC,GAAG,CAAC;AAClD;AACA,SAASgB,iCAAiCA,CAAA,EAAG;EAC3C,OAAON,4BAA4B,CAACX,OAAO,CAACC,GAAG,CAAC;AAClD;AACA,SAASiB,2CAA2CA,CAAA,EAAG;EACrD,OAAOP,4BAA4B,CAACX,OAAO,CAACE,aAAa,CAAC;AAC5D;AACA,SAASiB,oCAAoCA,CAAA,EAAG;EAC9C,OAAOd,gCAAgC,CAACD,yBAAyB,CAAC;AACpE;AACA,IAAIgB,kBAAkB,GAAG;EACvBpB,OAAO;EACPmB,oCAAoC;EACpCb,8CAA8C;EAC9CI,4BAA4B;EAC5BC,4BAA4B;EAC5BJ,8CAA8C;EAC9CS,qCAAqC;EACrCC,iCAAiC;EACjCC;AACF,CAAC;AAED,SAASb,gCAAgC,EAAEL,OAAO,EAAEoB,kBAAkB,IAAIC,OAAO,EAAEX,4BAA4B,EAAES,oCAAoC,EAAEb,8CAA8C,EAAEK,4BAA4B,EAAEJ,8CAA8C,EAAES,qCAAqC,EAAEC,iCAAiC,EAAEC,2CAA2C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}