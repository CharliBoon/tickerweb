{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { m as macro } from '../../macros2.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkXMLWriter from './XMLWriter.js';\nimport { POLYDATA_FIELDS } from '../../Common/DataModel/PolyData/Constants.js';\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// vtkXMLPolyDataWriter methods\n// ----------------------------------------------------------------------------\n\nfunction vtkXMLPolyDataWriter(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkXMLPolyDataWriter');\n\n  // Capture \"parentClass\" api for internal use\n  const superClass = {\n    ...publicAPI\n  };\n  function camelize(str) {\n    return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, letter => letter.toUpperCase()).replace(/\\s+/g, '');\n  }\n  publicAPI.create = dataObject => {\n    const parent = superClass.create(dataObject);\n    const polyData = parent.ele('PolyData', {});\n    const piece = polyData.ele('Piece', {\n      NumberOfPoints: dataObject.getPoints().getNumberOfPoints(),\n      NumberOfVerts: dataObject.getNumberOfVerts(),\n      NumberOfLines: dataObject.getNumberOfLines(),\n      NumberOfStrips: dataObject.getNumberOfStrips(),\n      NumberOfPolys: dataObject.getNumberOfPolys()\n    });\n    publicAPI.processDataSetAttributes(piece, 'PointData', dataObject.getPointData());\n    publicAPI.processDataSetAttributes(piece, 'CellData', dataObject.getCellData());\n    publicAPI.processDataArray(piece.ele('Points'), dataObject.getPoints());\n    POLYDATA_FIELDS.forEach(cellType => {\n      const cellTypeName = camelize(cellType);\n      const cells = dataObject[`get${cellTypeName}`]();\n      const connectivity = [];\n      const offsets = [];\n      const cellsData = cells.getData();\n      let npts = cellsData[0];\n      let offset = 0;\n      for (let i = 0; i < cellsData.length;) {\n        npts = cellsData[i++];\n        for (let j = 0; j < npts; ++j) {\n          connectivity.push(cellsData[i++]);\n        }\n        offset += npts;\n        offsets.push(offset);\n      }\n      const connectivityDataArray = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        name: 'connectivity',\n        values: Int32Array.from(connectivity)\n      });\n      const offsetsDataArray = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        name: 'offsets',\n        values: Int32Array.from(offsets)\n      });\n      const cellEle = piece.ele(cellTypeName);\n      publicAPI.processDataArray(cellEle, connectivityDataArray);\n      publicAPI.processDataArray(cellEle, offsetsDataArray);\n    });\n    return parent;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  dataType: 'PolyData'\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkXMLWriter.extend(publicAPI, model, initialValues);\n  vtkXMLPolyDataWriter(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkXMLPolyDataWriter');\n\n// ----------------------------------------------------------------------------\n\nvar vtkXMLPolyDataWriter$1 = {\n  newInstance,\n  extend\n};\nexport { vtkXMLPolyDataWriter$1 as default, extend, newInstance };","map":{"version":3,"names":["m","macro","vtkDataArray","vtkXMLWriter","POLYDATA_FIELDS","vtkXMLPolyDataWriter","publicAPI","model","classHierarchy","push","superClass","camelize","str","replace","letter","toUpperCase","create","dataObject","parent","polyData","ele","piece","NumberOfPoints","getPoints","getNumberOfPoints","NumberOfVerts","getNumberOfVerts","NumberOfLines","getNumberOfLines","NumberOfStrips","getNumberOfStrips","NumberOfPolys","getNumberOfPolys","processDataSetAttributes","getPointData","getCellData","processDataArray","forEach","cellType","cellTypeName","cells","connectivity","offsets","cellsData","getData","npts","offset","i","length","j","connectivityDataArray","newInstance","numberOfComponents","name","values","Int32Array","from","offsetsDataArray","cellEle","DEFAULT_VALUES","dataType","extend","initialValues","arguments","undefined","Object","assign","vtkXMLPolyDataWriter$1","default"],"sources":["C:/Users/Malcolm/Projects/Web/TickerWeb/node_modules/@kitware/vtk.js/IO/XML/XMLPolyDataWriter.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkXMLWriter from './XMLWriter.js';\nimport { POLYDATA_FIELDS } from '../../Common/DataModel/PolyData/Constants.js';\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// vtkXMLPolyDataWriter methods\n// ----------------------------------------------------------------------------\n\nfunction vtkXMLPolyDataWriter(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkXMLPolyDataWriter');\n\n  // Capture \"parentClass\" api for internal use\n  const superClass = {\n    ...publicAPI\n  };\n  function camelize(str) {\n    return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, letter => letter.toUpperCase()).replace(/\\s+/g, '');\n  }\n  publicAPI.create = dataObject => {\n    const parent = superClass.create(dataObject);\n    const polyData = parent.ele('PolyData', {});\n    const piece = polyData.ele('Piece', {\n      NumberOfPoints: dataObject.getPoints().getNumberOfPoints(),\n      NumberOfVerts: dataObject.getNumberOfVerts(),\n      NumberOfLines: dataObject.getNumberOfLines(),\n      NumberOfStrips: dataObject.getNumberOfStrips(),\n      NumberOfPolys: dataObject.getNumberOfPolys()\n    });\n    publicAPI.processDataSetAttributes(piece, 'PointData', dataObject.getPointData());\n    publicAPI.processDataSetAttributes(piece, 'CellData', dataObject.getCellData());\n    publicAPI.processDataArray(piece.ele('Points'), dataObject.getPoints());\n    POLYDATA_FIELDS.forEach(cellType => {\n      const cellTypeName = camelize(cellType);\n      const cells = dataObject[`get${cellTypeName}`]();\n      const connectivity = [];\n      const offsets = [];\n      const cellsData = cells.getData();\n      let npts = cellsData[0];\n      let offset = 0;\n      for (let i = 0; i < cellsData.length;) {\n        npts = cellsData[i++];\n        for (let j = 0; j < npts; ++j) {\n          connectivity.push(cellsData[i++]);\n        }\n        offset += npts;\n        offsets.push(offset);\n      }\n      const connectivityDataArray = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        name: 'connectivity',\n        values: Int32Array.from(connectivity)\n      });\n      const offsetsDataArray = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        name: 'offsets',\n        values: Int32Array.from(offsets)\n      });\n      const cellEle = piece.ele(cellTypeName);\n      publicAPI.processDataArray(cellEle, connectivityDataArray);\n      publicAPI.processDataArray(cellEle, offsetsDataArray);\n    });\n    return parent;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  dataType: 'PolyData'\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkXMLWriter.extend(publicAPI, model, initialValues);\n  vtkXMLPolyDataWriter(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkXMLPolyDataWriter');\n\n// ----------------------------------------------------------------------------\n\nvar vtkXMLPolyDataWriter$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkXMLPolyDataWriter$1 as default, extend, newInstance };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}