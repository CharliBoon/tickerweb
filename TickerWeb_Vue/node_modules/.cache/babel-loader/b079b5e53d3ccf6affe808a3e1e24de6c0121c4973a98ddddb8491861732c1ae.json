{"ast":null,"code":"import axios from 'axios';\nimport { ref, unref, onMounted, onBeforeUnmount, watchEffect, watch } from 'vue';\n// vtk\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry'; // geometry rendering for WebGL, WebGPU\nimport '@kitware/vtk.js/Rendering/Profiles/Glyph'; // vtkGlyph3DMapper\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\n//import vtkMapper                 from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkGlyph3DMapper from '@kitware/vtk.js/Rendering/Core/Glyph3DMapper';\nimport vtkCubeSource from '@kitware/vtk.js/Filters/Sources/CubeSource';\nexport default {\n  setup() {\n    const vtkContainer = ref(null);\n    const context = ref(null);\n    const coneResolution = ref(10);\n    const coneOpacity = ref(100);\n    const representation = ref(2);\n    const textEncoder = new TextEncoder();\n    //const path = 'http://localhost:5000';\n    const path = 'http://192.168.0.2:5000';\n    const reader = vtkXMLPolyDataReader.newInstance();\n    const glyph_node = vtkCubeSource.newInstance();\n    const mapper = vtkGlyph3DMapper.newInstance();\n    mapper.setInputConnection(reader.getOutputPort());\n    mapper.setScalarModeToUsePointData();\n    mapper.setColorByArrayName('alert');\n    mapper.setScalarVisibility(true);\n    mapper.setScalarRange(0, 2);\n    mapper.setSourceConnection(glyph_node.getOutputPort());\n    mapper.setScaleFactor(10.0);\n    mapper.setScaleModeToScaleByConstant;\n    const actor = vtkActor.newInstance();\n    actor.setMapper(mapper);\n    function setConeResolution(res) {\n      coneResolution.value = Number(res);\n    }\n    function setConeOpacity(opacity) {\n      coneOpacity.value = Number(opacity);\n    }\n    function setRepresentation(rep) {\n      representation.value = Number(rep);\n    }\n    function setConeAtResolution(resolution, reset = false) {\n      if (context.value) {\n        const {\n          renderWindow,\n          renderer\n        } = context.value;\n        axios.post(path + '/resolution', {\n          resolution: resolution\n        }).then(function (response_post) {\n          axios.get(path + '/nodes').then(response_get => {\n            reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n            if (reset) {\n              renderer.resetCamera();\n            }\n            renderWindow.render();\n            console.log(response_get.data);\n          }).catch(error => {\n            console.error(error);\n          });\n          console.log(response_post);\n        }).catch(function (error) {\n          console.log(error);\n        });\n        renderWindow.render();\n      }\n    }\n    function getNodes(reset = false) {\n      const {\n        renderWindow,\n        renderer\n      } = context.value;\n      axios.get(path + '/nodes').then(response_get => {\n        reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n        if (reset) {\n          renderer.resetCamera();\n        }\n        renderWindow.render();\n        console.log(response_get.data);\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n    watch(coneResolution, newValue => {\n      setConeAtResolution(newValue);\n    });\n    watchEffect(() => {\n      const opacity = unref(coneOpacity);\n      const rep = unref(representation);\n      if (context.value) {\n        const {\n          actor,\n          renderer,\n          renderWindow\n        } = context.value;\n        actor.getProperty().setOpacity(opacity * 0.01);\n        actor.getProperty().setRepresentation(rep);\n        renderer.resetCamera();\n        renderWindow.render();\n      }\n    });\n    onMounted(() => {\n      if (!context.value) {\n        const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value\n        });\n        const renderer = fullScreenRenderer.getRenderer();\n        const renderWindow = fullScreenRenderer.getRenderWindow();\n        renderer.addActor(actor);\n        context.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          actor,\n          mapper,\n          reader,\n          glyph_node\n        };\n\n        // renders as well\n        getNodes(true);\n        //setConeAtResolution(unref(coneResolution), true)\n      }\n    });\n    onBeforeUnmount(() => {\n      if (context.value) {\n        //const {fullScreenRenderer, actor, mapper } = context.value;\n        const {\n          renderer,\n          renderWindow,\n          fullScreenRenderer,\n          reader,\n          actor,\n          mapper\n        } = context.value;\n        actor.delete();\n        mapper.delete();\n        reader.delete();\n        glyph_node.delete();\n        renderer.delete();\n        renderWindow.delete();\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n    return {\n      vtkContainer,\n      setRepresentation,\n      setConeResolution,\n      setConeOpacity,\n      coneOpacity,\n      coneResolution,\n      representation\n    };\n  }\n};","map":{"version":3,"names":["axios","ref","unref","onMounted","onBeforeUnmount","watchEffect","watch","vtkFullScreenRenderWindow","vtkActor","vtkXMLPolyDataReader","vtkGlyph3DMapper","vtkCubeSource","setup","vtkContainer","context","coneResolution","coneOpacity","representation","textEncoder","TextEncoder","path","reader","newInstance","glyph_node","mapper","setInputConnection","getOutputPort","setScalarModeToUsePointData","setColorByArrayName","setScalarVisibility","setScalarRange","setSourceConnection","setScaleFactor","setScaleModeToScaleByConstant","actor","setMapper","setConeResolution","res","value","Number","setConeOpacity","opacity","setRepresentation","rep","setConeAtResolution","resolution","reset","renderWindow","renderer","post","then","response_post","get","response_get","parseAsArrayBuffer","encode","data","resetCamera","render","console","log","catch","error","getNodes","newValue","getProperty","setOpacity","fullScreenRenderer","rootContainer","getRenderer","getRenderWindow","addActor","delete"],"sources":["C:\\Users\\Malcolm\\Projects\\Web\\TickerWeb\\TickerWeb_Vue\\src\\components\\TickerVTK.vue"],"sourcesContent":["<template>\n  <div>\n    <div ref=\"vtkContainer\" />\n    <table class=\"controls\">\n      <tbody>\n        <tr>\n          <td style=\"text-align:left\">Resolution</td>\n          <td>\n            <input\n              type=\"range\"\n              min=\"3\"\n              max=\"100\"\n              :value=\"coneResolution\"\n              @input=\"setConeResolution($event.target.value)\"\n            />\n          </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Opacity</td>\n          <td>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              :value=\"coneOpacity\"\n              @input=\"setConeOpacity($event.target.value)\"\n            />\n          </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Representation</td>\n          <td>\n            <select\n              style=\"width: 100%\"\n              :value=\"representation\"\n              @change=\"setRepresentation($event.target.value)\"\n            >\n              <option value=\"0\">Points</option>\n              <option value=\"1\">Wireframe</option>\n              <option value=\"2\">Surface</option>\n            </select>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ref, unref, onMounted, onBeforeUnmount, watchEffect, watch } from 'vue';\n// vtk\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry'; // geometry rendering for WebGL, WebGPU\nimport '@kitware/vtk.js/Rendering/Profiles/Glyph'; // vtkGlyph3DMapper\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkActor                  from '@kitware/vtk.js/Rendering/Core/Actor';\n//import vtkMapper                 from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader      from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkGlyph3DMapper          from '@kitware/vtk.js/Rendering/Core/Glyph3DMapper'; \nimport vtkCubeSource             from '@kitware/vtk.js/Filters/Sources/CubeSource';\n\nexport default {\n\n  setup() {\n  \n    const vtkContainer = ref(null);\n    const context = ref(null);\n    const coneResolution = ref(10);\n\tconst coneOpacity    = ref(100);\n    const representation = ref(2);\n\t\n    const textEncoder = new TextEncoder();\n    //const path = 'http://localhost:5000';\n\tconst path = 'http://192.168.0.2:5000';\n    \n\tconst reader = vtkXMLPolyDataReader.newInstance();\n\t\n\tconst glyph_node = vtkCubeSource.newInstance();\n\tconst mapper = vtkGlyph3DMapper.newInstance();\n\tmapper.setInputConnection(reader.getOutputPort());\n\tmapper.setScalarModeToUsePointData()\n\tmapper.setColorByArrayName('alert')\n\tmapper.setScalarVisibility(true)\n\tmapper.setScalarRange(0, 2)\n\tmapper.setSourceConnection(glyph_node.getOutputPort())\n\tmapper.setScaleFactor(10.0)\n\tmapper.setScaleModeToScaleByConstant\n\n    const actor = vtkActor.newInstance();\n    actor.setMapper(mapper);\n\n    function setConeResolution(res) {\n      coneResolution.value = Number(res);\n    }\n\t\n\tfunction setConeOpacity(opacity) {\n      coneOpacity.value = Number(opacity);\n    }\n\n    function setRepresentation(rep) {\n      representation.value = Number(rep);\n    }\n\t\n\tfunction setConeAtResolution(resolution, reset=false) {\n      if (context.value) {\n        const {renderWindow, renderer} = context.value;\n\t\taxios.post(path + '/resolution',{resolution: resolution})\n          .then(function (response_post) {\n            axios.get(path+'/nodes')\n              .then((response_get) => {\n                reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n\t\t\t\tif (reset) {\n                  renderer.resetCamera()\n                  }\n\t\t\t\trenderWindow.render();\n                console.log(response_get.data)\n              })\n              .catch((error) => {\n                console.error(error);\n              });\n            console.log(response_post);\n          })\n          .catch(function (error) {\n            console.log(error);\n          })\n\t\trenderWindow.render();\n      }\n\t}\n\t\n\tfunction getNodes(reset=false) {\n      const {renderWindow, renderer} = context.value;\n      axios.get(path+'/nodes')\n        .then((response_get) => {\n          reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n          if (reset) {\n            renderer.resetCamera()\n            }\n          renderWindow.render();\n          console.log(response_get.data)\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n\t\n\twatch(coneResolution, (newValue) => {\n      setConeAtResolution(newValue)\n\t})\n\n    watchEffect(() => {\n      const opacity = unref(coneOpacity);\n      const rep = unref(representation);\n      if (context.value) {\n        const { actor, renderer, renderWindow } = context.value;\n\t\tactor.getProperty().setOpacity(opacity*0.01);\n        actor.getProperty().setRepresentation(rep);\n        renderer.resetCamera()\n\t\trenderWindow.render();\n      }\n    });\n\n    onMounted(() => {\n\t\n      if (!context.value) {\n        const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value,\n          });\n        const renderer = fullScreenRenderer.getRenderer();\n        const renderWindow = fullScreenRenderer.getRenderWindow();\n\t\trenderer.addActor(actor);\n\t\t\n\t\tcontext.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          actor,\n          mapper,\n          reader,\n          glyph_node,\n        };\n\t\t\n\t\t// renders as well\n\t\tgetNodes(true)\n        //setConeAtResolution(unref(coneResolution), true)\n      }\n    });\n\n    onBeforeUnmount(() => {\n      if (context.value) {\n\t\t//const {fullScreenRenderer, actor, mapper } = context.value;\n        const { renderer, renderWindow, fullScreenRenderer, reader, actor, mapper } = context.value;\n        actor.delete();\n        mapper.delete();\n        reader.delete();\n\t\tglyph_node.delete();\n\t\t\n\t\trenderer.delete()\n\t\trenderWindow.delete()\n\t\t\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n\n    return {\n      vtkContainer,\n      setRepresentation,\n      setConeResolution,\n      setConeOpacity,\n      coneOpacity,\n      coneResolution,\n      representation,\n    };\n  }\n}\n</script>\n\n<style scoped>\n.controls {\n  position: absolute;\n  top: 25px;\n  left: 25px;\n  background: white;\n  padding: 12px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}