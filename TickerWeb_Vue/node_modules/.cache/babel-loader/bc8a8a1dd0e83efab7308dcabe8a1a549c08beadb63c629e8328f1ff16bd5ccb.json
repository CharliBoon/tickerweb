{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { m as macro } from '../../macros2.js';\nimport vtkWebGPUTexture from './Texture.js';\nimport vtkWebGPURenderEncoder from './RenderEncoder.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkWebGPUFullScreenQuad from './FullScreenQuad.js';\n\n// ----------------------------------------------------------------------------\n\nconst oitpFragTemplate = `\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var tcoord: vec2<i32> = vec2<i32>(i32(input.fragPos.x), i32(input.fragPos.y));\n  var reveal: f32 = textureLoad(oitpAccumTexture, tcoord, 0).r;\n  if (reveal == 1.0) { discard; }\n  var tcolor: vec4<f32> = textureLoad(oitpColorTexture, tcoord, 0);\n  var total: f32 = max(tcolor.a, 0.01);\n  var computedColor: vec4<f32> = vec4<f32>(tcolor.r/total, tcolor.g/total, tcolor.b/total, 1.0 - reveal);\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\nfunction vtkWebGPUOrderIndependentTranslucentPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUOrderIndependentTranslucentPass');\n\n  // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n  publicAPI.traverse = (renNode, viewNode) => {\n    if (model.deleted) {\n      return;\n    }\n\n    // we just render our delegates in order\n    model._currentParent = viewNode;\n    const device = viewNode.getDevice();\n    if (!model.translucentRenderEncoder) {\n      publicAPI.createRenderEncoder();\n      publicAPI.createFinalEncoder();\n      model.translucentColorTexture = vtkWebGPUTexture.newInstance({\n        label: 'translucentPassColor'\n      });\n      model.translucentColorTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'rgba16float',\n        /* eslint-disable no-undef */\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n      });\n      const v1 = model.translucentColorTexture.createView('oitpColorTexture');\n      model.translucentRenderEncoder.setColorTextureView(0, v1);\n      model.translucentAccumulateTexture = vtkWebGPUTexture.newInstance({\n        label: 'translucentPassAccumulate'\n      });\n      model.translucentAccumulateTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'r16float',\n        /* eslint-disable no-undef */\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n      });\n      const v2 = model.translucentAccumulateTexture.createView('oitpAccumTexture');\n      model.translucentRenderEncoder.setColorTextureView(1, v2);\n      model.fullScreenQuad = vtkWebGPUFullScreenQuad.newInstance();\n      model.fullScreenQuad.setDevice(viewNode.getDevice());\n      model.fullScreenQuad.setPipelineHash('oitpfsq');\n      model.fullScreenQuad.setTextureViews(model.translucentRenderEncoder.getColorTextureViews());\n      model.fullScreenQuad.setFragmentShaderTemplate(oitpFragTemplate);\n    } else {\n      model.translucentColorTexture.resizeToMatch(model.colorTextureView.getTexture());\n      model.translucentAccumulateTexture.resizeToMatch(model.colorTextureView.getTexture());\n    }\n    model.translucentRenderEncoder.setDepthTextureView(model.depthTextureView);\n    model.translucentRenderEncoder.attachTextureViews();\n    publicAPI.setCurrentOperation('translucentPass');\n    renNode.setRenderEncoder(model.translucentRenderEncoder);\n    renNode.traverse(publicAPI);\n    publicAPI.finalPass(viewNode, renNode);\n  };\n  publicAPI.finalPass = (viewNode, renNode) => {\n    model.translucentFinalEncoder.setColorTextureView(0, model.colorTextureView);\n    model.translucentFinalEncoder.attachTextureViews();\n    model.translucentFinalEncoder.begin(viewNode.getCommandEncoder());\n    renNode.scissorAndViewport(model.translucentFinalEncoder);\n    model.fullScreenQuad.prepareAndDraw(model.translucentFinalEncoder);\n    model.translucentFinalEncoder.end();\n  };\n  publicAPI.getTextures = () => [model.translucentColorTexture, model.translucentAccumulateTexture];\n  publicAPI.createRenderEncoder = () => {\n    model.translucentRenderEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'translucentRender'\n    });\n    const rDesc = model.translucentRenderEncoder.getDescription();\n    rDesc.colorAttachments = [{\n      view: undefined,\n      clearValue: [0.0, 0.0, 0.0, 0.0],\n      loadOp: 'clear',\n      storeOp: 'store'\n    }, {\n      view: undefined,\n      clearValue: [1.0, 0.0, 0.0, 0.0],\n      loadOp: 'clear',\n      storeOp: 'store'\n    }];\n    rDesc.depthStencilAttachment = {\n      view: undefined,\n      depthLoadOp: 'load',\n      depthStoreOp: 'store'\n    };\n    model.translucentRenderEncoder.setReplaceShaderCodeFunction(pipeline => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor');\n      fDesc.addOutput('f32', 'outAccum');\n      fDesc.addBuiltinInput('vec4<f32>', '@builtin(position) fragPos');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', [\n      // very simple depth weighting in w z ranges from 1.0 near to 0.0\n      'var w: f32 = computedColor.a * pow(0.1 + input.fragPos.z, 2.0);', 'output.outColor = vec4<f32>(computedColor.rgb*w, w);', 'output.outAccum = computedColor.a;']).result;\n      fDesc.setCode(code);\n    });\n    model.translucentRenderEncoder.setPipelineHash('oitpr');\n    model.translucentRenderEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      depthStencil: {\n        depthWriteEnabled: false,\n        depthCompare: 'greater',\n        format: 'depth32float'\n      },\n      fragment: {\n        targets: [{\n          format: 'rgba16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one'\n            }\n          }\n        }, {\n          format: 'r16float',\n          blend: {\n            color: {\n              srcFactor: 'zero',\n              dstFactor: 'one-minus-src'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n  publicAPI.createFinalEncoder = () => {\n    model.translucentFinalEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'translucentFinal'\n    });\n    model.translucentFinalEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n    model.translucentFinalEncoder.setReplaceShaderCodeFunction(pipeline => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor');\n      fDesc.addBuiltinInput('vec4<f32>', '@builtin(position) fragPos');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor = vec4<f32>(computedColor.rgb, computedColor.a);']).result;\n      fDesc.setCode(code);\n    });\n    model.translucentFinalEncoder.setPipelineHash('oitpf');\n    model.translucentFinalEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'rgba16float',\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  colorTextureView: null,\n  depthTextureView: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['colorTextureView', 'depthTextureView']);\n\n  // Object methods\n  vtkWebGPUOrderIndependentTranslucentPass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUOrderIndependentTranslucentPass');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUOrderIndepenentTranslucentPass = {\n  newInstance,\n  extend\n};\nexport { vtkWebGPUOrderIndepenentTranslucentPass as default, extend, newInstance };","map":{"version":3,"names":["m","macro","vtkWebGPUTexture","vtkWebGPURenderEncoder","vtkWebGPUShaderCache","vtkRenderPass","vtkWebGPUFullScreenQuad","oitpFragTemplate","vtkWebGPUOrderIndependentTranslucentPass","publicAPI","model","classHierarchy","push","traverse","renNode","viewNode","deleted","_currentParent","device","getDevice","translucentRenderEncoder","createRenderEncoder","createFinalEncoder","translucentColorTexture","newInstance","label","create","width","getCanvas","height","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","TEXTURE_BINDING","v1","createView","setColorTextureView","translucentAccumulateTexture","v2","fullScreenQuad","setDevice","setPipelineHash","setTextureViews","getColorTextureViews","setFragmentShaderTemplate","resizeToMatch","colorTextureView","getTexture","setDepthTextureView","depthTextureView","attachTextureViews","setCurrentOperation","setRenderEncoder","finalPass","translucentFinalEncoder","begin","getCommandEncoder","scissorAndViewport","prepareAndDraw","end","getTextures","rDesc","getDescription","colorAttachments","view","undefined","clearValue","loadOp","storeOp","depthStencilAttachment","depthLoadOp","depthStoreOp","setReplaceShaderCodeFunction","pipeline","fDesc","getShaderDescription","addOutput","addBuiltinInput","code","getCode","substitute","result","setCode","setPipelineSettings","primitive","cullMode","depthStencil","depthWriteEnabled","depthCompare","fragment","targets","blend","color","srcFactor","dstFactor","alpha","srcfactor","setDescription","DEFAULT_VALUES","extend","initialValues","arguments","length","Object","assign","setGet","vtkWebGPUOrderIndepenentTranslucentPass","default"],"sources":["C:/Users/Malcolm/Projects/Web/my-vtkjs-app/node_modules/@kitware/vtk.js/Rendering/WebGPU/OrderIndependentTranslucentPass.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport vtkWebGPUTexture from './Texture.js';\nimport vtkWebGPURenderEncoder from './RenderEncoder.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkWebGPUFullScreenQuad from './FullScreenQuad.js';\n\n// ----------------------------------------------------------------------------\n\nconst oitpFragTemplate = `\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n@fragment\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var tcoord: vec2<i32> = vec2<i32>(i32(input.fragPos.x), i32(input.fragPos.y));\n  var reveal: f32 = textureLoad(oitpAccumTexture, tcoord, 0).r;\n  if (reveal == 1.0) { discard; }\n  var tcolor: vec4<f32> = textureLoad(oitpColorTexture, tcoord, 0);\n  var total: f32 = max(tcolor.a, 0.01);\n  var computedColor: vec4<f32> = vec4<f32>(tcolor.r/total, tcolor.g/total, tcolor.b/total, 1.0 - reveal);\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n`;\nfunction vtkWebGPUOrderIndependentTranslucentPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUOrderIndependentTranslucentPass');\n\n  // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n  publicAPI.traverse = (renNode, viewNode) => {\n    if (model.deleted) {\n      return;\n    }\n\n    // we just render our delegates in order\n    model._currentParent = viewNode;\n    const device = viewNode.getDevice();\n    if (!model.translucentRenderEncoder) {\n      publicAPI.createRenderEncoder();\n      publicAPI.createFinalEncoder();\n      model.translucentColorTexture = vtkWebGPUTexture.newInstance({\n        label: 'translucentPassColor'\n      });\n      model.translucentColorTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'rgba16float',\n        /* eslint-disable no-undef */\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n      });\n      const v1 = model.translucentColorTexture.createView('oitpColorTexture');\n      model.translucentRenderEncoder.setColorTextureView(0, v1);\n      model.translucentAccumulateTexture = vtkWebGPUTexture.newInstance({\n        label: 'translucentPassAccumulate'\n      });\n      model.translucentAccumulateTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'r16float',\n        /* eslint-disable no-undef */\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n      });\n      const v2 = model.translucentAccumulateTexture.createView('oitpAccumTexture');\n      model.translucentRenderEncoder.setColorTextureView(1, v2);\n      model.fullScreenQuad = vtkWebGPUFullScreenQuad.newInstance();\n      model.fullScreenQuad.setDevice(viewNode.getDevice());\n      model.fullScreenQuad.setPipelineHash('oitpfsq');\n      model.fullScreenQuad.setTextureViews(model.translucentRenderEncoder.getColorTextureViews());\n      model.fullScreenQuad.setFragmentShaderTemplate(oitpFragTemplate);\n    } else {\n      model.translucentColorTexture.resizeToMatch(model.colorTextureView.getTexture());\n      model.translucentAccumulateTexture.resizeToMatch(model.colorTextureView.getTexture());\n    }\n    model.translucentRenderEncoder.setDepthTextureView(model.depthTextureView);\n    model.translucentRenderEncoder.attachTextureViews();\n    publicAPI.setCurrentOperation('translucentPass');\n    renNode.setRenderEncoder(model.translucentRenderEncoder);\n    renNode.traverse(publicAPI);\n    publicAPI.finalPass(viewNode, renNode);\n  };\n  publicAPI.finalPass = (viewNode, renNode) => {\n    model.translucentFinalEncoder.setColorTextureView(0, model.colorTextureView);\n    model.translucentFinalEncoder.attachTextureViews();\n    model.translucentFinalEncoder.begin(viewNode.getCommandEncoder());\n    renNode.scissorAndViewport(model.translucentFinalEncoder);\n    model.fullScreenQuad.prepareAndDraw(model.translucentFinalEncoder);\n    model.translucentFinalEncoder.end();\n  };\n  publicAPI.getTextures = () => [model.translucentColorTexture, model.translucentAccumulateTexture];\n  publicAPI.createRenderEncoder = () => {\n    model.translucentRenderEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'translucentRender'\n    });\n    const rDesc = model.translucentRenderEncoder.getDescription();\n    rDesc.colorAttachments = [{\n      view: undefined,\n      clearValue: [0.0, 0.0, 0.0, 0.0],\n      loadOp: 'clear',\n      storeOp: 'store'\n    }, {\n      view: undefined,\n      clearValue: [1.0, 0.0, 0.0, 0.0],\n      loadOp: 'clear',\n      storeOp: 'store'\n    }];\n    rDesc.depthStencilAttachment = {\n      view: undefined,\n      depthLoadOp: 'load',\n      depthStoreOp: 'store'\n    };\n    model.translucentRenderEncoder.setReplaceShaderCodeFunction(pipeline => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor');\n      fDesc.addOutput('f32', 'outAccum');\n      fDesc.addBuiltinInput('vec4<f32>', '@builtin(position) fragPos');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', [\n      // very simple depth weighting in w z ranges from 1.0 near to 0.0\n      'var w: f32 = computedColor.a * pow(0.1 + input.fragPos.z, 2.0);', 'output.outColor = vec4<f32>(computedColor.rgb*w, w);', 'output.outAccum = computedColor.a;']).result;\n      fDesc.setCode(code);\n    });\n    model.translucentRenderEncoder.setPipelineHash('oitpr');\n    model.translucentRenderEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      depthStencil: {\n        depthWriteEnabled: false,\n        depthCompare: 'greater',\n        format: 'depth32float'\n      },\n      fragment: {\n        targets: [{\n          format: 'rgba16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one'\n            }\n          }\n        }, {\n          format: 'r16float',\n          blend: {\n            color: {\n              srcFactor: 'zero',\n              dstFactor: 'one-minus-src'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n  publicAPI.createFinalEncoder = () => {\n    model.translucentFinalEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'translucentFinal'\n    });\n    model.translucentFinalEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n    model.translucentFinalEncoder.setReplaceShaderCodeFunction(pipeline => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor');\n      fDesc.addBuiltinInput('vec4<f32>', '@builtin(position) fragPos');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor = vec4<f32>(computedColor.rgb, computedColor.a);']).result;\n      fDesc.setCode(code);\n    });\n    model.translucentFinalEncoder.setPipelineHash('oitpf');\n    model.translucentFinalEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'rgba16float',\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  colorTextureView: null,\n  depthTextureView: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['colorTextureView', 'depthTextureView']);\n\n  // Object methods\n  vtkWebGPUOrderIndependentTranslucentPass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUOrderIndependentTranslucentPass');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUOrderIndepenentTranslucentPass = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUOrderIndepenentTranslucentPass as default, extend, newInstance };\n"],"mappings":";AAAA,SAASA,CAAC,IAAIC,KAAK,QAAQ,kBAAkB;AAC7C,OAAOC,gBAAgB,MAAM,cAAc;AAC3C,OAAOC,sBAAsB,MAAM,oBAAoB;AACvD,OAAOC,oBAAoB,MAAM,kBAAkB;AACnD,OAAOC,aAAa,MAAM,6BAA6B;AACvD,OAAOC,uBAAuB,MAAM,qBAAqB;;AAEzD;;AAEA,MAAMC,gBAAgB,GAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,SAASC,wCAAwCA,CAACC,SAAS,EAAEC,KAAK,EAAE;EAClE;EACAA,KAAK,CAACC,cAAc,CAACC,IAAI,CAAC,0CAA0C,CAAC;;EAErE;EACA;EACA;EACA;EACAH,SAAS,CAACI,QAAQ,GAAG,CAACC,OAAO,EAAEC,QAAQ,KAAK;IAC1C,IAAIL,KAAK,CAACM,OAAO,EAAE;MACjB;IACF;;IAEA;IACAN,KAAK,CAACO,cAAc,GAAGF,QAAQ;IAC/B,MAAMG,MAAM,GAAGH,QAAQ,CAACI,SAAS,CAAC,CAAC;IACnC,IAAI,CAACT,KAAK,CAACU,wBAAwB,EAAE;MACnCX,SAAS,CAACY,mBAAmB,CAAC,CAAC;MAC/BZ,SAAS,CAACa,kBAAkB,CAAC,CAAC;MAC9BZ,KAAK,CAACa,uBAAuB,GAAGrB,gBAAgB,CAACsB,WAAW,CAAC;QAC3DC,KAAK,EAAE;MACT,CAAC,CAAC;MACFf,KAAK,CAACa,uBAAuB,CAACG,MAAM,CAACR,MAAM,EAAE;QAC3CS,KAAK,EAAEZ,QAAQ,CAACa,SAAS,CAAC,CAAC,CAACD,KAAK;QACjCE,MAAM,EAAEd,QAAQ,CAACa,SAAS,CAAC,CAAC,CAACC,MAAM;QACnCC,MAAM,EAAE,aAAa;QACrB;QACA;QACAC,KAAK,EAAEC,eAAe,CAACC,iBAAiB,GAAGD,eAAe,CAACE;MAC7D,CAAC,CAAC;MACF,MAAMC,EAAE,GAAGzB,KAAK,CAACa,uBAAuB,CAACa,UAAU,CAAC,kBAAkB,CAAC;MACvE1B,KAAK,CAACU,wBAAwB,CAACiB,mBAAmB,CAAC,CAAC,EAAEF,EAAE,CAAC;MACzDzB,KAAK,CAAC4B,4BAA4B,GAAGpC,gBAAgB,CAACsB,WAAW,CAAC;QAChEC,KAAK,EAAE;MACT,CAAC,CAAC;MACFf,KAAK,CAAC4B,4BAA4B,CAACZ,MAAM,CAACR,MAAM,EAAE;QAChDS,KAAK,EAAEZ,QAAQ,CAACa,SAAS,CAAC,CAAC,CAACD,KAAK;QACjCE,MAAM,EAAEd,QAAQ,CAACa,SAAS,CAAC,CAAC,CAACC,MAAM;QACnCC,MAAM,EAAE,UAAU;QAClB;QACA;QACAC,KAAK,EAAEC,eAAe,CAACC,iBAAiB,GAAGD,eAAe,CAACE;MAC7D,CAAC,CAAC;MACF,MAAMK,EAAE,GAAG7B,KAAK,CAAC4B,4BAA4B,CAACF,UAAU,CAAC,kBAAkB,CAAC;MAC5E1B,KAAK,CAACU,wBAAwB,CAACiB,mBAAmB,CAAC,CAAC,EAAEE,EAAE,CAAC;MACzD7B,KAAK,CAAC8B,cAAc,GAAGlC,uBAAuB,CAACkB,WAAW,CAAC,CAAC;MAC5Dd,KAAK,CAAC8B,cAAc,CAACC,SAAS,CAAC1B,QAAQ,CAACI,SAAS,CAAC,CAAC,CAAC;MACpDT,KAAK,CAAC8B,cAAc,CAACE,eAAe,CAAC,SAAS,CAAC;MAC/ChC,KAAK,CAAC8B,cAAc,CAACG,eAAe,CAACjC,KAAK,CAACU,wBAAwB,CAACwB,oBAAoB,CAAC,CAAC,CAAC;MAC3FlC,KAAK,CAAC8B,cAAc,CAACK,yBAAyB,CAACtC,gBAAgB,CAAC;IAClE,CAAC,MAAM;MACLG,KAAK,CAACa,uBAAuB,CAACuB,aAAa,CAACpC,KAAK,CAACqC,gBAAgB,CAACC,UAAU,CAAC,CAAC,CAAC;MAChFtC,KAAK,CAAC4B,4BAA4B,CAACQ,aAAa,CAACpC,KAAK,CAACqC,gBAAgB,CAACC,UAAU,CAAC,CAAC,CAAC;IACvF;IACAtC,KAAK,CAACU,wBAAwB,CAAC6B,mBAAmB,CAACvC,KAAK,CAACwC,gBAAgB,CAAC;IAC1ExC,KAAK,CAACU,wBAAwB,CAAC+B,kBAAkB,CAAC,CAAC;IACnD1C,SAAS,CAAC2C,mBAAmB,CAAC,iBAAiB,CAAC;IAChDtC,OAAO,CAACuC,gBAAgB,CAAC3C,KAAK,CAACU,wBAAwB,CAAC;IACxDN,OAAO,CAACD,QAAQ,CAACJ,SAAS,CAAC;IAC3BA,SAAS,CAAC6C,SAAS,CAACvC,QAAQ,EAAED,OAAO,CAAC;EACxC,CAAC;EACDL,SAAS,CAAC6C,SAAS,GAAG,CAACvC,QAAQ,EAAED,OAAO,KAAK;IAC3CJ,KAAK,CAAC6C,uBAAuB,CAAClB,mBAAmB,CAAC,CAAC,EAAE3B,KAAK,CAACqC,gBAAgB,CAAC;IAC5ErC,KAAK,CAAC6C,uBAAuB,CAACJ,kBAAkB,CAAC,CAAC;IAClDzC,KAAK,CAAC6C,uBAAuB,CAACC,KAAK,CAACzC,QAAQ,CAAC0C,iBAAiB,CAAC,CAAC,CAAC;IACjE3C,OAAO,CAAC4C,kBAAkB,CAAChD,KAAK,CAAC6C,uBAAuB,CAAC;IACzD7C,KAAK,CAAC8B,cAAc,CAACmB,cAAc,CAACjD,KAAK,CAAC6C,uBAAuB,CAAC;IAClE7C,KAAK,CAAC6C,uBAAuB,CAACK,GAAG,CAAC,CAAC;EACrC,CAAC;EACDnD,SAAS,CAACoD,WAAW,GAAG,MAAM,CAACnD,KAAK,CAACa,uBAAuB,EAAEb,KAAK,CAAC4B,4BAA4B,CAAC;EACjG7B,SAAS,CAACY,mBAAmB,GAAG,MAAM;IACpCX,KAAK,CAACU,wBAAwB,GAAGjB,sBAAsB,CAACqB,WAAW,CAAC;MAClEC,KAAK,EAAE;IACT,CAAC,CAAC;IACF,MAAMqC,KAAK,GAAGpD,KAAK,CAACU,wBAAwB,CAAC2C,cAAc,CAAC,CAAC;IAC7DD,KAAK,CAACE,gBAAgB,GAAG,CAAC;MACxBC,IAAI,EAAEC,SAAS;MACfC,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;MAChCC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;IACX,CAAC,EAAE;MACDJ,IAAI,EAAEC,SAAS;MACfC,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;MAChCC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;IACX,CAAC,CAAC;IACFP,KAAK,CAACQ,sBAAsB,GAAG;MAC7BL,IAAI,EAAEC,SAAS;MACfK,WAAW,EAAE,MAAM;MACnBC,YAAY,EAAE;IAChB,CAAC;IACD9D,KAAK,CAACU,wBAAwB,CAACqD,4BAA4B,CAACC,QAAQ,IAAI;MACtE,MAAMC,KAAK,GAAGD,QAAQ,CAACE,oBAAoB,CAAC,UAAU,CAAC;MACvDD,KAAK,CAACE,SAAS,CAAC,WAAW,EAAE,UAAU,CAAC;MACxCF,KAAK,CAACE,SAAS,CAAC,KAAK,EAAE,UAAU,CAAC;MAClCF,KAAK,CAACG,eAAe,CAAC,WAAW,EAAE,4BAA4B,CAAC;MAChE,IAAIC,IAAI,GAAGJ,KAAK,CAACK,OAAO,CAAC,CAAC;MAC1BD,IAAI,GAAG3E,oBAAoB,CAAC6E,UAAU,CAACF,IAAI,EAAE,4BAA4B,EAAE;MAC3E;MACA,iEAAiE,EAAE,sDAAsD,EAAE,oCAAoC,CAAC,CAAC,CAACG,MAAM;MACxKP,KAAK,CAACQ,OAAO,CAACJ,IAAI,CAAC;IACrB,CAAC,CAAC;IACFrE,KAAK,CAACU,wBAAwB,CAACsB,eAAe,CAAC,OAAO,CAAC;IACvDhC,KAAK,CAACU,wBAAwB,CAACgE,mBAAmB,CAAC;MACjDC,SAAS,EAAE;QACTC,QAAQ,EAAE;MACZ,CAAC;MACDC,YAAY,EAAE;QACZC,iBAAiB,EAAE,KAAK;QACxBC,YAAY,EAAE,SAAS;QACvB3D,MAAM,EAAE;MACV,CAAC;MACD4D,QAAQ,EAAE;QACRC,OAAO,EAAE,CAAC;UACR7D,MAAM,EAAE,aAAa;UACrB8D,KAAK,EAAE;YACLC,KAAK,EAAE;cACLC,SAAS,EAAE,KAAK;cAChBC,SAAS,EAAE;YACb,CAAC;YACDC,KAAK,EAAE;cACLC,SAAS,EAAE,KAAK;cAChBF,SAAS,EAAE;YACb;UACF;QACF,CAAC,EAAE;UACDjE,MAAM,EAAE,UAAU;UAClB8D,KAAK,EAAE;YACLC,KAAK,EAAE;cACLC,SAAS,EAAE,MAAM;cACjBC,SAAS,EAAE;YACb,CAAC;YACDC,KAAK,EAAE;cACLC,SAAS,EAAE,KAAK;cAChBF,SAAS,EAAE;YACb;UACF;QACF,CAAC;MACH;IACF,CAAC,CAAC;EACJ,CAAC;EACDtF,SAAS,CAACa,kBAAkB,GAAG,MAAM;IACnCZ,KAAK,CAAC6C,uBAAuB,GAAGpD,sBAAsB,CAACqB,WAAW,CAAC;MACjEC,KAAK,EAAE;IACT,CAAC,CAAC;IACFf,KAAK,CAAC6C,uBAAuB,CAAC2C,cAAc,CAAC;MAC3ClC,gBAAgB,EAAE,CAAC;QACjBC,IAAI,EAAE,IAAI;QACVG,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;MACX,CAAC;IACH,CAAC,CAAC;IACF3D,KAAK,CAAC6C,uBAAuB,CAACkB,4BAA4B,CAACC,QAAQ,IAAI;MACrE,MAAMC,KAAK,GAAGD,QAAQ,CAACE,oBAAoB,CAAC,UAAU,CAAC;MACvDD,KAAK,CAACE,SAAS,CAAC,WAAW,EAAE,UAAU,CAAC;MACxCF,KAAK,CAACG,eAAe,CAAC,WAAW,EAAE,4BAA4B,CAAC;MAChE,IAAIC,IAAI,GAAGJ,KAAK,CAACK,OAAO,CAAC,CAAC;MAC1BD,IAAI,GAAG3E,oBAAoB,CAAC6E,UAAU,CAACF,IAAI,EAAE,4BAA4B,EAAE,CAAC,kEAAkE,CAAC,CAAC,CAACG,MAAM;MACvJP,KAAK,CAACQ,OAAO,CAACJ,IAAI,CAAC;IACrB,CAAC,CAAC;IACFrE,KAAK,CAAC6C,uBAAuB,CAACb,eAAe,CAAC,OAAO,CAAC;IACtDhC,KAAK,CAAC6C,uBAAuB,CAAC6B,mBAAmB,CAAC;MAChDC,SAAS,EAAE;QACTC,QAAQ,EAAE;MACZ,CAAC;MACDI,QAAQ,EAAE;QACRC,OAAO,EAAE,CAAC;UACR7D,MAAM,EAAE,aAAa;UACrB8D,KAAK,EAAE;YACLC,KAAK,EAAE;cACLC,SAAS,EAAE,WAAW;cACtBC,SAAS,EAAE;YACb,CAAC;YACDC,KAAK,EAAE;cACLC,SAAS,EAAE,KAAK;cAChBF,SAAS,EAAE;YACb;UACF;QACF,CAAC;MACH;IACF,CAAC,CAAC;EACJ,CAAC;AACH;;AAEA;AACA;AACA;;AAEA,MAAMI,cAAc,GAAG;EACrBpD,gBAAgB,EAAE,IAAI;EACtBG,gBAAgB,EAAE;AACpB,CAAC;;AAED;;AAEA,SAASkD,MAAMA,CAAC3F,SAAS,EAAEC,KAAK,EAAE;EAChC,IAAI2F,aAAa,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKpC,SAAS,GAAGoC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1FE,MAAM,CAACC,MAAM,CAAC/F,KAAK,EAAEyF,cAAc,EAAEE,aAAa,CAAC;;EAEnD;EACAhG,aAAa,CAAC+F,MAAM,CAAC3F,SAAS,EAAEC,KAAK,EAAE2F,aAAa,CAAC;EACrDpG,KAAK,CAACyG,MAAM,CAACjG,SAAS,EAAEC,KAAK,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;;EAExE;EACAF,wCAAwC,CAACC,SAAS,EAAEC,KAAK,CAAC;AAC5D;;AAEA;;AAEA,MAAMc,WAAW,GAAGvB,KAAK,CAACuB,WAAW,CAAC4E,MAAM,EAAE,0CAA0C,CAAC;;AAEzF;;AAEA,IAAIO,uCAAuC,GAAG;EAC5CnF,WAAW;EACX4E;AACF,CAAC;AAED,SAASO,uCAAuC,IAAIC,OAAO,EAAER,MAAM,EAAE5E,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}