{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport axios from 'axios';\nimport { ref, unref, onMounted, onBeforeUnmount, watchEffect, watch } from 'vue';\n// vtk\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry'; // geometry rendering for WebGL, WebGPU\nimport '@kitware/vtk.js/Rendering/Profiles/Glyph'; // vtkGlyph3DMapper\nimport '@kitware/vtk.js/Rendering/Profiles/Molecule'; // vtkSphereMapper\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkLookupTable from '@kitware/vtk.js/Common/Core/LookupTable';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkGlyph3DMapper from '@kitware/vtk.js/Rendering/Core/Glyph3DMapper';\nimport vtkCubeSource from '@kitware/vtk.js/Filters/Sources/CubeSource';\n//import vtkSphereSource           from '@kitware/vtk.js/Filters/Sources/SphereSource';\nimport vtkSphereMapper from '@kitware/vtk.js/Rendering/Core/SphereMapper';\n\n//import vtkDataArray from 'vtk.js/Sources/Common/Core/DataArray';\n//import vtkPoints from 'vtk.js/Sources/Common/Core/Points';\n\nexport default {\n  setup() {\n    const session = {\n      user: 'malcolm',\n      mine: 'Bambanani'\n    };\n    let bounds = new Array(6).fill(0.0);\n    const vtkContainer = ref(null);\n    const context = ref(null);\n    const node_representation = ref(0);\n    const events_opacity = ref(50);\n    const events_timestamp = ref(1640995200);\n    const plan_opacity = ref(100);\n    const plan_representation = ref(1);\n    const textEncoder = new TextEncoder();\n    //const path = 'http://localhost:5000';\n    const path = 'http://192.168.0.2:5000';\n\n    // nodes\n    const node_reader = vtkXMLPolyDataReader.newInstance();\n    const node_lut = vtkLookupTable.newInstance(); // make custom LUT\n    const data = new Uint8Array([0, 255, 0, 255, 255, 165, 80, 255, 255, 0, 0, 255]); // green, orange, red\n    const table = vtkDataArray.newInstance({\n      values: data,\n      numberOfComponents: 4\n    }); // to VTK\n    node_lut.setTable(table); // LUT = green, orange, red\n\n    const node_glyph = vtkCubeSource.newInstance();\n    const node_mapper = vtkGlyph3DMapper.newInstance();\n    const node_actor = vtkActor.newInstance();\n    //\n    node_mapper.setInputConnection(node_reader.getOutputPort());\n    node_mapper.setSourceConnection(node_glyph.getOutputPort());\n    //node_mapper.setInputConnection(node_glyph.getOutputPort(), 1)\n    node_mapper.setScalarModeToUsePointData();\n    //node_mapper.setColorModeToMapScalars()\n    node_mapper.setColorByArrayName('alert');\n    node_mapper.setScaleArray('alert');\n    node_mapper.setScalarVisibility(true);\n    node_mapper.setScalarRange(1, 3);\n    node_mapper.setLookupTable(node_lut);\n    node_mapper.setScaleFactor(10.0);\n    //node_mapper.setScaleModeToScaleByConstant()\n    //node_mapper.setScaleMode(1)\n    node_actor.setMapper(node_mapper);\n    //node_actor.getProperty().setAmbient(0.5)\n\n    // plan\n    const plan_reader = vtkXMLPolyDataReader.newInstance();\n    const plan_mapper = vtkMapper.newInstance();\n    const plan_actor = vtkActor.newInstance();\n    //\n    plan_mapper.setInputConnection(plan_reader.getOutputPort());\n    plan_actor.setMapper(plan_mapper);\n    plan_actor.getProperty().setOpacity(0.25);\n    plan_actor.getProperty().setColor(0.5, 0.5, 0.5);\n\n    // events\n    const events_reader = vtkXMLPolyDataReader.newInstance();\n    const events_mapper = vtkSphereMapper.newInstance();\n    const events_actor = vtkActor.newInstance();\n    //\n    events_mapper.setInputConnection(events_reader.getOutputPort());\n    events_mapper.setScaleFactor(100.0);\n    events_mapper.setScaleArray('scale');\n    events_mapper.setScalarVisibility(true);\n    events_mapper.setScalarModeToUsePointData();\n    //events_mapper.setColorByArrayName('dtEvent');\n    events_mapper.setScalarRange(1640995200.0, 1656653056.0);\n    events_actor.setMapper(events_mapper);\n    events_actor.getProperty().setOpacity(0.5);\n    function setNodeRepresentation(rep) {\n      node_representation.value = Number(rep);\n    }\n    function setEventOpacity(opacity) {\n      events_opacity.value = Number(opacity);\n    }\n    function setEventTimeStamp(res) {\n      events_timestamp.value = Number(res);\n    }\n    function setPlanOpacity(opacity) {\n      plan_opacity.value = Number(opacity);\n    }\n    function setPlanRepresentation(rep) {\n      plan_representation.value = Number(rep);\n    }\n    async function onEventFilter(timestamp) {\n      const {\n        renderWindow\n      } = context.value;\n      await getEvents({\n        bounds: bounds,\n        mine: session.mine,\n        timestamp: timestamp\n      });\n      renderWindow.render();\n    }\n\n    // provide data to vtk pipelines\n\n    function getNodes(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/nodes', args).then(response_get => {\n          node_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n          resolve('nodes');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    function getNodeData(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/nodes_data', args).then(response_get => {\n          console.log('node_data');\n          console.log(response_get.data);\n          resolve('nodes');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    function getPlan(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/plan', args).then(response_get => {\n          plan_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n          resolve('plan');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    function getEvents(args = {}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/events', args).then(response_get => {\n          events_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n          resolve('events');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    async function getAllAndRender() {\n      const {\n        renderWindow,\n        renderer\n      } = context.value;\n      await getNodeData({\n        mine: session.mine\n      });\n      await getNodes({\n        mine: session.mine\n      });\n      bounds = node_reader.getOutputData().getBounds();\n      const buffer = 1000.0;\n      bounds[0] -= buffer;\n      bounds[1] += buffer;\n      bounds[2] -= buffer;\n      bounds[3] += buffer;\n      bounds[4] -= buffer;\n      bounds[5] += buffer;\n      console.log(bounds);\n      Promise.allSettled([getPlan({\n        bounds: bounds,\n        mine: session.mine\n      }), getEvents({\n        bounds: bounds,\n        mine: session.mine,\n        timestamp: 0.0\n      })]).then(() => {\n        renderer.resetCamera();\n        renderWindow.render();\n      });\n    }\n    function checkModified() {\n      return new Promise((resolve, reject) => {\n        axios.put(path + '/modified', {\n          mine: session.mine\n        }).then(response_get => {\n          console.log(response_get.data);\n          resolve('plan');\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n    watch(events_timestamp, newValue => {\n      onEventFilter(newValue);\n    });\n    watchEffect(() => {\n      if (context.value) {\n        const {\n          renderWindow\n        } = context.value;\n        node_mapper.setScaleMode(unref(node_representation));\n        plan_actor.getProperty().setOpacity(unref(plan_opacity) * 0.01);\n        plan_actor.getProperty().setRepresentation(unref(plan_representation));\n        events_actor.getProperty().setOpacity(unref(events_opacity) * 0.01);\n        renderWindow.render();\n      }\n    });\n    onMounted(() => {\n      console.log('onMounted');\n      if (!context.value) {\n        const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value\n        });\n        const renderer = fullScreenRenderer.getRenderer();\n        const renderWindow = fullScreenRenderer.getRenderWindow();\n        //\n        renderer.setBackground(1.0, 1.0, 1.0);\n        renderer.setUseDepthPeeling(true); // depth peeling\n        renderer.setMaximumNumberOfPeels(100); // depth peeling\n        renderer.setOcclusionRatio(0.01); // depth peeling\n        //\n        renderer.addActor(node_actor);\n        renderer.addActor(plan_actor);\n        renderer.addActor(events_actor);\n        context.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          //\n          node_actor,\n          node_mapper,\n          node_reader,\n          node_glyph,\n          //\n          events_actor,\n          events_mapper,\n          events_reader,\n          //\n          plan_reader,\n          plan_mapper,\n          plan_actor\n        };\n\n        // renders as well\n        getAllAndRender();\n        setInterval(checkModified, 30000);\n      }\n    });\n    onBeforeUnmount(() => {\n      if (context.value) {\n        //const {fullScreenRenderer, actor, mapper } = context.value;\n        const {\n          renderer,\n          renderWindow,\n          fullScreenRenderer,\n          node_reader,\n          node_actor,\n          node_mapper,\n          node_glyph,\n          plan_reader,\n          plan_actor,\n          plan_mapper,\n          events_reader,\n          events_actor,\n          events_mapper,\n          events_glyph\n        } = context.value;\n        plan_actor.delete();\n        plan_mapper.delete();\n        plan_reader.delete();\n        node_actor.delete();\n        node_mapper.delete();\n        node_reader.delete();\n        node_glyph.delete();\n        events_reader.delete();\n        events_actor.delete();\n        events_mapper.delete();\n        events_glyph.delete();\n        //\n        renderer.delete();\n        renderWindow.delete();\n        //\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n    return {\n      vtkContainer,\n      setNodeRepresentation,\n      setEventOpacity,\n      setEventTimeStamp,\n      setPlanOpacity,\n      setPlanRepresentation,\n      plan_opacity,\n      plan_representation,\n      events_timestamp,\n      events_opacity,\n      node_representation,\n      //\n      getNodes,\n      getPlan,\n      getEvents\n    };\n  }\n};","map":{"version":3,"names":["axios","ref","unref","onMounted","onBeforeUnmount","watchEffect","watch","vtkFullScreenRenderWindow","vtkActor","vtkLookupTable","vtkDataArray","vtkMapper","vtkXMLPolyDataReader","vtkGlyph3DMapper","vtkCubeSource","vtkSphereMapper","setup","session","user","mine","bounds","Array","fill","vtkContainer","context","node_representation","events_opacity","events_timestamp","plan_opacity","plan_representation","textEncoder","TextEncoder","path","node_reader","newInstance","node_lut","data","Uint8Array","table","values","numberOfComponents","setTable","node_glyph","node_mapper","node_actor","setInputConnection","getOutputPort","setSourceConnection","setScalarModeToUsePointData","setColorByArrayName","setScaleArray","setScalarVisibility","setScalarRange","setLookupTable","setScaleFactor","setMapper","plan_reader","plan_mapper","plan_actor","getProperty","setOpacity","setColor","events_reader","events_mapper","events_actor","setNodeRepresentation","rep","value","Number","setEventOpacity","opacity","setEventTimeStamp","res","setPlanOpacity","setPlanRepresentation","onEventFilter","timestamp","renderWindow","getEvents","render","getNodes","args","Promise","resolve","reject","put","then","response_get","parseAsArrayBuffer","encode","catch","error","getNodeData","console","log","getPlan","getAllAndRender","renderer","getOutputData","getBounds","buffer","allSettled","resetCamera","checkModified","newValue","setScaleMode","setRepresentation","fullScreenRenderer","rootContainer","getRenderer","getRenderWindow","setBackground","setUseDepthPeeling","setMaximumNumberOfPeels","setOcclusionRatio","addActor","setInterval","events_glyph","delete"],"sources":["C:\\Users\\Malcolm\\Projects\\Web\\TickerWeb\\TickerWeb_Vue\\src\\components\\TickerVTK.vue"],"sourcesContent":["<template>\n  <div>\n    <div ref=\"vtkContainer\" />\n    <table class=\"controls\">\n      <tbody>\n        <tr>\n          <td style=\"text-align:left\"><b>Nodes</b></td>\n          <td style=\"text-align:left\"> </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Representation</td>\n          <td>\n            <select\n              style=\"width: 100%\"\n              :value=\"node_representation\"\n              @change=\"setNodeRepresentation($event.target.value)\"\n            >\n              <option value=\"0\">Unscaled</option>\n              <option value=\"1\">Scaled</option>\n            </select>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"text-align:left\"><b>Events</b></td>\n          <td style=\"text-align:left\"> </td>\n        </tr>\n        <tr>\n          <td style=\"text-align:left\">TimeStamp</td>\n          <td>\n            <input\n              type=\"range\"\n              min=\"1640995200\"\n              max=\"1656653056\"\n              :value=\"events_timestamp\"\n              @input=\"setEventTimeStamp($event.target.value)\"\n            />\n          </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Opacity</td>\n          <td>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              :value=\"events_opacity\"\n              @input=\"setEventOpacity($event.target.value)\"\n            />\n          </td>\n        </tr>\t\t\n        <tr>\n          <td style=\"text-align:left\"><b>Plan</b></td>\n          <td style=\"text-align:left\"> </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Opacity</td>\n          <td>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              :value=\"plan_opacity\"\n              @input=\"setPlanOpacity($event.target.value)\"\n            />\n          </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Representation</td>\n          <td>\n            <select\n              style=\"width: 100%\"\n              :value=\"plan_representation\"\n              @change=\"setPlanRepresentation($event.target.value)\"\n            >\n              <option value=\"0\">Points</option>\n              <option value=\"1\">Wireframe</option>\n            </select>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ref, unref, onMounted, onBeforeUnmount, watchEffect, watch } from 'vue';\n// vtk\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry'; // geometry rendering for WebGL, WebGPU\nimport '@kitware/vtk.js/Rendering/Profiles/Glyph'; // vtkGlyph3DMapper\nimport '@kitware/vtk.js/Rendering/Profiles/Molecule'; // vtkSphereMapper\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkActor                  from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkLookupTable            from '@kitware/vtk.js/Common/Core/LookupTable';\nimport vtkDataArray              from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkMapper                 from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader      from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkGlyph3DMapper          from '@kitware/vtk.js/Rendering/Core/Glyph3DMapper'; \nimport vtkCubeSource             from '@kitware/vtk.js/Filters/Sources/CubeSource';\n//import vtkSphereSource           from '@kitware/vtk.js/Filters/Sources/SphereSource';\nimport vtkSphereMapper           from '@kitware/vtk.js/Rendering/Core/SphereMapper';\n\n//import vtkDataArray from 'vtk.js/Sources/Common/Core/DataArray';\n//import vtkPoints from 'vtk.js/Sources/Common/Core/Points';\n\nexport default {\n\n  setup() {\n  \n    const session = {user: 'malcolm', mine:'Bambanani'}\n\t\n\tlet bounds = new Array(6).fill(0.0)\n\t\n\tconst vtkContainer = ref(null);\n    const context = ref(null);\n\n    const node_representation = ref(0);    \n\tconst events_opacity      = ref(50);\n    const events_timestamp    = ref(1640995200);\n\tconst plan_opacity        = ref(100);\n    const plan_representation = ref(1);\n\t\n    const textEncoder = new TextEncoder();\n    //const path = 'http://localhost:5000';\n\tconst path = 'http://192.168.0.2:5000';\n    \n\t// nodes\n\tconst node_reader = vtkXMLPolyDataReader.newInstance()\n\tconst node_lut = vtkLookupTable.newInstance(); // make custom LUT\n    const data = new Uint8Array([0, 255, 0, 255, 255, 165, 80, 255, 255, 0, 0, 255]); // green, orange, red\n    const table = vtkDataArray.newInstance({values: data, numberOfComponents: 4}); // to VTK\n    node_lut.setTable(table); // LUT = green, orange, red\n\n\tconst node_glyph = vtkCubeSource.newInstance();\n\tconst node_mapper = vtkGlyph3DMapper.newInstance();\n\tconst node_actor = vtkActor.newInstance();\n\t//\n\tnode_mapper.setInputConnection(node_reader.getOutputPort())\n\tnode_mapper.setSourceConnection(node_glyph.getOutputPort())\n    //node_mapper.setInputConnection(node_glyph.getOutputPort(), 1)\n\tnode_mapper.setScalarModeToUsePointData()\n    //node_mapper.setColorModeToMapScalars()\n\tnode_mapper.setColorByArrayName('alert')\n\tnode_mapper.setScaleArray('alert')\n\tnode_mapper.setScalarVisibility(true)\n\tnode_mapper.setScalarRange(1, 3)\n    node_mapper.setLookupTable(node_lut)\n\tnode_mapper.setScaleFactor(10.0)\n\t//node_mapper.setScaleModeToScaleByConstant()\n\t//node_mapper.setScaleMode(1)\n    node_actor.setMapper(node_mapper)\n\t//node_actor.getProperty().setAmbient(0.5)\n\t\n\t// plan\n\tconst plan_reader = vtkXMLPolyDataReader.newInstance();\n\tconst plan_mapper = vtkMapper.newInstance();\n\tconst plan_actor  = vtkActor.newInstance();\n\t//\n\tplan_mapper.setInputConnection(plan_reader.getOutputPort());\n\tplan_actor.setMapper(plan_mapper)\n\tplan_actor.getProperty().setOpacity(0.25)\n\tplan_actor.getProperty().setColor(0.5, 0.5, 0.5)\n\t\n\t// events\n\tconst events_reader = vtkXMLPolyDataReader.newInstance();\n    const events_mapper = vtkSphereMapper.newInstance();\n\tconst events_actor  = vtkActor.newInstance();\n\t//\n\tevents_mapper.setInputConnection(events_reader.getOutputPort())\n\tevents_mapper.setScaleFactor(100.0);\n    events_mapper.setScaleArray('scale');\n\tevents_mapper.setScalarVisibility(true);\n\tevents_mapper.setScalarModeToUsePointData()\n\t//events_mapper.setColorByArrayName('dtEvent');\n\tevents_mapper.setScalarRange(1640995200.0, 1656653056.0)\n\tevents_actor.setMapper(events_mapper)\n\tevents_actor.getProperty().setOpacity(0.5)\n\t\n    function setNodeRepresentation(rep) {\n      node_representation.value = Number(rep);\n    }\n\n\tfunction setEventOpacity(opacity) {\n      events_opacity.value = Number(opacity);\n    }\n\t\n    function setEventTimeStamp(res) {\n      events_timestamp.value = Number(res);\n    }\n\t\n\tfunction setPlanOpacity(opacity) {\n      plan_opacity.value = Number(opacity);\n    }\n\n    function setPlanRepresentation(rep) {\n      plan_representation.value = Number(rep);\n    }\n\t\n\t\n    async function onEventFilter(timestamp) {\n      const {renderWindow} = context.value\n      await getEvents({bounds: bounds, mine: session.mine, timestamp: timestamp})\n      renderWindow.render()\n\t}\n\t\n\t// provide data to vtk pipelines\n\t\n\tfunction getNodes(args={}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/nodes', args)\n          .then((response_get) => {\n            node_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data))\t\t\n            resolve('nodes')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n\tfunction getNodeData(args={}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/nodes_data', args)\n          .then((response_get) => {\n            console.log('node_data')\n            console.log(response_get.data)\t\t\n            resolve('nodes')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n\tfunction getPlan(args={}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/plan', args)\n          .then((response_get) => {\n            plan_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data))\t\t  \n            resolve('plan')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n\tfunction getEvents(args={}) {\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/events', args)\n          .then((response_get) => {\n            events_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data))\t\t  \n            resolve('events')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n    async function getAllAndRender() {\n      const {renderWindow, renderer} = context.value\n\t  await getNodeData({mine: session.mine})\n      await getNodes({mine: session.mine})\n      bounds = node_reader.getOutputData().getBounds()\n      const buffer = 1000.0\n      bounds[0] -= buffer\n      bounds[1] += buffer\n      bounds[2] -= buffer\n      bounds[3] += buffer\n      bounds[4] -= buffer\n      bounds[5] += buffer\n      console.log(bounds)\n      Promise.allSettled([getPlan({bounds: bounds, mine: session.mine}), getEvents({bounds: bounds, mine: session.mine, timestamp: 0.0})]).then(() => {\n\t\trenderer.resetCamera()\n        renderWindow.render()\n      })\n\t}\n\t\n    function checkModified(){\n      return new Promise((resolve, reject) => {\n        axios.put(path+'/modified', {mine: session.mine})\n          .then((response_get) => {\n            console.log(response_get.data)\t\t  \n            resolve('plan')\n          })\n          .catch((error) => {\n            reject(error)\n        })\n      })\n    }\n\t\n\twatch(events_timestamp, (newValue) => {\n      onEventFilter(newValue)\n\t})\n\n    watchEffect(() => {\n      if (context.value) {\n        const {renderWindow } = context.value;\n\t\tnode_mapper.setScaleMode(unref(node_representation));\n\t\tplan_actor.getProperty().setOpacity(unref(plan_opacity)*0.01);\n        plan_actor.getProperty().setRepresentation(unref(plan_representation))\n\t\tevents_actor.getProperty().setOpacity(unref(events_opacity)*0.01)\n\t\trenderWindow.render();\n      }\n    });\n\t\n    onMounted(() => {\n      console.log('onMounted')\n\t\n      if (!context.value) {\n        \n\t\tconst fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value,\n          });\n         \n        const renderer = fullScreenRenderer.getRenderer()\n        const renderWindow = fullScreenRenderer.getRenderWindow()\n\t\t//\n        renderer.setBackground(1.0, 1.0, 1.0)\n\t\trenderer.setUseDepthPeeling(true) // depth peeling\n        renderer.setMaximumNumberOfPeels(100) // depth peeling\n        renderer.setOcclusionRatio(0.01) // depth peeling\n\t\t//\n\t\trenderer.addActor(node_actor)\n\t\trenderer.addActor(plan_actor)\n\t\trenderer.addActor(events_actor)\n\t\t\n\t\tcontext.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          //\n          node_actor,\n          node_mapper,\n          node_reader,\n          node_glyph,\n          //\n          events_actor,\n          events_mapper,\n          events_reader,\n          //\n          plan_reader,\n          plan_mapper,\n          plan_actor,\n        };\n\t\t\n\t\t// renders as well\n\t\tgetAllAndRender()\n        \n        setInterval(checkModified, 30000)\n      }\n    });\n\t\n\n\tonBeforeUnmount(() => {\n      if (context.value) {\n\t\t//const {fullScreenRenderer, actor, mapper } = context.value;\n        const { renderer, renderWindow, fullScreenRenderer, node_reader, node_actor, node_mapper, node_glyph, plan_reader, plan_actor, plan_mapper, events_reader, events_actor, events_mapper, events_glyph, } = context.value;\n        plan_actor.delete();\n        plan_mapper.delete();\n        plan_reader.delete();\n\t\tnode_actor.delete();\n        node_mapper.delete();\n        node_reader.delete();\n\t\tnode_glyph.delete();\n        events_reader.delete();\n        events_actor.delete();\n        events_mapper.delete();\n        events_glyph.delete();\n        //\n\t\trenderer.delete()\n\t\trenderWindow.delete()\n        //\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n\n    return {\n      vtkContainer,\n      setNodeRepresentation,\n      setEventOpacity,\n      setEventTimeStamp,\n      setPlanOpacity,\n      setPlanRepresentation,\n      plan_opacity,\n      plan_representation,\n      events_timestamp,\n      events_opacity,\n      node_representation,\n      //\n      getNodes,\n      getPlan,\n      getEvents,\n    };\n  }\n}\n</script>\n\n<style scoped>\n.controls {\n  position: absolute;\n  top: 25px;\n  left: 25px;\n  background: white;\n  padding: 12px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}