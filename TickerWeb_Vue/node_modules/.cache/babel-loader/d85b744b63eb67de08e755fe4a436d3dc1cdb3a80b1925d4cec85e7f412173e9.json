{"ast":null,"code":"import axios from 'axios';\nimport { ref, unref, onMounted, onBeforeUnmount, watchEffect } from 'vue';\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry';\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\n//import vtkConeSource        from '@kitware/vtk.js/Filters/Sources/ConeSource';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML';\nexport default {\n  name: 'Cone-Src',\n  data() {\n    return {\n      msg: ''\n    };\n  },\n  methods: {\n    getMessage() {\n      const path = 'http://localhost:5000/cone';\n      axios.get(path).then(res => {\n        this.msg = res.data;\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  },\n  created() {\n    this.getMessage();\n  },\n  setup() {\n    const vtkContainer = ref(null);\n    const context = ref(null);\n    const coneResolution = ref(6);\n    const representation = ref(2);\n    function setConeResolution(res) {\n      coneResolution.value = Number(res);\n    }\n    function setRepresentation(rep) {\n      representation.value = Number(rep);\n    }\n    watchEffect(() => {\n      const res = unref(coneResolution);\n      const rep = unref(representation);\n      if (context.value) {\n        const {\n          actor,\n          coneSource,\n          renderWindow\n        } = context.value;\n        coneSource.setResolution(res);\n        actor.getProperty().setRepresentation(rep);\n        renderWindow.render();\n      }\n    });\n    onMounted(() => {\n      if (!context.value) {\n        const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value\n        });\n        //const coneSource = vtkConeSource.newInstance({ height: 1.0 });\n\n        const coneSource = vtkXMLPolyDataReader.newInstance();\n        coneSource.ReadFromInputStringOn();\n        const path = 'http://localhost:5000/cone';\n        axios.get(path).then(res => {\n          coneSource.SetInputString(res.data);\n        }).catch(error => {\n          console.error(error);\n        });\n\n        //coneSource.SetInputString(msg.value)\n        coneSource.Update();\n        const mapper = vtkMapper.newInstance();\n        mapper.setInputConnection(coneSource.getOutputPort());\n        const actor = vtkActor.newInstance();\n        actor.setMapper(mapper);\n        const renderer = fullScreenRenderer.getRenderer();\n        const renderWindow = fullScreenRenderer.getRenderWindow();\n        renderer.addActor(actor);\n        renderer.resetCamera();\n        renderWindow.render();\n        context.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          coneSource,\n          actor,\n          mapper\n        };\n      }\n    });\n    onBeforeUnmount(() => {\n      if (context.value) {\n        const {\n          fullScreenRenderer,\n          coneSource,\n          actor,\n          mapper\n        } = context.value;\n        //const { renderer, renderWindow, fullScreenRenderer, coneSource, actor, mapper } = context.value;\n        actor.delete();\n        mapper.delete();\n        coneSource.delete();\n\n        //renderer.delete()\n        //renderWindow.delete()\n\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n    return {\n      vtkContainer,\n      setRepresentation,\n      setConeResolution,\n      coneResolution,\n      representation\n    };\n  }\n};","map":{"version":3,"names":["axios","ref","unref","onMounted","onBeforeUnmount","watchEffect","vtkFullScreenRenderWindow","vtkActor","vtkMapper","vtkXMLPolyDataReader","name","data","msg","methods","getMessage","path","get","then","res","catch","error","console","created","setup","vtkContainer","context","coneResolution","representation","setConeResolution","value","Number","setRepresentation","rep","actor","coneSource","renderWindow","setResolution","getProperty","render","fullScreenRenderer","newInstance","rootContainer","ReadFromInputStringOn","SetInputString","Update","mapper","setInputConnection","getOutputPort","setMapper","renderer","getRenderer","getRenderWindow","addActor","resetCamera","delete"],"sources":["C:\\Users\\Malcolm\\Projects\\Web\\TickerWeb\\src\\components\\TickerVTK.vue"],"sourcesContent":["<template>\n  <div>\n    <div> <p>{{ msg }}</p> </div>\n    <div ref=\"vtkContainer\" />\n    <table class=\"controls\">\n      <tbody>\n        <tr>\n          <td>\n            <select\n              style=\"width: 100%\"\n              :value=\"representation\"\n              @change=\"setRepresentation($event.target.value)\"\n            >\n              <option value=\"0\">Points</option>\n              <option value=\"1\">Wireframe</option>\n              <option value=\"2\">Surface</option>\n            </select>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <input\n              type=\"range\"\n              min=\"4\"\n              max=\"80\"\n              :value=\"coneResolution\"\n              @input=\"setConeResolution($event.target.value)\"\n            />\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nimport { ref, unref, onMounted, onBeforeUnmount, watchEffect } from 'vue';\n\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry';\n\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\n\nimport vtkActor              from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper             from '@kitware/vtk.js/Rendering/Core/Mapper';\n//import vtkConeSource        from '@kitware/vtk.js/Filters/Sources/ConeSource';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML'; \n\nexport default {\n  \n  name: 'Cone-Src',\n  data() {\n    return {\n      msg: '',\n    };\n  },\n  methods: {\n    getMessage() {\n      const path = 'http://localhost:5000/cone';\n      axios.get(path)\n        .then((res) => {\n          this.msg = res.data;\n        })\n        .catch((error) => {\n\n          console.error(error);\n        });\n    },\n  },\n  created() {\n    this.getMessage();\n  },\n\n  setup() {\n    const vtkContainer = ref(null);\n    const context = ref(null);\n    const coneResolution = ref(6);\n    const representation = ref(2);\n\n    function setConeResolution(res) {\n      coneResolution.value = Number(res);\n    }\n\n    function setRepresentation(rep) {\n      representation.value = Number(rep);\n    }\n\n    watchEffect(() => {\n      const res = unref(coneResolution);\n      const rep = unref(representation);\n      if (context.value) {\n        const { actor, coneSource, renderWindow } = context.value;\n        coneSource.setResolution(res);\n        actor.getProperty().setRepresentation(rep);\n        renderWindow.render();\n      }\n    });\n\n    onMounted(() => {\n\t\n      if (!context.value) {\n        const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value,\n        });\n        //const coneSource = vtkConeSource.newInstance({ height: 1.0 });\n\t\t\n\t\tconst coneSource = vtkXMLPolyDataReader.newInstance();\n\t\tconeSource.ReadFromInputStringOn()\n\t\t\n\t\tconst path = 'http://localhost:5000/cone';\n        axios.get(path)\n          .then((res) => {\n            coneSource.SetInputString(res.data);\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n\t\t\n\t\t//coneSource.SetInputString(msg.value)\n\t\tconeSource.Update()\n\n        const mapper = vtkMapper.newInstance();\n        mapper.setInputConnection(coneSource.getOutputPort());\n\n        const actor = vtkActor.newInstance();\n        actor.setMapper(mapper);\n\n        const renderer = fullScreenRenderer.getRenderer();\n        const renderWindow = fullScreenRenderer.getRenderWindow();\n\n        renderer.addActor(actor);\n        renderer.resetCamera();\n        renderWindow.render();\n\n        context.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          coneSource,\n          actor,\n          mapper,\n        };\n      }\n    });\n\n    onBeforeUnmount(() => {\n      if (context.value) {\n\t\tconst {fullScreenRenderer, coneSource, actor, mapper } = context.value;\n        //const { renderer, renderWindow, fullScreenRenderer, coneSource, actor, mapper } = context.value;\n        actor.delete();\n        mapper.delete();\n        coneSource.delete();\n\t\t\n\t\t//renderer.delete()\n\t\t//renderWindow.delete()\n\t\t\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n\n    return {\n      vtkContainer,\n      setRepresentation,\n      setConeResolution,\n      coneResolution,\n      representation,\n    };\n  }\n}\n</script>\n\n<style scoped>\n.controls {\n  position: absolute;\n  top: 25px;\n  left: 25px;\n  background: white;\n  padding: 12px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}