{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { m as macro } from '../../macros2.js';\nimport vtkWebGPURenderEncoder from './RenderEncoder.js';\nimport vtkWebGPUTexture from './Texture.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\n\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUHardwareSelectionPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUHardwareSelectionPass');\n\n  // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n  publicAPI.traverse = (viewNode, renNode) => {\n    if (model.deleted) {\n      return;\n    }\n    model._currentParent = null;\n\n    // build\n    publicAPI.setCurrentOperation('buildPass');\n    viewNode.traverse(publicAPI);\n    const device = viewNode.getDevice();\n    if (!model.selectionRenderEncoder) {\n      publicAPI.createRenderEncoder();\n\n      // create color texture\n      model.colorTexture = vtkWebGPUTexture.newInstance({\n        label: 'hardwareSelectorColor'\n      });\n      model.colorTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'rgba32uint',\n        /* eslint-disable no-undef */\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n      });\n      const v1 = model.colorTexture.createView('hardwareSelectColorTexture');\n      model.selectionRenderEncoder.setColorTextureView(0, v1);\n\n      // create depth texture\n      model.depthTexture = vtkWebGPUTexture.newInstance({\n        label: 'hardwareSelectorDepth'\n      });\n      model.depthTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'depth32float',\n        /* eslint-disable no-undef */\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n      });\n      const v2 = model.depthTexture.createView('hardwareSelectDepthTexture');\n      model.selectionRenderEncoder.setDepthTextureView(v2);\n    } else {\n      model.colorTexture.resize(viewNode.getCanvas().width, viewNode.getCanvas().height);\n      model.depthTexture.resizeToMatch(model.colorTexture);\n    }\n    model.selectionRenderEncoder.attachTextureViews();\n    renNode.setRenderEncoder(model.selectionRenderEncoder);\n    publicAPI.setCurrentOperation('cameraPass');\n    renNode.traverse(publicAPI);\n    // opaque pass is used for selection\n    publicAPI.setCurrentOperation('opaquePass');\n    renNode.traverse(publicAPI);\n  };\n  publicAPI.createRenderEncoder = () => {\n    model.selectionRenderEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'HardwareSelectionPass'\n    });\n    // default settings are fine for this\n    model.selectionRenderEncoder.setPipelineHash('sel');\n    model.selectionRenderEncoder.setReplaceShaderCodeFunction(pipeline => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<u32>', 'outColor');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor = vec4<u32>(mapperUBO.PropID, compositeID, 0u, 0u);']).result;\n      fDesc.setCode(code);\n    });\n    const renDesc = model.selectionRenderEncoder.getDescription();\n    renDesc.colorAttachments[0].clearValue = [0.0, 0.0, 0.0, 0.0];\n    model.selectionRenderEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare: 'greater',\n        format: 'depth32float'\n      },\n      fragment: {\n        targets: [{\n          format: 'rgba32uint',\n          blend: undefined\n        }]\n      }\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  selectionRenderEncoder: null,\n  colorTexture: null,\n  depthTexture: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['colorTexture', 'depthTexture']);\n\n  // Object methods\n  vtkWebGPUHardwareSelectionPass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUHardwareSelectionPass');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUHardwareSelectionPass$1 = {\n  newInstance,\n  extend\n};\nexport { vtkWebGPUHardwareSelectionPass$1 as default, extend, newInstance };","map":{"version":3,"names":["m","macro","vtkWebGPURenderEncoder","vtkWebGPUTexture","vtkWebGPUShaderCache","vtkRenderPass","vtkWebGPUHardwareSelectionPass","publicAPI","model","classHierarchy","push","traverse","viewNode","renNode","deleted","_currentParent","setCurrentOperation","device","getDevice","selectionRenderEncoder","createRenderEncoder","colorTexture","newInstance","label","create","width","getCanvas","height","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","v1","createView","setColorTextureView","depthTexture","v2","setDepthTextureView","resize","resizeToMatch","attachTextureViews","setRenderEncoder","setPipelineHash","setReplaceShaderCodeFunction","pipeline","fDesc","getShaderDescription","addOutput","code","getCode","substitute","result","setCode","renDesc","getDescription","colorAttachments","clearValue","setPipelineSettings","primitive","cullMode","depthStencil","depthWriteEnabled","depthCompare","fragment","targets","blend","undefined","DEFAULT_VALUES","extend","initialValues","arguments","length","Object","assign","get","vtkWebGPUHardwareSelectionPass$1","default"],"sources":["C:/Users/Malcolm/my-vtkjs-app/node_modules/@kitware/vtk.js/Rendering/WebGPU/HardwareSelectionPass.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport vtkWebGPURenderEncoder from './RenderEncoder.js';\nimport vtkWebGPUTexture from './Texture.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\n\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUHardwareSelectionPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUHardwareSelectionPass');\n\n  // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n  publicAPI.traverse = (viewNode, renNode) => {\n    if (model.deleted) {\n      return;\n    }\n    model._currentParent = null;\n\n    // build\n    publicAPI.setCurrentOperation('buildPass');\n    viewNode.traverse(publicAPI);\n    const device = viewNode.getDevice();\n    if (!model.selectionRenderEncoder) {\n      publicAPI.createRenderEncoder();\n\n      // create color texture\n      model.colorTexture = vtkWebGPUTexture.newInstance({\n        label: 'hardwareSelectorColor'\n      });\n      model.colorTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'rgba32uint',\n        /* eslint-disable no-undef */\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n      });\n      const v1 = model.colorTexture.createView('hardwareSelectColorTexture');\n      model.selectionRenderEncoder.setColorTextureView(0, v1);\n\n      // create depth texture\n      model.depthTexture = vtkWebGPUTexture.newInstance({\n        label: 'hardwareSelectorDepth'\n      });\n      model.depthTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'depth32float',\n        /* eslint-disable no-undef */\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n      });\n      const v2 = model.depthTexture.createView('hardwareSelectDepthTexture');\n      model.selectionRenderEncoder.setDepthTextureView(v2);\n    } else {\n      model.colorTexture.resize(viewNode.getCanvas().width, viewNode.getCanvas().height);\n      model.depthTexture.resizeToMatch(model.colorTexture);\n    }\n    model.selectionRenderEncoder.attachTextureViews();\n    renNode.setRenderEncoder(model.selectionRenderEncoder);\n    publicAPI.setCurrentOperation('cameraPass');\n    renNode.traverse(publicAPI);\n    // opaque pass is used for selection\n    publicAPI.setCurrentOperation('opaquePass');\n    renNode.traverse(publicAPI);\n  };\n  publicAPI.createRenderEncoder = () => {\n    model.selectionRenderEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'HardwareSelectionPass'\n    });\n    // default settings are fine for this\n    model.selectionRenderEncoder.setPipelineHash('sel');\n    model.selectionRenderEncoder.setReplaceShaderCodeFunction(pipeline => {\n      const fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<u32>', 'outColor');\n      let code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor = vec4<u32>(mapperUBO.PropID, compositeID, 0u, 0u);']).result;\n      fDesc.setCode(code);\n    });\n    const renDesc = model.selectionRenderEncoder.getDescription();\n    renDesc.colorAttachments[0].clearValue = [0.0, 0.0, 0.0, 0.0];\n    model.selectionRenderEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare: 'greater',\n        format: 'depth32float'\n      },\n      fragment: {\n        targets: [{\n          format: 'rgba32uint',\n          blend: undefined\n        }]\n      }\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  selectionRenderEncoder: null,\n  colorTexture: null,\n  depthTexture: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['colorTexture', 'depthTexture']);\n\n  // Object methods\n  vtkWebGPUHardwareSelectionPass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUHardwareSelectionPass');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUHardwareSelectionPass$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUHardwareSelectionPass$1 as default, extend, newInstance };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}