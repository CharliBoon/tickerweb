{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport axios from 'axios';\nimport { ref, unref, onMounted, onBeforeUnmount, watchEffect, watch } from 'vue';\n// vtk\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry'; // geometry rendering for WebGL, WebGPU\nimport '@kitware/vtk.js/Rendering/Profiles/Glyph'; // vtkGlyph3DMapper\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkLookupTable from '@kitware/vtk.js/Common/Core/LookupTable';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkGlyph3DMapper from '@kitware/vtk.js/Rendering/Core/Glyph3DMapper';\nimport vtkCubeSource from '@kitware/vtk.js/Filters/Sources/CubeSource';\nexport default {\n  setup() {\n    const vtkContainer = ref(null);\n    const context = ref(null);\n    const coneResolution = ref(10);\n    const coneOpacity = ref(100);\n    const representation = ref(2);\n    const textEncoder = new TextEncoder();\n    //const path = 'http://localhost:5000';\n    const path = 'http://192.168.0.2:5000';\n    const node_reader = vtkXMLPolyDataReader.newInstance();\n    const node_lut = vtkLookupTable.newInstance();\n    const data = new Uint8Array([0, 255, 0, 255, 255, 165, 80, 255, 255, 0, 0, 255]);\n    const table = vtkDataArray.newInstance({\n      values: data,\n      numberOfComponents: 4\n    });\n    node_lut.setTable(table);\n    const node_glyph = vtkCubeSource.newInstance();\n    const node_mapper = vtkGlyph3DMapper.newInstance();\n    const node_actor = vtkActor.newInstance();\n    //\n    node_mapper.setInputConnection(node_reader.getOutputPort());\n    node_mapper.setScalarModeToUsePointData();\n    node_mapper.setColorByArrayName('alert');\n    node_mapper.setScalarVisibility(true);\n    node_mapper.setScalarRange(1, 3);\n    node_mapper.setLookupTable(node_lut);\n    //node_mapper.setColorByArrayName(\"Scalars\");\n    node_mapper.setColorModeToMapScalars();\n    node_mapper.setSourceConnection(node_glyph.getOutputPort());\n    node_mapper.setScaleFactor(10.0);\n    //node_mapper.setScaleModeToScaleByConstant\n    node_actor.setMapper(node_mapper);\n    node_actor.getProperty().setAmbient(0.5);\n    const plan_reader = vtkXMLPolyDataReader.newInstance();\n    const plan_mapper = vtkMapper.newInstance();\n    const plan_actor = vtkActor.newInstance();\n    //\n    plan_mapper.setInputConnection(plan_reader.getOutputPort());\n    plan_actor.setMapper(plan_mapper);\n    plan_actor.getProperty().setOpacity(0.25);\n    function setConeResolution(res) {\n      coneResolution.value = Number(res);\n    }\n    function setConeOpacity(opacity) {\n      coneOpacity.value = Number(opacity);\n    }\n    function setRepresentation(rep) {\n      representation.value = Number(rep);\n    }\n    function setConeAtResolution(resolution, reset = false) {\n      if (context.value) {\n        const {\n          renderWindow,\n          renderer\n        } = context.value;\n        axios.post(path + '/resolution', {\n          resolution: resolution\n        }).then(function (response_post) {\n          axios.get(path + '/nodes').then(response_get => {\n            plan_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n            if (reset) {\n              renderer.resetCamera();\n              console.log('reset');\n            }\n            renderWindow.render();\n            console.log(response_get.data);\n          }).catch(error => {\n            console.error(error);\n          });\n          console.log(response_post);\n        }).catch(function (error) {\n          console.log(error);\n        });\n        renderWindow.render();\n      }\n    }\n    function getNodes(reset = false) {\n      const {\n        renderWindow,\n        renderer\n      } = context.value;\n      axios.get(path + '/nodes').then(response_get => {\n        node_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n        if (reset) {\n          renderer.resetCamera();\n        }\n        renderWindow.render();\n        console.log(response_get.data);\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n    function getPlan(reset = false) {\n      const {\n        renderWindow,\n        renderer\n      } = context.value;\n      axios.get(path + '/plan').then(response_get => {\n        plan_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n        if (reset) {\n          renderer.resetCamera();\n        }\n        renderWindow.render();\n        console.log(response_get.data);\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n    watch(coneResolution, newValue => {\n      setConeAtResolution(newValue);\n    });\n    watchEffect(() => {\n      const opacity = unref(coneOpacity);\n      const rep = unref(representation);\n      if (context.value) {\n        const {\n          plan_actor,\n          renderWindow\n        } = context.value;\n        plan_actor.getProperty().setOpacity(opacity * 0.01);\n        plan_actor.getProperty().setRepresentation(rep);\n        renderWindow.render();\n      }\n    });\n    onMounted(() => {\n      if (!context.value) {\n        const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value\n        });\n        const renderer = fullScreenRenderer.getRenderer();\n        const renderWindow = fullScreenRenderer.getRenderWindow();\n        renderer.addActor(node_actor);\n        renderer.addActor(plan_actor);\n        context.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          //\n          node_actor,\n          node_mapper,\n          node_reader,\n          node_glyph,\n          //\n          plan_reader,\n          plan_mapper,\n          plan_actor\n        };\n\n        // renders as well\n        getNodes(false);\n        getPlan(true);\n        //setConeAtResolution(unref(coneResolution), true)\n      }\n    });\n    onBeforeUnmount(() => {\n      if (context.value) {\n        //const {fullScreenRenderer, actor, mapper } = context.value;\n        const {\n          renderer,\n          renderWindow,\n          fullScreenRenderer,\n          node_reader,\n          node_actor,\n          node_mapper,\n          plan_reader,\n          plan_actor,\n          plan_mapper\n        } = context.value;\n        plan_actor.delete();\n        plan_mapper.delete();\n        plan_reader.delete();\n        node_actor.delete();\n        node_mapper.delete();\n        node_reader.delete();\n        node_glyph.delete();\n        renderer.delete();\n        renderWindow.delete();\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n    return {\n      vtkContainer,\n      setRepresentation,\n      setConeResolution,\n      setConeOpacity,\n      coneOpacity,\n      coneResolution,\n      representation,\n      //\n      getNodes,\n      getPlan\n    };\n  }\n};","map":{"version":3,"names":["axios","ref","unref","onMounted","onBeforeUnmount","watchEffect","watch","vtkFullScreenRenderWindow","vtkActor","vtkLookupTable","vtkDataArray","vtkMapper","vtkXMLPolyDataReader","vtkGlyph3DMapper","vtkCubeSource","setup","vtkContainer","context","coneResolution","coneOpacity","representation","textEncoder","TextEncoder","path","node_reader","newInstance","node_lut","data","Uint8Array","table","values","numberOfComponents","setTable","node_glyph","node_mapper","node_actor","setInputConnection","getOutputPort","setScalarModeToUsePointData","setColorByArrayName","setScalarVisibility","setScalarRange","setLookupTable","setColorModeToMapScalars","setSourceConnection","setScaleFactor","setMapper","getProperty","setAmbient","plan_reader","plan_mapper","plan_actor","setOpacity","setConeResolution","res","value","Number","setConeOpacity","opacity","setRepresentation","rep","setConeAtResolution","resolution","reset","renderWindow","renderer","post","then","response_post","get","response_get","parseAsArrayBuffer","encode","resetCamera","console","log","render","catch","error","getNodes","getPlan","newValue","fullScreenRenderer","rootContainer","getRenderer","getRenderWindow","addActor","delete"],"sources":["C:\\Users\\Malcolm\\Projects\\Web\\TickerWeb\\TickerWeb_Vue\\src\\components\\TickerVTK.vue"],"sourcesContent":["<template>\n  <div>\n    <div ref=\"vtkContainer\" />\n    <table class=\"controls\">\n      <tbody>\n        <tr>\n          <td style=\"text-align:left\">Resolution</td>\n          <td>\n            <input\n              type=\"range\"\n              min=\"3\"\n              max=\"100\"\n              :value=\"coneResolution\"\n              @input=\"setConeResolution($event.target.value)\"\n            />\n          </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Opacity</td>\n          <td>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              :value=\"coneOpacity\"\n              @input=\"setConeOpacity($event.target.value)\"\n            />\n          </td>\n        </tr>\n\t\t<tr>\n          <td style=\"text-align:left\">Representation</td>\n          <td>\n            <select\n              style=\"width: 100%\"\n              :value=\"representation\"\n              @change=\"setRepresentation($event.target.value)\"\n            >\n              <option value=\"0\">Points</option>\n              <option value=\"1\">Wireframe</option>\n              <option value=\"2\">Surface</option>\n            </select>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ref, unref, onMounted, onBeforeUnmount, watchEffect, watch } from 'vue';\n// vtk\nimport '@kitware/vtk.js/Rendering/Profiles/Geometry'; // geometry rendering for WebGL, WebGPU\nimport '@kitware/vtk.js/Rendering/Profiles/Glyph'; // vtkGlyph3DMapper\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkActor                  from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkLookupTable            from '@kitware/vtk.js/Common/Core/LookupTable';\nimport vtkDataArray              from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkMapper                 from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader      from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkGlyph3DMapper          from '@kitware/vtk.js/Rendering/Core/Glyph3DMapper'; \nimport vtkCubeSource             from '@kitware/vtk.js/Filters/Sources/CubeSource';\n\nexport default {\n\n  setup() {\n  \n    const vtkContainer = ref(null);\n    const context = ref(null);\n    const coneResolution = ref(10);\n\tconst coneOpacity    = ref(100);\n    const representation = ref(2);\n\t\n    const textEncoder = new TextEncoder();\n    //const path = 'http://localhost:5000';\n\tconst path = 'http://192.168.0.2:5000';\n    \n\tconst node_reader = vtkXMLPolyDataReader.newInstance();\n\tconst node_lut = vtkLookupTable.newInstance();\n    const data = new Uint8Array([0, 255, 0, 255, 255, 165, 80, 255, 255, 0, 0, 255]);\n    const table = vtkDataArray.newInstance({values: data, numberOfComponents: 4});\n    node_lut.setTable(table);\n\n\tconst node_glyph = vtkCubeSource.newInstance();\n\tconst node_mapper = vtkGlyph3DMapper.newInstance();\n\tconst node_actor = vtkActor.newInstance();\n\t//\n\tnode_mapper.setInputConnection(node_reader.getOutputPort());\n\tnode_mapper.setScalarModeToUsePointData();\n\tnode_mapper.setColorByArrayName('alert');\n\tnode_mapper.setScalarVisibility(true);\n\tnode_mapper.setScalarRange(1, 3);\n    node_mapper.setLookupTable(node_lut);\n    //node_mapper.setColorByArrayName(\"Scalars\");\n    node_mapper.setColorModeToMapScalars();\n\tnode_mapper.setSourceConnection(node_glyph.getOutputPort())\n\tnode_mapper.setScaleFactor(10.0);\n\t//node_mapper.setScaleModeToScaleByConstant\n    node_actor.setMapper(node_mapper);\n\tnode_actor.getProperty().setAmbient(0.5)\n\t\n\t\n\tconst plan_reader = vtkXMLPolyDataReader.newInstance();\n\tconst plan_mapper = vtkMapper.newInstance();\n\tconst plan_actor  = vtkActor.newInstance();\n\t//\n\tplan_mapper.setInputConnection(plan_reader.getOutputPort());\n\tplan_actor.setMapper(plan_mapper)\n\tplan_actor.getProperty().setOpacity(0.25)\n\t\n    function setConeResolution(res) {\n      coneResolution.value = Number(res);\n    }\n\t\n\tfunction setConeOpacity(opacity) {\n      coneOpacity.value = Number(opacity);\n    }\n\n    function setRepresentation(rep) {\n      representation.value = Number(rep);\n    }\n\t\n\tfunction setConeAtResolution(resolution, reset=false) {\n      if (context.value) {\n        const {renderWindow, renderer} = context.value;\n\t\taxios.post(path + '/resolution',{resolution: resolution})\n          .then(function (response_post) {\n            axios.get(path+'/nodes')\n              .then((response_get) => {\n                plan_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n\t\t\t\tif (reset) {\n                  renderer.resetCamera()\n                  console.log('reset')\n                  }\n\t\t\t\trenderWindow.render();\n                console.log(response_get.data)\n              })\n              .catch((error) => {\n                console.error(error);\n              });\n            console.log(response_post);\n          })\n          .catch(function (error) {\n            console.log(error);\n          })\n\t\trenderWindow.render();\n      }\n\t}\n\t\n\tfunction getNodes(reset=false) {\n      const {renderWindow, renderer} = context.value;\n      axios.get(path+'/nodes')\n        .then((response_get) => {\n          node_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n          if (reset) {\n            renderer.resetCamera()\n            }\n          renderWindow.render();\n          console.log(response_get.data)\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n\t\n\tfunction getPlan(reset=false) {\n      const {renderWindow, renderer} = context.value;\n      axios.get(path+'/plan')\n        .then((response_get) => {\n          plan_reader.parseAsArrayBuffer(textEncoder.encode(response_get.data));\n          if (reset) {\n            renderer.resetCamera()\n            }\n          renderWindow.render();\n          console.log(response_get.data)\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n\t\n\twatch(coneResolution, (newValue) => {\n      setConeAtResolution(newValue)\n\t})\n\n    watchEffect(() => {\n      const opacity = unref(coneOpacity);\n      const rep = unref(representation);\n      if (context.value) {\n        const { plan_actor, renderWindow } = context.value;\n\t\tplan_actor.getProperty().setOpacity(opacity*0.01);\n        plan_actor.getProperty().setRepresentation(rep);\n\t\trenderWindow.render();\n      }\n    });\n\n    onMounted(() => {\n\t\n      if (!context.value) {\n        const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n          rootContainer: vtkContainer.value,\n          });\n        const renderer = fullScreenRenderer.getRenderer();\n        const renderWindow = fullScreenRenderer.getRenderWindow();\n\t\trenderer.addActor(node_actor);\n\t\trenderer.addActor(plan_actor);\n\t\t\n\t\tcontext.value = {\n          fullScreenRenderer,\n          renderWindow,\n          renderer,\n          //\n          node_actor,\n          node_mapper,\n          node_reader,\n          node_glyph,\n          //\n          plan_reader,\n          plan_mapper,\n          plan_actor,\n        };\n\t\t\n\t\t// renders as well\n\t\tgetNodes(false)\n\t\tgetPlan(true)\n        //setConeAtResolution(unref(coneResolution), true)\n      }\n    });\n\n    onBeforeUnmount(() => {\n      if (context.value) {\n\t\t//const {fullScreenRenderer, actor, mapper } = context.value;\n        const { renderer, renderWindow, fullScreenRenderer, node_reader, node_actor, node_mapper, plan_reader, plan_actor, plan_mapper } = context.value;\n        plan_actor.delete();\n        plan_mapper.delete();\n        plan_reader.delete();\n\t\tnode_actor.delete();\n        node_mapper.delete();\n        node_reader.delete();\n\t\tnode_glyph.delete();\n\t\t\n\t\trenderer.delete()\n\t\trenderWindow.delete()\n\t\t\n        fullScreenRenderer.delete();\n        context.value = null;\n      }\n    });\n\n    return {\n      vtkContainer,\n      setRepresentation,\n      setConeResolution,\n      setConeOpacity,\n      coneOpacity,\n      coneResolution,\n      representation,\n      //\n      getNodes,\n      getPlan,\n    };\n  }\n}\n</script>\n\n<style scoped>\n.controls {\n  position: absolute;\n  top: 25px;\n  left: 25px;\n  background: white;\n  padding: 12px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}