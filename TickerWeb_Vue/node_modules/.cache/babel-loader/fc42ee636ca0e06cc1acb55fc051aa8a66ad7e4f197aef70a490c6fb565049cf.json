{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { m as macro } from '../../macros2.js';\nimport vtkInteractorStyle from '../../Rendering/Core/InteractorStyle.js';\nimport vtkInteractorStyleConstants from '../../Rendering/Core/InteractorStyle/Constants.js';\nimport { A as degreesFromRadians } from '../../Common/Core/Math/index.js';\nimport { Device, Input } from '../../Rendering/Core/RenderWindowInteractor/Constants.js';\nconst {\n  States\n} = vtkInteractorStyleConstants;\n\n/* eslint-disable no-lonely-if */\n\n// ----------------------------------------------------------------------------\n// vtkInteractorStyleTrackballCamera methods\n// ----------------------------------------------------------------------------\n\nfunction vtkInteractorStyleTrackballCamera(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkInteractorStyleTrackballCamera');\n\n  // Public API methods\n  publicAPI.handleMouseMove = callData => {\n    const pos = callData.position;\n    const renderer = model.getRenderer(callData);\n    switch (model.state) {\n      case States.IS_ROTATE:\n        publicAPI.handleMouseRotate(renderer, pos);\n        publicAPI.invokeInteractionEvent({\n          type: 'InteractionEvent'\n        });\n        break;\n      case States.IS_PAN:\n        publicAPI.handleMousePan(renderer, pos);\n        publicAPI.invokeInteractionEvent({\n          type: 'InteractionEvent'\n        });\n        break;\n      case States.IS_DOLLY:\n        publicAPI.handleMouseDolly(renderer, pos);\n        publicAPI.invokeInteractionEvent({\n          type: 'InteractionEvent'\n        });\n        break;\n      case States.IS_SPIN:\n        publicAPI.handleMouseSpin(renderer, pos);\n        publicAPI.invokeInteractionEvent({\n          type: 'InteractionEvent'\n        });\n        break;\n    }\n    model.previousPosition = pos;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleButton3D = ed => {\n    if (ed && ed.pressed && ed.device === Device.RightController && (ed.input === Input.Trigger || ed.input === Input.TrackPad)) {\n      publicAPI.startCameraPose();\n      return;\n    }\n    if (ed && !ed.pressed && ed.device === Device.RightController && (ed.input === Input.Trigger || ed.input === Input.TrackPad) && model.state === States.IS_CAMERA_POSE) {\n      publicAPI.endCameraPose();\n      // return;\n    }\n  };\n  publicAPI.handleMove3D = ed => {\n    switch (model.state) {\n      case States.IS_CAMERA_POSE:\n        publicAPI.updateCameraPose(ed);\n        break;\n    }\n  };\n  publicAPI.updateCameraPose = ed => {\n    // move the world in the direction of the\n    // controller\n    const camera = model.getRenderer(ed).getActiveCamera();\n    const oldTrans = camera.getPhysicalTranslation();\n\n    // look at the y axis to determine how fast / what direction to move\n    const speed = 0.5; // ed.gamepad.axes[1];\n\n    // 0.05 meters / frame movement\n    const pscale = speed * 0.05 * camera.getPhysicalScale();\n\n    // convert orientation to world coordinate direction\n    const dir = camera.physicalOrientationToWorldDirection([ed.orientation.x, ed.orientation.y, ed.orientation.z, ed.orientation.w]);\n    camera.setPhysicalTranslation(oldTrans[0] + dir[0] * pscale, oldTrans[1] + dir[1] * pscale, oldTrans[2] + dir[2] * pscale);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleLeftButtonPress = callData => {\n    const pos = callData.position;\n    model.previousPosition = pos;\n    if (callData.shiftKey) {\n      if (callData.controlKey || callData.altKey) {\n        publicAPI.startDolly();\n      } else {\n        publicAPI.startPan();\n      }\n    } else {\n      if (callData.controlKey || callData.altKey) {\n        publicAPI.startSpin();\n      } else {\n        publicAPI.startRotate();\n      }\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleLeftButtonRelease = () => {\n    switch (model.state) {\n      case States.IS_DOLLY:\n        publicAPI.endDolly();\n        break;\n      case States.IS_PAN:\n        publicAPI.endPan();\n        break;\n      case States.IS_SPIN:\n        publicAPI.endSpin();\n        break;\n      case States.IS_ROTATE:\n        publicAPI.endRotate();\n        break;\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleStartMouseWheel = () => {\n    publicAPI.startDolly();\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndMouseWheel = () => {\n    publicAPI.endDolly();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleStartPinch = callData => {\n    model.previousScale = callData.scale;\n    publicAPI.startDolly();\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndPinch = () => {\n    publicAPI.endDolly();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleStartRotate = callData => {\n    model.previousRotation = callData.rotation;\n    publicAPI.startRotate();\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndRotate = () => {\n    publicAPI.endRotate();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleStartPan = callData => {\n    model.previousTranslation = callData.translation;\n    publicAPI.startPan();\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndPan = () => {\n    publicAPI.endPan();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handlePinch = callData => {\n    publicAPI.dollyByFactor(model.getRenderer(callData), callData.scale / model.previousScale);\n    model.previousScale = callData.scale;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handlePan = callData => {\n    const camera = model.getRenderer(callData).getActiveCamera();\n\n    // Calculate the focal depth since we'll be using it a lot\n    let viewFocus = camera.getFocalPoint();\n    viewFocus = publicAPI.computeWorldToDisplay(model.getRenderer(callData), viewFocus[0], viewFocus[1], viewFocus[2]);\n    const focalDepth = viewFocus[2];\n    const trans = callData.translation;\n    const lastTrans = model.previousTranslation;\n    const newPickPoint = publicAPI.computeDisplayToWorld(model.getRenderer(callData), viewFocus[0] + trans[0] - lastTrans[0], viewFocus[1] + trans[1] - lastTrans[1], focalDepth);\n\n    // Has to recalc old mouse point since the viewport has moved,\n    // so can't move it outside the loop\n    const oldPickPoint = publicAPI.computeDisplayToWorld(model.getRenderer(callData), viewFocus[0], viewFocus[1], focalDepth);\n\n    // Camera motion is reversed\n    const motionVector = [];\n    motionVector[0] = oldPickPoint[0] - newPickPoint[0];\n    motionVector[1] = oldPickPoint[1] - newPickPoint[1];\n    motionVector[2] = oldPickPoint[2] - newPickPoint[2];\n    viewFocus = camera.getFocalPoint();\n    const viewPoint = camera.getPosition();\n    camera.setFocalPoint(motionVector[0] + viewFocus[0], motionVector[1] + viewFocus[1], motionVector[2] + viewFocus[2]);\n    camera.setPosition(motionVector[0] + viewPoint[0], motionVector[1] + viewPoint[1], motionVector[2] + viewPoint[2]);\n    if (model._interactor.getLightFollowCamera()) {\n      model.getRenderer(callData).updateLightsGeometryToFollowCamera();\n    }\n    camera.orthogonalizeViewUp();\n    model.previousTranslation = callData.translation;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleRotate = callData => {\n    const camera = model.getRenderer(callData).getActiveCamera();\n    camera.roll(callData.rotation - model.previousRotation);\n    camera.orthogonalizeViewUp();\n    model.previousRotation = callData.rotation;\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleMouseRotate = (renderer, position) => {\n    if (!model.previousPosition) {\n      return;\n    }\n    const rwi = model._interactor;\n    const dx = position.x - model.previousPosition.x;\n    const dy = position.y - model.previousPosition.y;\n    const size = rwi.getView().getViewportSize(renderer);\n    let deltaElevation = -0.1;\n    let deltaAzimuth = -0.1;\n    if (size[0] && size[1]) {\n      deltaElevation = -20.0 / size[1];\n      deltaAzimuth = -20.0 / size[0];\n    }\n    const rxf = dx * deltaAzimuth * model.motionFactor;\n    const ryf = dy * deltaElevation * model.motionFactor;\n    const camera = renderer.getActiveCamera();\n    if (!Number.isNaN(rxf) && !Number.isNaN(ryf)) {\n      camera.azimuth(rxf);\n      camera.elevation(ryf);\n      camera.orthogonalizeViewUp();\n    }\n    if (model.autoAdjustCameraClippingRange) {\n      renderer.resetCameraClippingRange();\n    }\n    if (rwi.getLightFollowCamera()) {\n      renderer.updateLightsGeometryToFollowCamera();\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleMouseSpin = (renderer, position) => {\n    if (!model.previousPosition) {\n      return;\n    }\n    const rwi = model._interactor;\n    const camera = renderer.getActiveCamera();\n    const center = rwi.getView().getViewportCenter(renderer);\n    const oldAngle = degreesFromRadians(Math.atan2(model.previousPosition.y - center[1], model.previousPosition.x - center[0]));\n    const newAngle = degreesFromRadians(Math.atan2(position.y - center[1], position.x - center[0])) - oldAngle;\n    if (!Number.isNaN(newAngle)) {\n      camera.roll(newAngle);\n      camera.orthogonalizeViewUp();\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleMousePan = (renderer, position) => {\n    if (!model.previousPosition) {\n      return;\n    }\n    const camera = renderer.getActiveCamera();\n\n    // Calculate the focal depth since we'll be using it a lot\n    let viewFocus = camera.getFocalPoint();\n    viewFocus = publicAPI.computeWorldToDisplay(renderer, viewFocus[0], viewFocus[1], viewFocus[2]);\n    const focalDepth = viewFocus[2];\n    const newPickPoint = publicAPI.computeDisplayToWorld(renderer, position.x, position.y, focalDepth);\n\n    // Has to recalc old mouse point since the viewport has moved,\n    // so can't move it outside the loop\n    const oldPickPoint = publicAPI.computeDisplayToWorld(renderer, model.previousPosition.x, model.previousPosition.y, focalDepth);\n\n    // Camera motion is reversed\n    const motionVector = [];\n    motionVector[0] = oldPickPoint[0] - newPickPoint[0];\n    motionVector[1] = oldPickPoint[1] - newPickPoint[1];\n    motionVector[2] = oldPickPoint[2] - newPickPoint[2];\n    viewFocus = camera.getFocalPoint();\n    const viewPoint = camera.getPosition();\n    camera.setFocalPoint(motionVector[0] + viewFocus[0], motionVector[1] + viewFocus[1], motionVector[2] + viewFocus[2]);\n    camera.setPosition(motionVector[0] + viewPoint[0], motionVector[1] + viewPoint[1], motionVector[2] + viewPoint[2]);\n    if (model._interactor.getLightFollowCamera()) {\n      renderer.updateLightsGeometryToFollowCamera();\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleMouseDolly = (renderer, position) => {\n    if (!model.previousPosition) {\n      return;\n    }\n    const dy = position.y - model.previousPosition.y;\n    const rwi = model._interactor;\n    const center = rwi.getView().getViewportCenter(renderer);\n    const dyf = model.motionFactor * dy / center[1];\n    publicAPI.dollyByFactor(renderer, 1.1 ** dyf);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleMouseWheel = callData => {\n    const dyf = 1 - callData.spinY / model.zoomFactor;\n    publicAPI.dollyByFactor(model.getRenderer(callData), dyf);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.dollyByFactor = (renderer, factor) => {\n    if (Number.isNaN(factor)) {\n      return;\n    }\n    const camera = renderer.getActiveCamera();\n    if (camera.getParallelProjection()) {\n      camera.setParallelScale(camera.getParallelScale() / factor);\n    } else {\n      camera.dolly(factor);\n      if (model.autoAdjustCameraClippingRange) {\n        renderer.resetCameraClippingRange();\n      }\n    }\n    if (model._interactor.getLightFollowCamera()) {\n      renderer.updateLightsGeometryToFollowCamera();\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  motionFactor: 10.0,\n  zoomFactor: 10.0\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkInteractorStyle.extend(publicAPI, model, initialValues);\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, ['motionFactor', 'zoomFactor']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n\n  // Object specific methods\n  vtkInteractorStyleTrackballCamera(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkInteractorStyleTrackballCamera');\n\n// ----------------------------------------------------------------------------\n\nvar vtkInteractorStyleTrackballCamera$1 = {\n  newInstance,\n  extend\n};\nexport { vtkInteractorStyleTrackballCamera$1 as default, extend, newInstance };","map":{"version":3,"names":["m","macro","vtkInteractorStyle","vtkInteractorStyleConstants","A","degreesFromRadians","Device","Input","States","vtkInteractorStyleTrackballCamera","publicAPI","model","classHierarchy","push","handleMouseMove","callData","pos","position","renderer","getRenderer","state","IS_ROTATE","handleMouseRotate","invokeInteractionEvent","type","IS_PAN","handleMousePan","IS_DOLLY","handleMouseDolly","IS_SPIN","handleMouseSpin","previousPosition","handleButton3D","ed","pressed","device","RightController","input","Trigger","TrackPad","startCameraPose","IS_CAMERA_POSE","endCameraPose","handleMove3D","updateCameraPose","camera","getActiveCamera","oldTrans","getPhysicalTranslation","speed","pscale","getPhysicalScale","dir","physicalOrientationToWorldDirection","orientation","x","y","z","w","setPhysicalTranslation","handleLeftButtonPress","shiftKey","controlKey","altKey","startDolly","startPan","startSpin","startRotate","handleLeftButtonRelease","endDolly","endPan","endSpin","endRotate","handleStartMouseWheel","handleEndMouseWheel","handleStartPinch","previousScale","scale","handleEndPinch","handleStartRotate","previousRotation","rotation","handleEndRotate","handleStartPan","previousTranslation","translation","handleEndPan","handlePinch","dollyByFactor","handlePan","viewFocus","getFocalPoint","computeWorldToDisplay","focalDepth","trans","lastTrans","newPickPoint","computeDisplayToWorld","oldPickPoint","motionVector","viewPoint","getPosition","setFocalPoint","setPosition","_interactor","getLightFollowCamera","updateLightsGeometryToFollowCamera","orthogonalizeViewUp","handleRotate","roll","rwi","dx","dy","size","getView","getViewportSize","deltaElevation","deltaAzimuth","rxf","motionFactor","ryf","Number","isNaN","azimuth","elevation","autoAdjustCameraClippingRange","resetCameraClippingRange","center","getViewportCenter","oldAngle","Math","atan2","newAngle","dyf","handleMouseWheel","spinY","zoomFactor","factor","getParallelProjection","setParallelScale","getParallelScale","dolly","DEFAULT_VALUES","extend","initialValues","arguments","length","undefined","Object","assign","setGet","newInstance","vtkInteractorStyleTrackballCamera$1","default"],"sources":["/home/ims/VSCodeProjects/TickerWeb/TickerWeb_Vue/node_modules/@kitware/vtk.js/Interaction/Style/InteractorStyleTrackballCamera.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport vtkInteractorStyle from '../../Rendering/Core/InteractorStyle.js';\nimport vtkInteractorStyleConstants from '../../Rendering/Core/InteractorStyle/Constants.js';\nimport { A as degreesFromRadians } from '../../Common/Core/Math/index.js';\nimport { Device, Input } from '../../Rendering/Core/RenderWindowInteractor/Constants.js';\n\nconst {\n  States\n} = vtkInteractorStyleConstants;\n\n/* eslint-disable no-lonely-if */\n\n// ----------------------------------------------------------------------------\n// vtkInteractorStyleTrackballCamera methods\n// ----------------------------------------------------------------------------\n\nfunction vtkInteractorStyleTrackballCamera(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkInteractorStyleTrackballCamera');\n\n  // Public API methods\n  publicAPI.handleMouseMove = callData => {\n    const pos = callData.position;\n    const renderer = model.getRenderer(callData);\n    switch (model.state) {\n      case States.IS_ROTATE:\n        publicAPI.handleMouseRotate(renderer, pos);\n        publicAPI.invokeInteractionEvent({\n          type: 'InteractionEvent'\n        });\n        break;\n      case States.IS_PAN:\n        publicAPI.handleMousePan(renderer, pos);\n        publicAPI.invokeInteractionEvent({\n          type: 'InteractionEvent'\n        });\n        break;\n      case States.IS_DOLLY:\n        publicAPI.handleMouseDolly(renderer, pos);\n        publicAPI.invokeInteractionEvent({\n          type: 'InteractionEvent'\n        });\n        break;\n      case States.IS_SPIN:\n        publicAPI.handleMouseSpin(renderer, pos);\n        publicAPI.invokeInteractionEvent({\n          type: 'InteractionEvent'\n        });\n        break;\n    }\n    model.previousPosition = pos;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleButton3D = ed => {\n    if (ed && ed.pressed && ed.device === Device.RightController && (ed.input === Input.Trigger || ed.input === Input.TrackPad)) {\n      publicAPI.startCameraPose();\n      return;\n    }\n    if (ed && !ed.pressed && ed.device === Device.RightController && (ed.input === Input.Trigger || ed.input === Input.TrackPad) && model.state === States.IS_CAMERA_POSE) {\n      publicAPI.endCameraPose();\n      // return;\n    }\n  };\n\n  publicAPI.handleMove3D = ed => {\n    switch (model.state) {\n      case States.IS_CAMERA_POSE:\n        publicAPI.updateCameraPose(ed);\n        break;\n    }\n  };\n  publicAPI.updateCameraPose = ed => {\n    // move the world in the direction of the\n    // controller\n    const camera = model.getRenderer(ed).getActiveCamera();\n    const oldTrans = camera.getPhysicalTranslation();\n\n    // look at the y axis to determine how fast / what direction to move\n    const speed = 0.5; // ed.gamepad.axes[1];\n\n    // 0.05 meters / frame movement\n    const pscale = speed * 0.05 * camera.getPhysicalScale();\n\n    // convert orientation to world coordinate direction\n    const dir = camera.physicalOrientationToWorldDirection([ed.orientation.x, ed.orientation.y, ed.orientation.z, ed.orientation.w]);\n    camera.setPhysicalTranslation(oldTrans[0] + dir[0] * pscale, oldTrans[1] + dir[1] * pscale, oldTrans[2] + dir[2] * pscale);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleLeftButtonPress = callData => {\n    const pos = callData.position;\n    model.previousPosition = pos;\n    if (callData.shiftKey) {\n      if (callData.controlKey || callData.altKey) {\n        publicAPI.startDolly();\n      } else {\n        publicAPI.startPan();\n      }\n    } else {\n      if (callData.controlKey || callData.altKey) {\n        publicAPI.startSpin();\n      } else {\n        publicAPI.startRotate();\n      }\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleLeftButtonRelease = () => {\n    switch (model.state) {\n      case States.IS_DOLLY:\n        publicAPI.endDolly();\n        break;\n      case States.IS_PAN:\n        publicAPI.endPan();\n        break;\n      case States.IS_SPIN:\n        publicAPI.endSpin();\n        break;\n      case States.IS_ROTATE:\n        publicAPI.endRotate();\n        break;\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleStartMouseWheel = () => {\n    publicAPI.startDolly();\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndMouseWheel = () => {\n    publicAPI.endDolly();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleStartPinch = callData => {\n    model.previousScale = callData.scale;\n    publicAPI.startDolly();\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndPinch = () => {\n    publicAPI.endDolly();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleStartRotate = callData => {\n    model.previousRotation = callData.rotation;\n    publicAPI.startRotate();\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndRotate = () => {\n    publicAPI.endRotate();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleStartPan = callData => {\n    model.previousTranslation = callData.translation;\n    publicAPI.startPan();\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleEndPan = () => {\n    publicAPI.endPan();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handlePinch = callData => {\n    publicAPI.dollyByFactor(model.getRenderer(callData), callData.scale / model.previousScale);\n    model.previousScale = callData.scale;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handlePan = callData => {\n    const camera = model.getRenderer(callData).getActiveCamera();\n\n    // Calculate the focal depth since we'll be using it a lot\n    let viewFocus = camera.getFocalPoint();\n    viewFocus = publicAPI.computeWorldToDisplay(model.getRenderer(callData), viewFocus[0], viewFocus[1], viewFocus[2]);\n    const focalDepth = viewFocus[2];\n    const trans = callData.translation;\n    const lastTrans = model.previousTranslation;\n    const newPickPoint = publicAPI.computeDisplayToWorld(model.getRenderer(callData), viewFocus[0] + trans[0] - lastTrans[0], viewFocus[1] + trans[1] - lastTrans[1], focalDepth);\n\n    // Has to recalc old mouse point since the viewport has moved,\n    // so can't move it outside the loop\n    const oldPickPoint = publicAPI.computeDisplayToWorld(model.getRenderer(callData), viewFocus[0], viewFocus[1], focalDepth);\n\n    // Camera motion is reversed\n    const motionVector = [];\n    motionVector[0] = oldPickPoint[0] - newPickPoint[0];\n    motionVector[1] = oldPickPoint[1] - newPickPoint[1];\n    motionVector[2] = oldPickPoint[2] - newPickPoint[2];\n    viewFocus = camera.getFocalPoint();\n    const viewPoint = camera.getPosition();\n    camera.setFocalPoint(motionVector[0] + viewFocus[0], motionVector[1] + viewFocus[1], motionVector[2] + viewFocus[2]);\n    camera.setPosition(motionVector[0] + viewPoint[0], motionVector[1] + viewPoint[1], motionVector[2] + viewPoint[2]);\n    if (model._interactor.getLightFollowCamera()) {\n      model.getRenderer(callData).updateLightsGeometryToFollowCamera();\n    }\n    camera.orthogonalizeViewUp();\n    model.previousTranslation = callData.translation;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleRotate = callData => {\n    const camera = model.getRenderer(callData).getActiveCamera();\n    camera.roll(callData.rotation - model.previousRotation);\n    camera.orthogonalizeViewUp();\n    model.previousRotation = callData.rotation;\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleMouseRotate = (renderer, position) => {\n    if (!model.previousPosition) {\n      return;\n    }\n    const rwi = model._interactor;\n    const dx = position.x - model.previousPosition.x;\n    const dy = position.y - model.previousPosition.y;\n    const size = rwi.getView().getViewportSize(renderer);\n    let deltaElevation = -0.1;\n    let deltaAzimuth = -0.1;\n    if (size[0] && size[1]) {\n      deltaElevation = -20.0 / size[1];\n      deltaAzimuth = -20.0 / size[0];\n    }\n    const rxf = dx * deltaAzimuth * model.motionFactor;\n    const ryf = dy * deltaElevation * model.motionFactor;\n    const camera = renderer.getActiveCamera();\n    if (!Number.isNaN(rxf) && !Number.isNaN(ryf)) {\n      camera.azimuth(rxf);\n      camera.elevation(ryf);\n      camera.orthogonalizeViewUp();\n    }\n    if (model.autoAdjustCameraClippingRange) {\n      renderer.resetCameraClippingRange();\n    }\n    if (rwi.getLightFollowCamera()) {\n      renderer.updateLightsGeometryToFollowCamera();\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleMouseSpin = (renderer, position) => {\n    if (!model.previousPosition) {\n      return;\n    }\n    const rwi = model._interactor;\n    const camera = renderer.getActiveCamera();\n    const center = rwi.getView().getViewportCenter(renderer);\n    const oldAngle = degreesFromRadians(Math.atan2(model.previousPosition.y - center[1], model.previousPosition.x - center[0]));\n    const newAngle = degreesFromRadians(Math.atan2(position.y - center[1], position.x - center[0])) - oldAngle;\n    if (!Number.isNaN(newAngle)) {\n      camera.roll(newAngle);\n      camera.orthogonalizeViewUp();\n    }\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.handleMousePan = (renderer, position) => {\n    if (!model.previousPosition) {\n      return;\n    }\n    const camera = renderer.getActiveCamera();\n\n    // Calculate the focal depth since we'll be using it a lot\n    let viewFocus = camera.getFocalPoint();\n    viewFocus = publicAPI.computeWorldToDisplay(renderer, viewFocus[0], viewFocus[1], viewFocus[2]);\n    const focalDepth = viewFocus[2];\n    const newPickPoint = publicAPI.computeDisplayToWorld(renderer, position.x, position.y, focalDepth);\n\n    // Has to recalc old mouse point since the viewport has moved,\n    // so can't move it outside the loop\n    const oldPickPoint = publicAPI.computeDisplayToWorld(renderer, model.previousPosition.x, model.previousPosition.y, focalDepth);\n\n    // Camera motion is reversed\n    const motionVector = [];\n    motionVector[0] = oldPickPoint[0] - newPickPoint[0];\n    motionVector[1] = oldPickPoint[1] - newPickPoint[1];\n    motionVector[2] = oldPickPoint[2] - newPickPoint[2];\n    viewFocus = camera.getFocalPoint();\n    const viewPoint = camera.getPosition();\n    camera.setFocalPoint(motionVector[0] + viewFocus[0], motionVector[1] + viewFocus[1], motionVector[2] + viewFocus[2]);\n    camera.setPosition(motionVector[0] + viewPoint[0], motionVector[1] + viewPoint[1], motionVector[2] + viewPoint[2]);\n    if (model._interactor.getLightFollowCamera()) {\n      renderer.updateLightsGeometryToFollowCamera();\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleMouseDolly = (renderer, position) => {\n    if (!model.previousPosition) {\n      return;\n    }\n    const dy = position.y - model.previousPosition.y;\n    const rwi = model._interactor;\n    const center = rwi.getView().getViewportCenter(renderer);\n    const dyf = model.motionFactor * dy / center[1];\n    publicAPI.dollyByFactor(renderer, 1.1 ** dyf);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.handleMouseWheel = callData => {\n    const dyf = 1 - callData.spinY / model.zoomFactor;\n    publicAPI.dollyByFactor(model.getRenderer(callData), dyf);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.dollyByFactor = (renderer, factor) => {\n    if (Number.isNaN(factor)) {\n      return;\n    }\n    const camera = renderer.getActiveCamera();\n    if (camera.getParallelProjection()) {\n      camera.setParallelScale(camera.getParallelScale() / factor);\n    } else {\n      camera.dolly(factor);\n      if (model.autoAdjustCameraClippingRange) {\n        renderer.resetCameraClippingRange();\n      }\n    }\n    if (model._interactor.getLightFollowCamera()) {\n      renderer.updateLightsGeometryToFollowCamera();\n    }\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  motionFactor: 10.0,\n  zoomFactor: 10.0\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkInteractorStyle.extend(publicAPI, model, initialValues);\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, ['motionFactor', 'zoomFactor']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n\n  // Object specific methods\n  vtkInteractorStyleTrackballCamera(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkInteractorStyleTrackballCamera');\n\n// ----------------------------------------------------------------------------\n\nvar vtkInteractorStyleTrackballCamera$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkInteractorStyleTrackballCamera$1 as default, extend, newInstance };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}