{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { m as macro } from '../../macros2.js';\nimport vtkWebGPURenderEncoder from './RenderEncoder.js';\nimport vtkWebGPUTexture from './Texture.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\n\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUOpaquePass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUOpaquePass');\n\n  // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n  publicAPI.traverse = (renNode, viewNode) => {\n    if (model.deleted) {\n      return;\n    }\n\n    // we just render our delegates in order\n    model._currentParent = viewNode;\n    const device = viewNode.getDevice();\n    if (!model.renderEncoder) {\n      publicAPI.createRenderEncoder();\n      model.colorTexture = vtkWebGPUTexture.newInstance({\n        label: 'opaquePassColor'\n      });\n      model.colorTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'rgba16float',\n        /* eslint-disable no-undef */\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC\n      });\n      const ctView = model.colorTexture.createView('opaquePassColorTexture');\n      model.renderEncoder.setColorTextureView(0, ctView);\n      model.depthFormat = 'depth32float';\n      model.depthTexture = vtkWebGPUTexture.newInstance({\n        label: 'opaquePassDepth'\n      });\n      model.depthTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: model.depthFormat,\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC\n      });\n      const dView = model.depthTexture.createView('opaquePassDepthTexture');\n      model.renderEncoder.setDepthTextureView(dView);\n    } else {\n      model.colorTexture.resize(viewNode.getCanvas().width, viewNode.getCanvas().height);\n      model.depthTexture.resize(viewNode.getCanvas().width, viewNode.getCanvas().height);\n    }\n    model.renderEncoder.attachTextureViews();\n    publicAPI.setCurrentOperation('opaquePass');\n    renNode.setRenderEncoder(model.renderEncoder);\n    renNode.traverse(publicAPI);\n  };\n  publicAPI.getColorTextureView = () => model.renderEncoder.getColorTextureViews()[0];\n  publicAPI.getDepthTextureView = () => model.renderEncoder.getDepthTextureView();\n  publicAPI.createRenderEncoder = () => {\n    model.renderEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'OpaquePass'\n    });\n    // default settings are fine for this\n    model.renderEncoder.setPipelineHash('op');\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  renderEncoder: null,\n  colorTexture: null,\n  depthTexture: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['colorTexture', 'depthTexture']);\n\n  // Object methods\n  vtkWebGPUOpaquePass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUOpaquePass');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUOpaquePass$1 = {\n  newInstance,\n  extend\n};\nexport { vtkWebGPUOpaquePass$1 as default, extend, newInstance };","map":{"version":3,"names":["m","macro","vtkWebGPURenderEncoder","vtkWebGPUTexture","vtkRenderPass","vtkWebGPUOpaquePass","publicAPI","model","classHierarchy","push","traverse","renNode","viewNode","deleted","_currentParent","device","getDevice","renderEncoder","createRenderEncoder","colorTexture","newInstance","label","create","width","getCanvas","height","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","TEXTURE_BINDING","COPY_SRC","ctView","createView","setColorTextureView","depthFormat","depthTexture","dView","setDepthTextureView","resize","attachTextureViews","setCurrentOperation","setRenderEncoder","getColorTextureView","getColorTextureViews","getDepthTextureView","setPipelineHash","DEFAULT_VALUES","extend","initialValues","arguments","length","undefined","Object","assign","get","vtkWebGPUOpaquePass$1","default"],"sources":["C:/Users/Malcolm/Projects/Web/TickerWeb/node_modules/@kitware/vtk.js/Rendering/WebGPU/OpaquePass.js"],"sourcesContent":["import { m as macro } from '../../macros2.js';\nimport vtkWebGPURenderEncoder from './RenderEncoder.js';\nimport vtkWebGPUTexture from './Texture.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\n\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUOpaquePass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUOpaquePass');\n\n  // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n  publicAPI.traverse = (renNode, viewNode) => {\n    if (model.deleted) {\n      return;\n    }\n\n    // we just render our delegates in order\n    model._currentParent = viewNode;\n    const device = viewNode.getDevice();\n    if (!model.renderEncoder) {\n      publicAPI.createRenderEncoder();\n      model.colorTexture = vtkWebGPUTexture.newInstance({\n        label: 'opaquePassColor'\n      });\n      model.colorTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: 'rgba16float',\n        /* eslint-disable no-undef */\n        /* eslint-disable no-bitwise */\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC\n      });\n      const ctView = model.colorTexture.createView('opaquePassColorTexture');\n      model.renderEncoder.setColorTextureView(0, ctView);\n      model.depthFormat = 'depth32float';\n      model.depthTexture = vtkWebGPUTexture.newInstance({\n        label: 'opaquePassDepth'\n      });\n      model.depthTexture.create(device, {\n        width: viewNode.getCanvas().width,\n        height: viewNode.getCanvas().height,\n        format: model.depthFormat,\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC\n      });\n      const dView = model.depthTexture.createView('opaquePassDepthTexture');\n      model.renderEncoder.setDepthTextureView(dView);\n    } else {\n      model.colorTexture.resize(viewNode.getCanvas().width, viewNode.getCanvas().height);\n      model.depthTexture.resize(viewNode.getCanvas().width, viewNode.getCanvas().height);\n    }\n    model.renderEncoder.attachTextureViews();\n    publicAPI.setCurrentOperation('opaquePass');\n    renNode.setRenderEncoder(model.renderEncoder);\n    renNode.traverse(publicAPI);\n  };\n  publicAPI.getColorTextureView = () => model.renderEncoder.getColorTextureViews()[0];\n  publicAPI.getDepthTextureView = () => model.renderEncoder.getDepthTextureView();\n  publicAPI.createRenderEncoder = () => {\n    model.renderEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'OpaquePass'\n    });\n    // default settings are fine for this\n    model.renderEncoder.setPipelineHash('op');\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  renderEncoder: null,\n  colorTexture: null,\n  depthTexture: null\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Build VTK API\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['colorTexture', 'depthTexture']);\n\n  // Object methods\n  vtkWebGPUOpaquePass(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkWebGPUOpaquePass');\n\n// ----------------------------------------------------------------------------\n\nvar vtkWebGPUOpaquePass$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkWebGPUOpaquePass$1 as default, extend, newInstance };\n"],"mappings":";AAAA,SAASA,CAAC,IAAIC,KAAK,QAAQ,kBAAkB;AAC7C,OAAOC,sBAAsB,MAAM,oBAAoB;AACvD,OAAOC,gBAAgB,MAAM,cAAc;AAC3C,OAAOC,aAAa,MAAM,6BAA6B;;AAEvD;;AAEA,SAASC,mBAAmBA,CAACC,SAAS,EAAEC,KAAK,EAAE;EAC7C;EACAA,KAAK,CAACC,cAAc,CAACC,IAAI,CAAC,qBAAqB,CAAC;;EAEhD;EACA;EACA;EACA;EACAH,SAAS,CAACI,QAAQ,GAAG,CAACC,OAAO,EAAEC,QAAQ,KAAK;IAC1C,IAAIL,KAAK,CAACM,OAAO,EAAE;MACjB;IACF;;IAEA;IACAN,KAAK,CAACO,cAAc,GAAGF,QAAQ;IAC/B,MAAMG,MAAM,GAAGH,QAAQ,CAACI,SAAS,CAAC,CAAC;IACnC,IAAI,CAACT,KAAK,CAACU,aAAa,EAAE;MACxBX,SAAS,CAACY,mBAAmB,CAAC,CAAC;MAC/BX,KAAK,CAACY,YAAY,GAAGhB,gBAAgB,CAACiB,WAAW,CAAC;QAChDC,KAAK,EAAE;MACT,CAAC,CAAC;MACFd,KAAK,CAACY,YAAY,CAACG,MAAM,CAACP,MAAM,EAAE;QAChCQ,KAAK,EAAEX,QAAQ,CAACY,SAAS,CAAC,CAAC,CAACD,KAAK;QACjCE,MAAM,EAAEb,QAAQ,CAACY,SAAS,CAAC,CAAC,CAACC,MAAM;QACnCC,MAAM,EAAE,aAAa;QACrB;QACA;QACAC,KAAK,EAAEC,eAAe,CAACC,iBAAiB,GAAGD,eAAe,CAACE,eAAe,GAAGF,eAAe,CAACG;MAC/F,CAAC,CAAC;MACF,MAAMC,MAAM,GAAGzB,KAAK,CAACY,YAAY,CAACc,UAAU,CAAC,wBAAwB,CAAC;MACtE1B,KAAK,CAACU,aAAa,CAACiB,mBAAmB,CAAC,CAAC,EAAEF,MAAM,CAAC;MAClDzB,KAAK,CAAC4B,WAAW,GAAG,cAAc;MAClC5B,KAAK,CAAC6B,YAAY,GAAGjC,gBAAgB,CAACiB,WAAW,CAAC;QAChDC,KAAK,EAAE;MACT,CAAC,CAAC;MACFd,KAAK,CAAC6B,YAAY,CAACd,MAAM,CAACP,MAAM,EAAE;QAChCQ,KAAK,EAAEX,QAAQ,CAACY,SAAS,CAAC,CAAC,CAACD,KAAK;QACjCE,MAAM,EAAEb,QAAQ,CAACY,SAAS,CAAC,CAAC,CAACC,MAAM;QACnCC,MAAM,EAAEnB,KAAK,CAAC4B,WAAW;QACzBR,KAAK,EAAEC,eAAe,CAACC,iBAAiB,GAAGD,eAAe,CAACE,eAAe,GAAGF,eAAe,CAACG;MAC/F,CAAC,CAAC;MACF,MAAMM,KAAK,GAAG9B,KAAK,CAAC6B,YAAY,CAACH,UAAU,CAAC,wBAAwB,CAAC;MACrE1B,KAAK,CAACU,aAAa,CAACqB,mBAAmB,CAACD,KAAK,CAAC;IAChD,CAAC,MAAM;MACL9B,KAAK,CAACY,YAAY,CAACoB,MAAM,CAAC3B,QAAQ,CAACY,SAAS,CAAC,CAAC,CAACD,KAAK,EAAEX,QAAQ,CAACY,SAAS,CAAC,CAAC,CAACC,MAAM,CAAC;MAClFlB,KAAK,CAAC6B,YAAY,CAACG,MAAM,CAAC3B,QAAQ,CAACY,SAAS,CAAC,CAAC,CAACD,KAAK,EAAEX,QAAQ,CAACY,SAAS,CAAC,CAAC,CAACC,MAAM,CAAC;IACpF;IACAlB,KAAK,CAACU,aAAa,CAACuB,kBAAkB,CAAC,CAAC;IACxClC,SAAS,CAACmC,mBAAmB,CAAC,YAAY,CAAC;IAC3C9B,OAAO,CAAC+B,gBAAgB,CAACnC,KAAK,CAACU,aAAa,CAAC;IAC7CN,OAAO,CAACD,QAAQ,CAACJ,SAAS,CAAC;EAC7B,CAAC;EACDA,SAAS,CAACqC,mBAAmB,GAAG,MAAMpC,KAAK,CAACU,aAAa,CAAC2B,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC;EACnFtC,SAAS,CAACuC,mBAAmB,GAAG,MAAMtC,KAAK,CAACU,aAAa,CAAC4B,mBAAmB,CAAC,CAAC;EAC/EvC,SAAS,CAACY,mBAAmB,GAAG,MAAM;IACpCX,KAAK,CAACU,aAAa,GAAGf,sBAAsB,CAACkB,WAAW,CAAC;MACvDC,KAAK,EAAE;IACT,CAAC,CAAC;IACF;IACAd,KAAK,CAACU,aAAa,CAAC6B,eAAe,CAAC,IAAI,CAAC;EAC3C,CAAC;AACH;;AAEA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG;EACrB9B,aAAa,EAAE,IAAI;EACnBE,YAAY,EAAE,IAAI;EAClBiB,YAAY,EAAE;AAChB,CAAC;;AAED;;AAEA,SAASY,MAAMA,CAAC1C,SAAS,EAAEC,KAAK,EAAE;EAChC,IAAI0C,aAAa,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1FG,MAAM,CAACC,MAAM,CAAC/C,KAAK,EAAEwC,cAAc,EAAEE,aAAa,CAAC;;EAEnD;EACA7C,aAAa,CAAC4C,MAAM,CAAC1C,SAAS,EAAEC,KAAK,EAAE0C,aAAa,CAAC;EACrDhD,KAAK,CAACsD,GAAG,CAACjD,SAAS,EAAEC,KAAK,EAAE,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;;EAE7D;EACAF,mBAAmB,CAACC,SAAS,EAAEC,KAAK,CAAC;AACvC;;AAEA;;AAEA,MAAMa,WAAW,GAAGnB,KAAK,CAACmB,WAAW,CAAC4B,MAAM,EAAE,qBAAqB,CAAC;;AAEpE;;AAEA,IAAIQ,qBAAqB,GAAG;EAC1BpC,WAAW;EACX4B;AACF,CAAC;AAED,SAASQ,qBAAqB,IAAIC,OAAO,EAAET,MAAM,EAAE5B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}